"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const appbuilder_livesync_provider_base_1 = require("../common/appbuilder/providers/appbuilder-livesync-provider-base");
class LiveSyncProvider extends appbuilder_livesync_provider_base_1.AppBuilderLiveSyncProviderBase {
    constructor($androidLiveSyncServiceLocator, $iosLiveSyncServiceLocator, $buildService, $devicesService, $options) {
        super($androidLiveSyncServiceLocator, $iosLiveSyncServiceLocator);
        this.$buildService = $buildService;
        this.$devicesService = $devicesService;
        this.$options = $options;
    }
    buildForDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$devicesService.isiOSSimulator(device) ? this.$buildService.buildForiOSSimulator(this.$options.saveTo, device)
                : (yield this.$buildService.buildForDeploy(this.$devicesService.platform, this.$options.saveTo, false, device)).packageName;
        });
    }
}
exports.LiveSyncProvider = LiveSyncProvider;
$injector.register("liveSyncProvider", LiveSyncProvider);
