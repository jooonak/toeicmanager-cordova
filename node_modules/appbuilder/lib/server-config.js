"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class ServerConfiguration {
    constructor($config, $injector) {
        this.$config = $config;
        this.$injector = $injector;
        this.cachedServerConfiguration = null;
    }
    getConfigurationFromServer() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.cachedServerConfiguration) {
                let configUri = this.$config.AB_SERVER_PROTO + "://" + this.$config.AB_SERVER + "/appbuilder/configuration.json";
                let httpClient = this.$injector.resolve("httpClient");
                this.cachedServerConfiguration = JSON.parse((yield httpClient.httpRequest(configUri)).body);
            }
            return this.cachedServerConfiguration;
        });
    }
    tfisServer() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getConfigurationFromServer()).stsServer;
        });
    }
    assemblyVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getConfigurationFromServer()).assemblyVersion;
        });
    }
    resourcesPath() {
        return __awaiter(this, void 0, void 0, function* () {
            let resourcesRelativePath = (yield this.getConfigurationFromServer()).resourcesPath;
            return `${this.$config.AB_SERVER_PROTO}://${this.$config.AB_SERVER}/appbuilder/${resourcesRelativePath}`;
        });
    }
}
exports.ServerConfiguration = ServerConfiguration;
$injector.register("serverConfiguration", ServerConfiguration);
