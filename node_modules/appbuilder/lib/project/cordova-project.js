"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const util = require("util");
const framework_project_base_1 = require("./framework-project-base");
const constants_1 = require("../common/constants");
const helpers_1 = require("./../common/helpers");
const semver = require("semver");
class CordovaProject extends framework_project_base_1.FrameworkProjectBase {
    constructor($cordovaResources, $config, $injector, $jsonSchemaConstants, $mobileHelper, $projectConstants, $configFilesManager, $staticConfig, $templatesService, $cordovaProjectCapabilities, $errors, $fs, $jsonSchemaValidator, $logger, $options, $resources) {
        super($logger, $fs, $resources, $errors, $jsonSchemaValidator, $options);
        this.$cordovaResources = $cordovaResources;
        this.$config = $config;
        this.$injector = $injector;
        this.$jsonSchemaConstants = $jsonSchemaConstants;
        this.$mobileHelper = $mobileHelper;
        this.$projectConstants = $projectConstants;
        this.$configFilesManager = $configFilesManager;
        this.$staticConfig = $staticConfig;
        this.$templatesService = $templatesService;
        this.$cordovaProjectCapabilities = $cordovaProjectCapabilities;
    }
    get pluginsService() {
        return this.$injector.resolve("cordovaProjectPluginsService");
    }
    get name() {
        return constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova;
    }
    get capabilities() {
        return this.$cordovaProjectCapabilities;
    }
    get defaultProjectTemplate() {
        return this.$config.DEFAULT_CORDOVA_PROJECT_TEMPLATE;
    }
    get liveSyncUrl() {
        return "icenium://";
    }
    get requiredAndroidApiLevel() {
        return 10;
    }
    get configFiles() {
        let allConfigFiles = this.$configFilesManager.availableConfigFiles;
        let availableConfigFiles = [
            allConfigFiles["cordova-android-manifest"],
            allConfigFiles["android-config"],
            allConfigFiles["ios-info"],
            allConfigFiles["ios-config"]
        ];
        if (!this.$config.ON_PREM) {
            availableConfigFiles.push(allConfigFiles["wp8-manifest"]);
            availableConfigFiles.push(allConfigFiles["wp8-config"]);
        }
        return availableConfigFiles;
    }
    get relativeAppResourcesPath() {
        return 'App_Resources';
    }
    get projectSpecificFiles() {
        return this.$mobileHelper.platformNames.map(platform => `cordova.${platform.toLowerCase()}.js`);
    }
    getValidationSchemaId() {
        return this.$jsonSchemaConstants.CORDOVA_VERSION_3_SCHEMA_ID;
    }
    getPluginVariablesInfo(projectInformation, projectDir, configuration) {
        return this.getProperty(this.$projectConstants.CORDOVA_PLUGIN_VARIABLES_PROPERTY_NAME, configuration, projectInformation);
    }
    getProjectTargets(projectDir) {
        let fileMask = /^cordova\.(\w*)\.js$/i;
        return this.getProjectTargetsBase(projectDir, fileMask);
    }
    getTemplateFilename(name) {
        return util.format("Telerik.Mobile.Cordova.%s.zip", name);
    }
    alterPropertiesForNewProject(properties, projectName) {
        this.alterPropertiesForNewProjectBase(properties, projectName);
        properties.WP8ProductID = helpers_1.createGUID();
        properties.WP8PublisherID = helpers_1.createGUID();
        properties.WP8PackageIdentityName = this.getCorrectWP8PackageIdentityName(properties.AppIdentifier);
    }
    checkSdkVersions(platform, projectData) {
        if (this.$mobileHelper.isWP8Platform(platform) && projectData.WPSdk && projectData.WPSdk === "8.0" && semver.gte(projectData.FrameworkVersion, "3.7.0")) {
            this.$logger.warn("Your project targets Apache Cordova %s which lets you use the Windows Phone 8.1 SDK when building your apps. You can change your target Windows Phone SDK by running $ appbuilder prop set WPSdk 8.1", projectData.FrameworkVersion);
        }
    }
    getCorrectWP8PackageIdentityName(appIdentifier) {
        let sanitizedName = appIdentifier ? _.filter(appIdentifier.split(""), c => /[a-zA-Z0-9.-]/.test(c)).join("") : "";
        return util.format("%s.%s", CordovaProject.WP8_DEFAULT_PACKAGE_IDENTITY_NAME_PREFIX, sanitizedName).substr(0, 50);
    }
    getProjectTemplatesString() {
        return this.$templatesService.getTemplatesString(/.*Telerik\.Mobile\.Cordova\.(.+)\.zip/, { "blank": "JavaScript.Blank", "kendoui.empty": "KendoUI.Blank" });
    }
    getProjectFileSchema() {
        return this.getProjectFileSchemaByName(this.name);
    }
    adjustBuildProperties(buildProperties, projectInformation) {
        let projectData = projectInformation.projectData;
        let configurationName = this.$options.release ? "release" : "debug";
        buildProperties.CorePlugins = this.getProperty("CorePlugins", configurationName, projectInformation);
        if (buildProperties.Platform === "WP8") {
            buildProperties.WP8ProductID = projectData.WP8ProductID || this.generateWP8GUID();
            buildProperties.WP8PublisherID = projectData.WP8PublisherID;
            buildProperties.WP8Publisher = projectData.WP8Publisher;
            buildProperties.WP8TileTitle = projectData.WP8TileTitle;
            buildProperties.WP8Capabilities = projectData.WP8Capabilities;
            buildProperties.WP8Requirements = projectData.WP8Requirements;
            buildProperties.WP8SupportedResolutions = projectData.WP8SupportedResolutions;
            buildProperties.WP8PackageIdentityName = projectData.WP8PackageIdentityName;
            buildProperties.WP8WindowsPublisherName = projectData.WP8WindowsPublisherName;
        }
        return buildProperties;
    }
    ensureAllPlatformAssets(projectDir, frameworkVersion) {
        let platforms = this.$mobileHelper.platformNames;
        _.each(platforms, (platform) => this.ensureCordovaJs(platform, projectDir, frameworkVersion));
        let appResourcesDir = this.$resources.getPathToAppResources(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova);
        let appResourceFiles = this.$fs.enumerateFilesInDirectorySync(appResourcesDir);
        appResourceFiles.forEach((appResourceFile) => {
            let relativePath = path.relative(appResourcesDir, appResourceFile);
            let targetFilePath = path.join(projectDir, this.$staticConfig.APP_RESOURCES_DIR_NAME, relativePath);
            this.$logger.trace("Checking app resources: %s must match %s", appResourceFile, targetFilePath);
            if (this.shouldCopyPlatformAsset(appResourceFile, targetFilePath)) {
                this.printAssetUpdateMessage();
                this.$logger.trace("File not found, copying %s", appResourceFile);
                this.$fs.copyFile(appResourceFile, targetFilePath);
            }
        });
    }
    ensureProject(projectDir) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve();
        });
    }
    ensureCordovaJs(platform, projectDir, frameworkVersion) {
        let cordovaJsFilePath = path.join(projectDir, `cordova.${platform.toLowerCase()}.js`), cordovaJsSourceFilePath = this.$cordovaResources.buildCordovaJsFilePath(frameworkVersion, platform), cordovaJsSourceFileContents = this.$fs.readText(cordovaJsSourceFilePath).replace(CordovaProject.WHITESPACE_REGEX, ""), shouldCopyCordovaJsFile = !this.$fs.exists(cordovaJsFilePath) ||
            this.$fs.readText(cordovaJsFilePath).replace(CordovaProject.WHITESPACE_REGEX, "") !== cordovaJsSourceFileContents;
        if (shouldCopyCordovaJsFile) {
            this.printAssetUpdateMessage();
            this.$fs.copyFile(cordovaJsSourceFilePath, cordovaJsFilePath);
        }
    }
    completeProjectProperties(properties) {
        let updated = super.completeProjectProperties(properties);
        ["WP8PublisherID", "WP8ProductID"].forEach(wp8guid => {
            if (!_.has(properties, wp8guid) || properties[wp8guid] === "") {
                properties[wp8guid] = this.generateWP8GUID();
                updated = true;
            }
        });
        if (!_.has(properties, "WP8PackageIdentityName")) {
            let wp8PackageIdentityName = this.getCorrectWP8PackageIdentityName(properties.AppIdentifier);
            this.$logger.warn("Missing 'WP8PackageIdentityName' property in .abproject. Default value '%s' will be used.", wp8PackageIdentityName);
            properties.WP8PackageIdentityName = wp8PackageIdentityName;
            updated = true;
        }
        if (!_.has(properties, "WP8WindowsPublisherName")) {
            let wp8WindowsPublisherName = CordovaProject.WP8_DEFAULT_WP8_WINDOWS_PUBLISHER_NAME;
            this.$logger.warn("Missing 'WP8WindowsPublisherName' property in .abproject. Default value '%s' will be used.", wp8WindowsPublisherName);
            properties.WP8WindowsPublisherName = wp8WindowsPublisherName;
            updated = true;
        }
        return updated;
    }
    updateMigrationConfigFile() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve();
        });
    }
    generateWP8GUID() {
        return helpers_1.createGUID();
    }
}
CordovaProject.WP8_DEFAULT_PACKAGE_IDENTITY_NAME_PREFIX = "1234Telerik";
CordovaProject.WP8_DEFAULT_WP8_WINDOWS_PUBLISHER_NAME = "CN=Telerik";
CordovaProject.WHITESPACE_REGEX = /\s/g;
exports.CordovaProject = CordovaProject;
$injector.register("cordovaProject", CordovaProject);
