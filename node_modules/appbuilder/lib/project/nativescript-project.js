"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const util = require("util");
const temp = require("temp");
const constants_1 = require("../common/constants");
const framework_project_base_1 = require("./framework-project-base");
temp.track();
class NativeScriptProject extends framework_project_base_1.FrameworkProjectBase {
    constructor($config, $jsonSchemaConstants, $projectConstants, $configFilesManager, $staticConfig, $templatesService, $injector, $nativeScriptProjectCapabilities, $dateProvider, $typeScriptService, $npmService, $errors, $fs, $jsonSchemaValidator, $logger, $options, $resources) {
        super($logger, $fs, $resources, $errors, $jsonSchemaValidator, $options);
        this.$config = $config;
        this.$jsonSchemaConstants = $jsonSchemaConstants;
        this.$projectConstants = $projectConstants;
        this.$configFilesManager = $configFilesManager;
        this.$staticConfig = $staticConfig;
        this.$templatesService = $templatesService;
        this.$injector = $injector;
        this.$nativeScriptProjectCapabilities = $nativeScriptProjectCapabilities;
        this.$dateProvider = $dateProvider;
        this.$typeScriptService = $typeScriptService;
        this.$npmService = $npmService;
    }
    get pluginsService() {
        return this.$injector.resolve("nativeScriptProjectPluginsService");
    }
    get name() {
        return constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript;
    }
    get capabilities() {
        return this.$nativeScriptProjectCapabilities;
    }
    get defaultProjectTemplate() {
        return this.$config.DEFAULT_NATIVESCRIPT_PROJECT_TEMPLATE;
    }
    get liveSyncUrl() {
        return "nativescript://";
    }
    get requiredAndroidApiLevel() {
        return 17;
    }
    get configFiles() {
        let allConfigFiles = this.$configFilesManager.availableConfigFiles;
        return [
            allConfigFiles["nativescript-ios-info"],
            allConfigFiles["nativescript-android-manifest"]
        ];
    }
    get relativeAppResourcesPath() {
        return path.join('app', 'App_Resources');
    }
    get projectSpecificFiles() {
        return [this.$projectConstants.PACKAGE_JSON_NAME];
    }
    get $nativeScriptMigrationService() {
        return this.$injector.resolve("nativeScriptMigrationService");
    }
    get $nativeScriptResources() {
        return this.$injector.resolve("nativeScriptResources");
    }
    getValidationSchemaId() {
        return this.$jsonSchemaConstants.NATIVESCRIPT_SCHEMA_ID;
    }
    getTemplateFilename(name) {
        return util.format("Telerik.Mobile.NS.%s.zip", name.replace(/TypeScript/, "TS"));
    }
    alterPropertiesForNewProject(properties, projectName) {
        this.alterPropertiesForNewProjectBase(properties, projectName);
    }
    checkSdkVersions(platform, projectData) { }
    getProjectTemplatesString() {
        let templateStrings = this.$templatesService.getTemplatesString(/.*Telerik\.Mobile\.NS\.(.+)\.zip/, { "blank": "JavaScript.Blank" });
        return templateStrings.replace(/TS[.]/g, "TypeScript.");
    }
    getProjectFileSchema() {
        return this.getProjectFileSchemaByName(this.name);
    }
    getProjectTargets(projectDir) {
        return ["android", "ios"];
    }
    adjustBuildProperties(buildProperties, projectInformation) {
        if (buildProperties.Platform === "WP8") {
            this.$errors.fail("You will be able to build NativeScript based applications for WP8 platform in a future release of the Telerik AppBuilder CLI.");
        }
        return buildProperties;
    }
    ensureAllPlatformAssets(projectDir, frameworkVersion) {
        let appResourcesDir = this.$resources.getPathToAppResources(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript);
        let appResourceFiles = this.$fs.enumerateFilesInDirectorySync(appResourcesDir);
        let appResourcesHolderDirectory = path.join(projectDir, this.$projectConstants.NATIVESCRIPT_APP_DIR_NAME);
        appResourceFiles.forEach((appResourceFile) => {
            let relativePath = path.relative(appResourcesDir, appResourceFile);
            let targetFilePath = path.join(appResourcesHolderDirectory, this.$staticConfig.APP_RESOURCES_DIR_NAME, relativePath);
            this.$logger.trace("Checking app resources: %s must match %s", appResourceFile, targetFilePath);
            if (this.shouldCopyPlatformAsset(appResourceFile, targetFilePath)) {
                this.printAssetUpdateMessage();
                this.$logger.trace("File not found, copying %s", appResourceFile);
                this.$fs.copyFile(appResourceFile, targetFilePath);
            }
        });
    }
    getPluginVariablesInfo(projectInformation, projectDir, configuration) {
        let packageJsonContent = this.$fs.readJson(path.join(projectDir, this.$projectConstants.PACKAGE_JSON_NAME));
        let nativescript = packageJsonContent && packageJsonContent.nativescript;
        let dependencies = packageJsonContent && packageJsonContent.dependencies;
        if (nativescript && dependencies) {
            let pluginsVariables = {};
            _.keys(dependencies).forEach(dependency => {
                let variablesKey = `${dependency}-variables`;
                let variables = nativescript[variablesKey];
                if (variables) {
                    pluginsVariables[dependency] = variables;
                }
            });
            return pluginsVariables;
        }
        return null;
    }
    updateMigrationConfigFile() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let nativeScriptMigrationFileName = this.$nativeScriptResources.nativeScriptMigrationFile;
                let currentMigrationConfigStatus = this.$fs.getFsStats(nativeScriptMigrationFileName);
                let currentTime = this.$dateProvider.getCurrentDate();
                if (currentTime.getTime() - currentMigrationConfigStatus.mtime.getTime() < framework_project_base_1.FrameworkProjectBase.MAX_MIGRATION_FILE_EDIT_TIME_DIFFERENCE) {
                    this.$logger.trace(`The current NativeScript migration file was updated on ${currentMigrationConfigStatus.mtime}.`);
                    return;
                }
                let downloadDestinationDirectory = temp.mkdirSync("nativescript-migration");
                let downloadedFilePath = path.join(downloadDestinationDirectory, "nativeScript-migration-data.json");
                yield this.$nativeScriptMigrationService.downloadMigrationConfigFile(downloadedFilePath);
                let newMigrationFileContent = this.$fs.readText(downloadedFilePath);
                let currentMigrationFileContent = this.$fs.readText(nativeScriptMigrationFileName);
                if (currentMigrationFileContent !== newMigrationFileContent) {
                    this.$fs.writeFile(nativeScriptMigrationFileName, newMigrationFileContent);
                    this.$logger.trace(`NativeScript migration file updated on ${currentTime}.`);
                }
                else {
                    this.$fs.utimes(nativeScriptMigrationFileName, currentTime, currentTime);
                }
            }
            catch (err) {
                this.$logger.trace("Failed to download the NativeScript migration file.", err);
            }
        });
    }
    ensureProject(projectDir) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateMigrationConfigFile();
            if (this.$typeScriptService.isTypeScriptProject(projectDir)) {
                try {
                    yield this.$npmService.install(projectDir);
                }
                catch (err) {
                    this.$logger.trace(`Failed to install all npm dependencies in the project. Error: ${err}.`);
                    this.$logger.warn("The installation of the project dependencies from npm failed. The TypeScript transpilation may fail due to missing .d.ts files.");
                }
            }
        });
    }
}
exports.NativeScriptProject = NativeScriptProject;
$injector.register("nativeScriptProject", NativeScriptProject);
