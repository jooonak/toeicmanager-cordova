"use strict";
const path = require("path");
const constants_1 = require("../common/constants");
class FrameworkProjectBase {
    constructor($logger, $fs, $resources, $errors, $jsonSchemaValidator, $options) {
        this.$logger = $logger;
        this.$fs = $fs;
        this.$resources = $resources;
        this.$errors = $errors;
        this.$jsonSchemaValidator = $jsonSchemaValidator;
        this.$options = $options;
        this.assetUpdateMessagePrinted = false;
    }
    alterPropertiesForNewProjectBase(properties, projectName) {
        properties.DisplayName = projectName;
        properties.Description = projectName;
        let appid = this.$options.appid;
        if (!this.$options.appid) {
            appid = this.generateDefaultAppId(projectName);
            this.$logger.warn("--appid was not specified. Defaulting to " + appid);
        }
        properties.AppIdentifier = appid;
    }
    getProjectFileSchemaByName(name) {
        return this.$jsonSchemaValidator.tryResolveValidationSchema(name);
    }
    getProjectTargetsBase(dir, fileMask) {
        let result = [];
        if (dir) {
            let files = this.$fs.readDirectory(dir);
            _.each(files, (file) => {
                let matches = file.match(fileMask);
                if (matches) {
                    result.push(matches[1].toLowerCase());
                }
            });
        }
        return result;
    }
    printAssetUpdateMessage() {
        if (!this.assetUpdateMessagePrinted) {
            this.$logger.info("Setting up missing asset files. Commit these assets into your source control repository.");
            this.assetUpdateMessagePrinted = true;
        }
    }
    getProperty(propertyName, configuration, projectInformation) {
        let propertyValue = null;
        let configData = projectInformation.configurationSpecificData[configuration];
        if (configData && configData[propertyName]) {
            propertyValue = configData[propertyName];
        }
        else {
            propertyValue = projectInformation.projectData[propertyName];
        }
        return propertyValue;
    }
    completeProjectProperties(properties) {
        let updated = false;
        if (_.has(properties, "name")) {
            properties.ProjectName = properties.name;
            delete properties.name;
            updated = true;
        }
        if (!properties.DisplayName) {
            properties.DisplayName = properties.iOSDisplayName ? properties.iOSDisplayName : properties.ProjectName;
            updated = true;
        }
        if (_.has(properties, "iOSDisplayName")) {
            delete properties.iOSDisplayName;
            updated = true;
        }
        return updated;
    }
    shouldCopyPlatformAsset(sourceFilePath, targetFilePath) {
        if (path.extname(sourceFilePath) === constants_1.FileExtensions.PNG_FILE) {
            let lastIndexOfExtension = targetFilePath.lastIndexOf(constants_1.FileExtensions.PNG_FILE);
            let ninePatchAssetPath = targetFilePath.substring(0, lastIndexOfExtension) + constants_1.FileExtensions.NINE_PATCH_PNG_FILE;
            return !this.$fs.exists(targetFilePath) && !this.$fs.exists(ninePatchAssetPath);
        }
        else {
            return !this.$fs.exists(targetFilePath);
        }
    }
    generateDefaultAppId(appName) {
        let sanitizedName = _.filter(appName.split(""), c => /[a-zA-Z0-9]/.test(c)).join("");
        if (sanitizedName) {
            if (/^\d.*$/.test(sanitizedName)) {
                sanitizedName = "the" + sanitizedName;
            }
            return "com.telerik." + sanitizedName;
        }
        else {
            return "com.telerik.the";
        }
    }
}
FrameworkProjectBase.MAX_MIGRATION_FILE_EDIT_TIME_DIFFERENCE = 60 * 60 * 1000 * 2;
exports.FrameworkProjectBase = FrameworkProjectBase;
