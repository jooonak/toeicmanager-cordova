"use strict";
const options_1 = require("./common/options");
const constants_1 = require("./common/constants");
const osenv = require("osenv");
const path = require("path");
class Options extends options_1.OptionsBase {
    constructor($errors, $staticConfig, $hostInfo) {
        super({
            answers: { type: options_1.OptionType.String },
            available: { type: options_1.OptionType.Boolean },
            certificate: { type: options_1.OptionType.String },
            companion: { type: options_1.OptionType.Boolean },
            core: { type: options_1.OptionType.Boolean },
            deploy: { type: options_1.OptionType.String },
            download: { type: options_1.OptionType.Boolean },
            force: { type: options_1.OptionType.Boolean, alias: "f" },
            group: { type: options_1.OptionType.Array },
            icon: { type: options_1.OptionType.String },
            latest: { type: options_1.OptionType.Boolean },
            mandatory: { type: options_1.OptionType.Boolean },
            professional: { type: options_1.OptionType.Boolean },
            provision: { type: options_1.OptionType.String },
            public: { type: options_1.OptionType.Boolean },
            publish: { type: options_1.OptionType.Boolean },
            saveTo: { type: options_1.OptionType.String },
            screenBuilderCacheDir: { type: options_1.OptionType.String },
            sendEmail: { type: options_1.OptionType.Boolean },
            sendPush: { type: options_1.OptionType.Boolean },
            simulator: { type: options_1.OptionType.Boolean, default: true },
            skipUi: { type: options_1.OptionType.Boolean },
            splash: { type: options_1.OptionType.String },
            template: { type: options_1.OptionType.String, alias: "t" },
            types: { type: options_1.OptionType.Boolean, default: true },
            validValue: { type: options_1.OptionType.Boolean },
            verified: { type: options_1.OptionType.Boolean }
        }, path.join($hostInfo.isWindows ? process.env.LocalAppData : path.join(osenv.home(), ".local/share"), "Telerik", "BlackDragon", ".appbuilder-cli"), $errors, $staticConfig);
        let that = this;
        that.screenBuilderCacheDir = path.join((($hostInfo.isWindows && this.defaultProfileDir === that.profileDir) ? path.join(process.env.LocalAppData, "Telerik") : that.profileDir), "sb");
        if (that.release) {
            that.config = that.config || [];
            that.config.push(constants_1.Configurations.Release);
        }
        if (that.debug) {
            that.config = that.config || [];
            that.config.push(constants_1.Configurations.Debug);
        }
    }
}
exports.Options = Options;
$injector.register("options", Options);
