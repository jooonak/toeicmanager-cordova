"use strict";
const path = require("path");
const config_base_1 = require("./common/config-base");
const static_config_base_1 = require("./common/static-config-base");
const osenv = require("osenv");
class Configuration extends config_base_1.ConfigBase {
    constructor($fs) {
        super($fs);
        this.$fs = $fs;
        let configPath = this.getConfigPath("config");
        if (!this.$fs.exists(configPath)) {
            let configBase = this.loadConfig("config-base");
            this.$fs.writeJson(configPath, configBase);
        }
        else {
            this.mergeConfig(this, this.loadConfig("config"));
        }
    }
    reset() {
        return this.$fs.copyFile(this.getConfigPath("config-base"), this.getConfigPath("config"));
    }
    apply(configName) {
        let baseConfig = this.loadConfig("config-base");
        let newConfig = this.loadConfig("config-" + configName);
        this.mergeConfig(baseConfig, newConfig);
        this.saveConfig(baseConfig, "config");
    }
    printConfigData() {
        let config = this.loadConfig("config");
        console.log(config);
    }
    saveConfig(config, name) {
        let configNoFunctions = Object.create(null);
        _.each(config, (entry, key) => {
            if (typeof entry !== "function") {
                configNoFunctions[key] = entry;
            }
        });
        let configFileName = this.getConfigPath(name);
        return this.$fs.writeJson(configFileName, configNoFunctions);
    }
    mergeConfig(config, mergeFrom) {
        _.extend(config, mergeFrom);
    }
}
exports.Configuration = Configuration;
$injector.register("config", Configuration);
class StaticConfig extends static_config_base_1.StaticConfigBase {
    constructor($injector) {
        super($injector);
        this.PROJECT_FILE_NAME = ".abproject";
        this.CLIENT_NAME = "AppBuilder";
        this.ANALYTICS_API_KEY = "13eaa7db90224aa1861937fc71863ab8";
        this.ANALYTICS_FEATURE_USAGE_TRACKING_API_KEY = "13eaa7db90224aa1861937fc71863ab8";
        this.TRACK_FEATURE_USAGE_SETTING_NAME = "AnalyticsSettings.TrackFeatureUsage";
        this.ERROR_REPORT_SETTING_NAME = "AnalyticsSettings.TrackExceptions";
        this.ANALYTICS_INSTALLATION_ID_SETTING_NAME = "AnalyticsInstallationID";
        this.SYS_REQUIREMENTS_LINK = "http://docs.telerik.com/platform/appbuilder/running-appbuilder/running-the-cli/system-requirements-cli";
        this.SOLUTION_SPACE_NAME = "Private_Build_Folder";
        this.FULL_CLIENT_NAME = "Progress Telerik AppBuilder CLI";
        this.version = require("../package.json").version;
        this.triggerJsonSchemaValidation = true;
        this.RESOURCE_DIR_PATH = path.join(this.RESOURCE_DIR_PATH, "../../resources");
    }
    get GITHUB_ACCESS_TOKEN_FILEPATH() {
        return path.join(osenv.home(), StaticConfig.TOKEN_FILENAME);
    }
    get helpTextPath() {
        return path.join(__dirname, "../resources/help.txt");
    }
    get HTML_CLI_HELPERS_DIR() {
        return path.join(__dirname, "../docs/helpers");
    }
    get pathToPackageJson() {
        return path.join(__dirname, "..", "package.json");
    }
    get PATH_TO_BOOTSTRAP() {
        return path.join(__dirname, "bootstrap");
    }
}
StaticConfig.TOKEN_FILENAME = ".abgithub";
exports.StaticConfig = StaticConfig;
$injector.register("staticConfig", StaticConfig);
