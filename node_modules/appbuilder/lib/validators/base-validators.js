"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const ValidationResult = require("../common/validators/validation-result");
class BaseValidator {
    constructor($injector) {
        this.$injector = $injector;
    }
    throwIfInvalid(data) {
        let validationResult = this.validate(data);
        if (!validationResult.isSuccessful) {
            this.$injector.resolve("$errors").fail(validationResult.error);
        }
    }
    validate(data) {
        return ValidationResult.ValidationResult.Successful;
    }
    validateProperty(data, propertyName) {
        return ValidationResult.ValidationResult.Successful;
    }
}
exports.BaseValidator = BaseValidator;
class BaseAsyncValidator {
    constructor($injector) {
        this.$injector = $injector;
    }
    throwIfInvalid(data) {
        return __awaiter(this, void 0, void 0, function* () {
            let validationResult = yield this.validate(data);
            if (!validationResult.isSuccessful) {
                this.$injector.resolve("$errors").fail(validationResult.error);
            }
        });
    }
    validate(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return ValidationResult.ValidationResult.Successful;
        });
    }
    validateProperty(data, propertyName) {
        return __awaiter(this, void 0, void 0, function* () {
            return ValidationResult.ValidationResult.Successful;
        });
    }
}
exports.BaseAsyncValidator = BaseAsyncValidator;
class Helpers {
    static validate(validators) {
        let validationResults = _.map(validators, (validator) => validator());
        let firstFailedValidationResult = Helpers.getFirstFailedValidationResult(validationResults);
        if (firstFailedValidationResult) {
            return firstFailedValidationResult;
        }
        return ValidationResult.ValidationResult.Successful;
    }
    static validateAsync(validators) {
        return __awaiter(this, void 0, void 0, function* () {
            let validationResults = yield Promise.all(_.map(validators, (validator) => validator()));
            let firstFailedValidationResult = Helpers.getFirstFailedValidationResult(validationResults);
            if (firstFailedValidationResult) {
                return firstFailedValidationResult;
            }
            return ValidationResult.ValidationResult.Successful;
        });
    }
    static getFirstFailedValidationResult(validationResults) {
        return _.find(validationResults, (validationResult) => !validationResult.isSuccessful);
    }
}
exports.Helpers = Helpers;
