"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const assert = require("assert");
const helpers = require("../common/helpers");
class KendoUIBaseCommand {
    constructor($errors, $project, $kendoUIService, $loginManager, $options) {
        this.$errors = $errors;
        this.$project = $project;
        this.$kendoUIService = $kendoUIService;
        this.$loginManager = $loginManager;
        this.$options = $options;
        this.allowedParameters = [];
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args && args.length > 0) {
                this.$errors.fail("This command does not accept parameters.");
            }
            if (this.$options.core && this.$options.professional) {
                this.$errors.fail("You cannot set the --core and the --professional flags simultaneously.");
            }
            return true;
        });
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            assert.fail("", "", "You should never get here. Please contact Telerik support and send the output of your command, executed with `--log trace`.", null);
            return Promise.resolve();
        });
    }
    getKendoPackages(configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$loginManager.ensureLoggedIn();
            yield this.$project.ensureCordovaProject();
            if (!this.$project.capabilities.updateKendo) {
                this.$errors.fail(`This operation is not applicable to ${this.$project.projectData.Framework} projects.`);
            }
            let kendoFilterOptions = {
                core: this.$options.core,
                professional: this.$options.professional,
                verified: this.$options.verified,
                latest: this.$options.latest,
                withReleaseNotesOnly: configuration && configuration.withReleaseNotesOnly
            };
            let packages = yield this.$kendoUIService.getKendoPackages(kendoFilterOptions);
            if (packages.length === 0) {
                let message = "Cannot find Kendo UI packages that match the provided parameters.";
                if (this.$options.professional) {
                    message += " Verify that your subscription plan provides 'Kendo UI Professional'.";
                }
                this.$errors.failWithoutHelp(message);
            }
            return packages;
        });
    }
    getKendoPackagesAsTable(packages) {
        let packageData = [];
        _.each(packages, (update, idx) => packageData.push([
            (idx + 1).toString().cyan.toString(),
            update.Name,
            update.Version,
            (update.VersionTags || []).join(", ").cyan.toString()
        ]));
        let table = helpers.createTable(["#", "KendoUI", "Version", "Tags"], packageData);
        return table.toString();
    }
}
exports.KendoUIBaseCommand = KendoUIBaseCommand;
