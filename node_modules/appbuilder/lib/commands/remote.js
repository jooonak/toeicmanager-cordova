"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const os_1 = require("os");
class PortCommandParameter {
    constructor($errors, $hostInfo) {
        this.$errors = $errors;
        this.$hostInfo = $hostInfo;
        this.mandatory = true;
    }
    validate(validationValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.$hostInfo.isDarwin) {
                this.$errors.failWithoutHelp("You can use remote command only on MacOS.");
            }
            if (!validationValue) {
                this.$errors.fail("You must specify a port number.");
            }
            let parsedPortNumber = parseInt(validationValue);
            if (isNaN(parsedPortNumber) || parsedPortNumber <= 0 || parsedPortNumber >= 65536) {
                this.$errors.failWithoutHelp("You must specify a valid port number. Valid values are between 1 and 65535.");
            }
            if (parsedPortNumber < 1024) {
                this.$errors.failWithoutHelp("Port %s is a system port and cannot be used." + os_1.EOL +
                    "To use a non-system port, re-run the command with a port number greater than 1023.", parsedPortNumber.toString());
            }
            return true;
        });
    }
}
exports.PortCommandParameter = PortCommandParameter;
class RemoteCommand {
    constructor($remoteService, $errors, $hostInfo) {
        this.$remoteService = $remoteService;
        this.$errors = $errors;
        this.$hostInfo = $hostInfo;
        this.allowedParameters = [new PortCommandParameter(this.$errors, this.$hostInfo)];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let portNumber = parseInt(args[0]);
            yield this.$remoteService.startApiServer(portNumber);
        });
    }
}
exports.RemoteCommand = RemoteCommand;
$injector.registerCommand("remote", RemoteCommand);
