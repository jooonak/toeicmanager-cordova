"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class AppManagerUploadAndroidCommand {
    constructor($appManagerService, $devicePlatformsConstants) {
        this.$appManagerService = $appManagerService;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$appManagerService.upload(this.$devicePlatformsConstants.Android.toLowerCase());
        });
    }
}
$injector.registerCommand("appmanager|upload|android", AppManagerUploadAndroidCommand);
class AppManagerUploadIosCommand {
    constructor($appManagerService, $devicePlatformsConstants) {
        this.$appManagerService = $appManagerService;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$appManagerService.upload(this.$devicePlatformsConstants.iOS.toLowerCase());
        });
    }
}
$injector.registerCommand("appmanager|upload|ios", AppManagerUploadIosCommand);
class AppManagerUploadWP8Command {
    constructor($appManagerService, $devicePlatformsConstants, $config) {
        this.$appManagerService = $appManagerService;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$config = $config;
        this.allowedParameters = [];
        this.isDisabled = this.$config.ON_PREM;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$appManagerService.upload(this.$devicePlatformsConstants.WP8.toLowerCase());
        });
    }
}
$injector.registerCommand("appmanager|upload|wp8", AppManagerUploadWP8Command);
class AppManagerGetGroupsCommand {
    constructor($appManagerService) {
        this.$appManagerService = $appManagerService;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$appManagerService.getGroups();
        });
    }
}
$injector.registerCommand("appmanager|groups", AppManagerGetGroupsCommand);
