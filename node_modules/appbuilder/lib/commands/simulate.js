"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class SimulateCommand {
    constructor($project, $simulatorService, $simulatorPlatformServices) {
        this.$project = $project;
        this.$simulatorService = $simulatorService;
        this.$simulatorPlatformServices = $simulatorPlatformServices;
        this.allowedParameters = [];
        this.projectData = this.$project.projectData;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$simulatorPlatformServices.canRunApplication && (yield this.$simulatorPlatformServices.canRunApplication())) {
                yield this.$simulatorService.launchSimulator();
            }
        });
    }
}
exports.SimulateCommand = SimulateCommand;
$injector.registerCommand("simulate", SimulateCommand);
