"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const helpers = require("../common/helpers");
const ensure_project_command_1 = require("./ensure-project-command");
class DeployHelper {
    constructor($devicesService, $logger, $fs, $project, $buildService, $liveSyncService, $errors, $mobileHelper, $options, $hostInfo) {
        this.$devicesService = $devicesService;
        this.$logger = $logger;
        this.$fs = $fs;
        this.$project = $project;
        this.$buildService = $buildService;
        this.$liveSyncService = $liveSyncService;
        this.$errors = $errors;
        this.$mobileHelper = $mobileHelper;
        this.$options = $options;
        this.$hostInfo = $hostInfo;
    }
    deploy(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureProject();
            if (!this.$project.capabilities.deploy) {
                this.$errors.failWithoutHelp("You will be able to deploy %s based applications in a future release of the Telerik AppBuilder CLI.", this.$project.projectData.Framework);
            }
            if (platform && !this.$mobileHelper.isPlatformSupported(platform)) {
                this.$errors.failWithoutHelp("On your current OS, you cannot deploy apps on connected %s devices.", this.$mobileHelper.normalizePlatformName(platform));
            }
            if (this.$options.companion) {
                return this.$liveSyncService.livesync(platform);
            }
            if (platform && !this.$mobileHelper.isiOSPlatform(platform) && this.$options.emulator) {
                this.$errors.failWithoutHelp(`--emulator option is not supported for ${platform} platform. It is only supported for iOS platform.`);
            }
            yield this.deployCore(platform);
        });
    }
    deployCore(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$devicesService.initialize({ platform: platform, deviceId: this.$options.device, emulator: this.$options.emulator });
            platform = platform || this.$devicesService.platform;
            this.$options.justlaunch = true;
            let appInfo;
            let action = (device) => __awaiter(this, void 0, void 0, function* () {
                let deploymentTarget = this.$project.projectData.iOSDeploymentTarget;
                if (deploymentTarget && this.$mobileHelper.isiOSPlatform(device.deviceInfo.platform)) {
                    let deviceVersion = _.take(device.deviceInfo.version.split("."), 2).join(".");
                    if (helpers.versionCompare(deviceVersion, deploymentTarget) < 0) {
                        this.$logger.error(`You cannot deploy on device ${device.deviceInfo.identifier} with OS version ${deviceVersion} when iOSDeploymentTarget is set to ${deploymentTarget}.`);
                        return;
                    }
                }
                if (!appInfo) {
                    appInfo = yield this.getAppInfoFromBuildResult(device);
                }
                this.$logger.debug("Ready to deploy %s", appInfo.packageName);
                this.$logger.debug("File is %d bytes", this.$fs.getFileSize(appInfo.packageName).toString());
                yield device.applicationManager.reinstallApplication(appInfo.appIdentifier, appInfo.packageName);
                this.$logger.info(`Successfully deployed on device with identifier '${device.deviceInfo.identifier}'.`);
                if (device.applicationManager.canStartApplication()) {
                    yield device.applicationManager.startApplication(appInfo.appIdentifier);
                }
            });
            let canExecute = (device) => {
                if (this.$options.device) {
                    return device.deviceInfo.identifier === this.$devicesService.getDeviceByDeviceOption().deviceInfo.identifier;
                }
                if (this.$mobileHelper.isiOSPlatform(platform) && this.$hostInfo.isDarwin) {
                    let isiOS = this.$options.emulator ? this.$devicesService.isiOSSimulator(device) : this.$devicesService.isiOSDevice(device);
                    return this.$devicesService.isOnlyiOSSimultorRunning() || isiOS;
                }
                return true;
            };
            yield this.$devicesService.execute(action, canExecute);
        });
    }
    getAppInfoFromBuildResult(device) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$devicesService.isiOSSimulator(device)) {
                return { packageName: yield this.$buildService.buildForiOSSimulator(this.$options.saveTo, device), appIdentifier: this.$project.projectData.AppIdentifier };
            }
            else {
                return yield this.$buildService.buildForDeploy(this.$devicesService.platform, this.$options.saveTo, false, device);
            }
        });
    }
}
exports.DeployHelper = DeployHelper;
$injector.register("deployHelper", DeployHelper);
class DeployCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($deployHelper, $project, $errors) {
        super($project, $errors);
        this.$deployHelper = $deployHelper;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$deployHelper.deploy();
        });
    }
}
exports.DeployCommand = DeployCommand;
$injector.registerCommand("deploy|*devices", DeployCommand);
class DeployAndroidCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($deployHelper, $devicePlatformsConstants, $project, $errors) {
        super($project, $errors);
        this.$deployHelper = $deployHelper;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$deployHelper.deploy(this.$devicePlatformsConstants.Android);
        });
    }
}
exports.DeployAndroidCommand = DeployAndroidCommand;
$injector.registerCommand("deploy|android", DeployAndroidCommand);
class DeployIosCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($deployHelper, $devicePlatformsConstants, $project, $errors) {
        super($project, $errors);
        this.$deployHelper = $deployHelper;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$deployHelper.deploy(this.$devicePlatformsConstants.iOS);
        });
    }
}
exports.DeployIosCommand = DeployIosCommand;
$injector.registerCommand("deploy|ios", DeployIosCommand);
class DeployWP8Command extends ensure_project_command_1.EnsureProjectCommand {
    constructor($deployHelper, $devicePlatformsConstants, $config, $project, $errors) {
        super($project, $errors);
        this.$deployHelper = $deployHelper;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$config = $config;
        this.allowedParameters = [];
        this.isDisabled = this.$config.ON_PREM;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$deployHelper.deploy(this.$devicePlatformsConstants.WP8);
        });
    }
}
exports.DeployWP8Command = DeployWP8Command;
$injector.registerCommand("deploy|wp8", DeployWP8Command);
