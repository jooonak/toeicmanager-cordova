"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class LoginCommand {
    constructor($loginManager) {
        this.$loginManager = $loginManager;
        this.allowedParameters = [];
        this.disableAnalytics = true;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$loginManager.login();
        });
    }
}
exports.LoginCommand = LoginCommand;
$injector.registerCommand("login", LoginCommand);
class LogoutCommand {
    constructor($loginManager) {
        this.$loginManager = $loginManager;
        this.allowedParameters = [];
        this.disableAnalytics = true;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$loginManager.logout();
        });
    }
}
exports.LogoutCommand = LogoutCommand;
$injector.registerCommand("logout", LogoutCommand);
