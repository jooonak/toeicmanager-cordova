"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const helpers = require("../../common/helpers");
const semver = require("semver");
class ListWebViewsCommand {
    constructor($webViewService, $logger, $project) {
        this.$webViewService = $webViewService;
        this.$logger = $logger;
        this.$project = $project;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureCordovaProject();
            let currentProjectVersion = this.$project.projectData.FrameworkVersion;
            let supportedWebViews = this.$webViewService.supportedWebViews;
            let keys = _.keys(supportedWebViews);
            let data = yield Promise.all(_.map(keys, (platform, index) => __awaiter(this, void 0, void 0, function* () {
                let webViews = _.filter(supportedWebViews[platform], webView => semver.gte(currentProjectVersion, webView.minSupportedVersion));
                return [(++index).toString(), platform, yield this.$webViewService.getCurrentWebViewName(platform), _.map(webViews, webView => webView.name).join(",\n")];
            })));
            let headers = ["#", "Platform", "Current Web View", "Supported Web Views"];
            let table = helpers.createTable(headers, data);
            this.$logger.out(table.toString());
        });
    }
}
exports.ListWebViewsCommand = ListWebViewsCommand;
$injector.registerCommand("webview|*list", ListWebViewsCommand);
