"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const semver = require("semver");
class SetWebViewCommand {
    constructor($webViewService, $errors, $logger, $project) {
        this.$webViewService = $webViewService;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$project = $project;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$webViewService.enableWebView(args[0], args[1], this.$project.projectData.FrameworkVersion);
            this.$logger.out(`Operation completed successfully. Your project now uses the ${args[1]} web view for ${args[0]}.`);
        });
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureCordovaProject();
            if (!args[0] || !args[1]) {
                this.$errors.fail(`You must specify target platform and web view name.`);
            }
            let supportedWebViews = this.$webViewService.supportedWebViews;
            let platform = args[0].toLowerCase();
            let platforms = _.keys(supportedWebViews);
            if (!_.includes(platforms, platform)) {
                this.$errors.failWithoutHelp(`Invalid platform. You can set the web view for the following platforms: ${platforms.join(", ")}`);
            }
            let webViewName = args[1].toLowerCase();
            let webViewNames = this.$webViewService.getWebViewNames(platform);
            if (!_.includes(webViewNames, webViewName)) {
                this.$errors.failWithoutHelp(`Invalid web view. The valid ${platform} web views are: ${webViewNames.join(", ")}`);
            }
            let currentProjectVersion = this.$project.projectData.FrameworkVersion;
            let webView = this.$webViewService.getWebView(platform, webViewName, this.$project.projectData.FrameworkVersion);
            if (semver.lt(currentProjectVersion, webView.minSupportedVersion)) {
                this.$errors.failWithoutHelp(`You cannot set the ${webViewName} web view for projects that target Apache Cordova ${currentProjectVersion}. Your project must target Apache Cordova ${webView.minSupportedVersion} or later. Run \`$ appbuilder mobileframework\` set to change your target framework version.`);
            }
            return true;
        });
    }
}
exports.SetWebViewCommand = SetWebViewCommand;
$injector.registerCommand("webview|set", SetWebViewCommand);
