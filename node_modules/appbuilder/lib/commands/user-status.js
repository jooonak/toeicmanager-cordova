"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const util = require("util");
class UserStatusCommand {
    constructor($userDataStore, $logger, $config) {
        this.$userDataStore = $userDataStore;
        this.$logger = $logger;
        this.$config = $config;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let user = yield this.$userDataStore.getUser();
            let fields = {
                "Name": user.name,
                "E-mail": user.email
            };
            if (user.tenant) {
                fields["License"] = util.format("%s (%s)", user.tenant.editionType, user.tenant.license);
                let expires = new Date(Date.parse(user.tenant.expSoft));
                fields["License expires"] = expires.toLocaleDateString();
                fields["Licensed by"] = user.tenant.name;
            }
            let fieldNames = Object.keys(fields);
            let maxPrefixLength = _.maxBy(fieldNames, (name) => name.length).length;
            fieldNames.forEach((field) => {
                let padding = _.range(maxPrefixLength - field.length).map((x) => " ").join("");
                this.$logger.out("%s%s: %s", padding, field, fields[field]);
            });
            this.$logger.out("\nView your account at %s://%s/appbuilder/account/subscription", this.$config.AB_SERVER_PROTO, this.$config.AB_SERVER);
        });
    }
}
exports.UserStatusCommand = UserStatusCommand;
$injector.registerCommand("user", UserStatusCommand);
