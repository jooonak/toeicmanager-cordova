"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const ensure_project_command_1 = require("./ensure-project-command");
class LiveSyncCommandBase extends ensure_project_command_1.EnsureProjectCommand {
    constructor($liveSyncService, $options, $project, $errors) {
        super($project, $errors);
        this.$liveSyncService = $liveSyncService;
        this.$options = $options;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$options.justlaunch = !this.$options.watch;
        });
    }
}
class LiveSyncDevicesCommand extends LiveSyncCommandBase {
    constructor($liveSyncService, $options, $project, $errors) {
        super($liveSyncService, $options, $project, $errors);
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("execute").call(this, args);
            yield this.$liveSyncService.livesync();
        });
    }
}
$injector.registerCommand(["livesync|*devices", "live-sync|*devices"], LiveSyncDevicesCommand);
class LiveSyncAndroidCommand extends LiveSyncCommandBase {
    constructor($devicePlatformsConstants, $liveSyncService, $options, $project, $errors) {
        super($liveSyncService, $options, $project, $errors);
        this.$devicePlatformsConstants = $devicePlatformsConstants;
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("execute").call(this, args);
            yield this.$liveSyncService.livesync(this.$devicePlatformsConstants.Android);
        });
    }
}
$injector.registerCommand(["livesync|android", "live-sync|android"], LiveSyncAndroidCommand);
class LiveSyncIosCommand extends LiveSyncCommandBase {
    constructor($devicePlatformsConstants, $liveSyncService, $options, $project, $errors) {
        super($liveSyncService, $options, $project, $errors);
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("execute").call(this, args);
            yield this.$liveSyncService.livesync(this.$devicePlatformsConstants.iOS);
        });
    }
}
$injector.registerCommand(["livesync|ios", "live-sync|ios"], LiveSyncIosCommand);
class LiveSyncWP8Command extends LiveSyncCommandBase {
    constructor($devicePlatformsConstants, $config, $liveSyncService, $options, $project, $errors) {
        super($liveSyncService, $options, $project, $errors);
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$config = $config;
        this.isDisabled = this.$config.ON_PREM;
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("execute").call(this, args);
            yield this.$liveSyncService.livesync(this.$devicePlatformsConstants.WP8);
        });
    }
}
$injector.registerCommand(["livesync|wp8", "live-sync|wp8"], LiveSyncWP8Command);
