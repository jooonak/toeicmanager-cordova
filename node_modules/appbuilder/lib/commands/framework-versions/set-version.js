"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const constants_1 = require("../../common/constants");
class SetFrameworkVersionCommand {
    constructor($injector, $project) {
        this.$injector = $injector;
        this.$project = $project;
        this.allowedParameters = [this.$injector.resolve(MobileFrameworkCommandParameter)];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.updateProjectPropertyAndSave("set", "FrameworkVersion", args);
        });
    }
}
exports.SetFrameworkVersionCommand = SetFrameworkVersionCommand;
$injector.registerCommand(["mobileframework|set", "prop|set|frameworkversion"], SetFrameworkVersionCommand);
class MobileFrameworkCommandParameter {
    constructor($cordovaMigrationService, $project, $errors, $nativeScriptMigrationService) {
        this.$cordovaMigrationService = $cordovaMigrationService;
        this.$project = $project;
        this.$errors = $errors;
        this.$nativeScriptMigrationService = $nativeScriptMigrationService;
        this.mandatory = true;
    }
    validate(value, errorMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureProject();
            if (!this.$project.capabilities.canChangeFrameworkVersion) {
                this.$errors.failWithoutHelp(`You cannot change FrameworkVersion of '${this.$project.projectData.Framework}' project.`);
            }
            if (value.match(MobileFrameworkCommandParameter.VERSION_REGEX)) {
                let supportedVersions;
                let migrationService = this.$project.projectData.Framework === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova ? this.$cordovaMigrationService : this.$nativeScriptMigrationService;
                supportedVersions = migrationService.getSupportedVersions();
                if (_.includes(supportedVersions, value)) {
                    return true;
                }
                this.$errors.failWithoutHelp(`The value ${value} is not a supported version. Supported versions are: ${supportedVersions.join(", ")}`);
            }
            this.$errors.failWithoutHelp("Version is not in correct format. Correct format is <Major>.<Minor>.<Patch>, for example '3.5.0'.");
        });
    }
}
MobileFrameworkCommandParameter.VERSION_REGEX = new RegExp("^(\\d+\\.){2}\\d+$");
exports.MobileFrameworkCommandParameter = MobileFrameworkCommandParameter;
