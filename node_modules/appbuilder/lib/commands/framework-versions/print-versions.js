"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const constants_1 = require("../../common/constants");
class PrintFrameworkVersionsCommand {
    constructor($cordovaMigrationService, $nativeScriptMigrationService, $project, $logger, $errors) {
        this.$cordovaMigrationService = $cordovaMigrationService;
        this.$nativeScriptMigrationService = $nativeScriptMigrationService;
        this.$project = $project;
        this.$logger = $logger;
        this.$errors = $errors;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let migrationService = this.$project.projectData.Framework === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova ? this.$cordovaMigrationService : this.$nativeScriptMigrationService;
            let supportedVersions = migrationService.getSupportedFrameworks();
            let projectFrameworkVersion = migrationService.getDisplayNameForVersion(this.$project.projectData.FrameworkVersion);
            if (projectFrameworkVersion) {
                this.$logger.info(`Your project is using version ${projectFrameworkVersion}`);
            }
            this.$logger.info("Supported versions are: ");
            _.each(supportedVersions, (sv) => {
                this.$logger.info(sv.displayName);
            });
        });
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args && args.length > 0) {
                this.$errors.fail("This command does not accept parameters.");
            }
            yield this.$project.ensureProject();
            if (!this.$project.capabilities.canChangeFrameworkVersion) {
                this.$errors.failWithoutHelp(`This command is not applicable to ${this.$project.projectData.Framework} projects.`);
            }
            return true;
        });
    }
}
exports.PrintFrameworkVersionsCommand = PrintFrameworkVersionsCommand;
$injector.registerCommand(["mobileframework|*print", "prop|print|frameworkversion"], PrintFrameworkVersionsCommand);
