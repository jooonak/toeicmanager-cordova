"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const helpers = require("../common/helpers");
class Resource {
    constructor($imageService) {
        this.$imageService = $imageService;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$imageService.printDefinitions();
        });
    }
}
$injector.registerCommand("resource|*list", Resource);
class ResourceCreate {
    constructor($errors, $imageService, $options) {
        this.$errors = $errors;
        this.$imageService = $imageService;
        this.$options = $options;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$options.icon && this.$options.splash) {
                yield this.$imageService.generateImages(this.$options.icon, 0, this.$options.force);
                yield this.$imageService.generateImages(this.$options.splash, 1, this.$options.force);
            }
            else if (this.$options.icon) {
                yield this.$imageService.generateImages(this.$options.icon, 0, this.$options.force);
            }
            else if (this.$options.splash) {
                yield this.$imageService.generateImages(this.$options.splash, 1, this.$options.force);
            }
            else if (!helpers.isInteractive()) {
                this.$errors.failWithoutHelp('Console is not interactive');
            }
            else {
                yield this.$imageService.promptForImageInformation(this.$options.force);
            }
        });
    }
}
$injector.registerCommand(["resource|create"], ResourceCreate);
