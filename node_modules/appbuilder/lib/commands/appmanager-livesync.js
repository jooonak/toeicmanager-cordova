"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const constants_1 = require("../common/constants");
class AppManagerLiveSyncCommand {
    constructor($prompter, $project, $mobileHelper, $appManagerService, $errors, $config) {
        this.$prompter = $prompter;
        this.$project = $project;
        this.$mobileHelper = $mobileHelper;
        this.$appManagerService = $appManagerService;
        this.$errors = $errors;
        this.$config = $config;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let windowsPhonePlatformName = this.$mobileHelper.normalizePlatformName("WP8");
            let isNativeScript = this.$project.projectData.Framework === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript;
            if (!args || args.length === 0) {
                let availablePlatforms = this.$config.ON_PREM || isNativeScript ? _.without(this.$mobileHelper.platformNames, windowsPhonePlatformName) : this.$mobileHelper.platformNames;
                let selectionOptions = availablePlatforms.concat(AppManagerLiveSyncCommand.ALL_PLATFORMS_OPTION);
                let selectedPlatform = yield this.$prompter.promptForChoice("This command will publish a new update version to AppManager. Please select platform?", selectionOptions);
                if (selectedPlatform === AppManagerLiveSyncCommand.ALL_PLATFORMS_OPTION) {
                    yield this.$appManagerService.publishLivePatch(availablePlatforms);
                }
                else {
                    yield this.$appManagerService.publishLivePatch([selectedPlatform]);
                }
            }
            else {
                let platforms = _.keys(_.groupBy(args, arg => this.$mobileHelper.normalizePlatformName(arg)));
                if ((this.$config.ON_PREM || isNativeScript) && _.includes(platforms, windowsPhonePlatformName)) {
                    this.$errors.failWithoutHelp(`You cannot upload updates for Windows Phone.`);
                }
                yield this.$appManagerService.publishLivePatch(platforms);
            }
        });
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            _.each(args, platform => this.$mobileHelper.validatePlatformName(platform));
            return true;
        });
    }
}
AppManagerLiveSyncCommand.ALL_PLATFORMS_OPTION = "All platforms";
exports.AppManagerLiveSyncCommand = AppManagerLiveSyncCommand;
$injector.registerCommand("appmanager|livesync", AppManagerLiveSyncCommand);
