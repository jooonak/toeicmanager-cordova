"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class UpgradeScreenBuilder {
    constructor($logger, $options, $project, $screenBuilderService) {
        this.$logger = $logger;
        this.$options = $options;
        this.$project = $project;
        this.$screenBuilderService = $screenBuilderService;
        this.allowedParameters = [];
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureProject();
            let projectDir = this.$project.getProjectDir();
            this.$screenBuilderService.ensureScreenBuilderProject(projectDir);
            return true;
        });
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.$screenBuilderService.shouldUpgrade(this.$options.path))) {
                this.$logger.info("Your project is already up-to-date with the latest Screen Builder.");
                return;
            }
            yield this.$screenBuilderService.upgrade(this.$options.path);
            this.$logger.info("Project successfully upgraded.");
        });
    }
}
$injector.registerCommand("upgrade-screenbuilder", UpgradeScreenBuilder);
