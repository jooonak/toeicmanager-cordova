"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
class PrePackageCommand {
    constructor($cordovaMigrationService, $jsonSchemaLoader, $logger, $resourceDownloader, $serviceProxy, $templatesService, $nativeScriptMigrationService, $fs) {
        this.$cordovaMigrationService = $cordovaMigrationService;
        this.$jsonSchemaLoader = $jsonSchemaLoader;
        this.$logger = $logger;
        this.$resourceDownloader = $resourceDownloader;
        this.$serviceProxy = $serviceProxy;
        this.$templatesService = $templatesService;
        this.$nativeScriptMigrationService = $nativeScriptMigrationService;
        this.$fs = $fs;
        this.disableAnalytics = true;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let jenkinsParameterSha1 = process.env.sha1;
            let jenkinsParameterBranchToBuild = process.env.BranchToBuild;
            let buildSource = jenkinsParameterBranchToBuild || jenkinsParameterSha1;
            if (buildSource) {
                let configJsonDirectory = path.join(__dirname, "..", "..", "..", "config", "config-base.json");
                let configFileContent = this.$fs.readJson(configJsonDirectory);
                configFileContent.BUILD_SOURCE = buildSource;
                this.$fs.writeJson(configJsonDirectory, configFileContent);
                this.$logger.trace(`Build source ${buildSource} added to config.json.`);
            }
            this.$serviceProxy.setShouldAuthenticate(false);
            this.$logger.info("Downloading project templates.");
            yield this.$templatesService.downloadProjectTemplates();
            this.$logger.info("Downloading item templates.");
            yield this.$templatesService.downloadItemTemplates();
            this.$logger.info("Downloading project schemas.");
            yield this.$jsonSchemaLoader.downloadSchemas();
            this.$logger.info("Downloading Cordova migration data.");
            yield this.$cordovaMigrationService.downloadMigrationData();
            this.$logger.info("Downloading cordova.js files.");
            yield this.$resourceDownloader.downloadCordovaJsFiles();
            this.$logger.info("Downloading image definitions.");
            yield this.$resourceDownloader.downloadImageDefinitions();
            this.$logger.info("Downloading NativeScript migration data.");
            yield this.$nativeScriptMigrationService.downloadMigrationData();
            this.$logger.info("Unpacking app resources.");
            yield this.$templatesService.unpackAppResources();
            let testCoverageResultsDir = path.join(__dirname, "../../../coverage");
            this.$logger.trace(`Removing test coverage results directory: '${testCoverageResultsDir}'.`);
            this.$fs.deleteDirectory(testCoverageResultsDir);
            this.$serviceProxy.setShouldAuthenticate(true);
        });
    }
}
exports.PrePackageCommand = PrePackageCommand;
$injector.registerCommand("dev-prepackage", PrePackageCommand);
