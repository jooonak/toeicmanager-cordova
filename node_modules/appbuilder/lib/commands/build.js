"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const ensure_project_command_1 = require("./ensure-project-command");
class BuildAndroidCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($project, $errors, $buildService, $devicePlatformsConstants) {
        super($project, $errors);
        this.$project = $project;
        this.$errors = $errors;
        this.$buildService = $buildService;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$buildService.executeBuild(this.$devicePlatformsConstants.Android);
        });
    }
}
exports.BuildAndroidCommand = BuildAndroidCommand;
$injector.registerCommand("build|android", BuildAndroidCommand);
class BuildIosCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($project, $errors, $buildService, $devicePlatformsConstants, $options) {
        super($project, $errors);
        this.$project = $project;
        this.$errors = $errors;
        this.$buildService = $buildService;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$options = $options;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$buildService.executeBuild(this.$devicePlatformsConstants.iOS, { buildForiOSSimulator: this.$options.emulator });
        });
    }
}
exports.BuildIosCommand = BuildIosCommand;
$injector.registerCommand("build|ios", BuildIosCommand);
class BuildWP8Command extends ensure_project_command_1.EnsureProjectCommand {
    constructor($project, $errors, $buildService, $devicePlatformsConstants, $config) {
        super($project, $errors);
        this.$project = $project;
        this.$errors = $errors;
        this.$buildService = $buildService;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$config = $config;
        this.isDisabled = this.$config.ON_PREM;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$buildService.executeBuild(this.$devicePlatformsConstants.WP8);
        });
    }
}
exports.BuildWP8Command = BuildWP8Command;
$injector.registerCommand("build|wp8", BuildWP8Command);
