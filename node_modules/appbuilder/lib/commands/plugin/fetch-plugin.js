"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class FetchPluginCommand {
    constructor($pluginsService, $logger, $stringParameter) {
        this.$pluginsService = $pluginsService;
        this.$logger = $logger;
        this.$stringParameter = $stringParameter;
        this.allowedParameters = [this.$stringParameter];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let pluginName = yield this.$pluginsService.fetch(args[0]);
            this.$logger.printMarkdown(`Successfully fetched plugin \`${pluginName}\``);
        });
    }
}
exports.FetchPluginCommand = FetchPluginCommand;
$injector.registerCommand("plugin|fetch", FetchPluginCommand);
