"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class FindPluginsCommand {
    constructor($errors, $options, $printPluginsService, $pluginsService) {
        this.$errors = $errors;
        this.$options = $options;
        this.$printPluginsService = $printPluginsService;
        this.$pluginsService = $pluginsService;
        this.allowedParameters = [];
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!args.length) {
                this.$errors.fail("You have to provide all required parameters.");
            }
            return true;
        });
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let pluginsSource = yield this.$pluginsService.findPlugins(args);
            yield this.$printPluginsService.printPlugins(pluginsSource, { showAllPlugins: this.$options.all });
        });
    }
}
exports.FindPluginsCommand = FindPluginsCommand;
$injector.registerCommand("plugin|find", FindPluginsCommand);
