"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const ensure_project_command_1 = require("./ensure-project-command");
const constants_1 = require("../common/constants");
class EmulateAndroidCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($buildService, $androidEmulatorServices, $devicePlatformsConstants, $options, $projectConstants, $project, $errors) {
        super($project, $errors);
        this.$buildService = $buildService;
        this.$androidEmulatorServices = $androidEmulatorServices;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$options = $options;
        this.$projectConstants = $projectConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$project.ensureAllPlatformAssets();
            this.$androidEmulatorServices.checkAvailability();
            let tempDir = this.$project.getTempDir("emulatorfiles");
            let packageFilePath = path.join(tempDir, "package.apk");
            yield this.$buildService.build({
                platform: this.$devicePlatformsConstants.Android,
                showQrCodes: false,
                downloadFiles: true,
                downloadedFilePath: packageFilePath
            });
            this.$options.justlaunch = true;
            let emulateOptions = yield { appId: this.$project.getAppIdentifierForPlatform(this.$projectConstants.ANDROID_PLATFORM_NAME) };
            yield this.$androidEmulatorServices.runApplicationOnEmulator(packageFilePath, emulateOptions);
        });
    }
    canExecute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("canExecute").call(this, args);
            yield this.$androidEmulatorServices.checkDependencies();
            return true;
        });
    }
}
exports.EmulateAndroidCommand = EmulateAndroidCommand;
$injector.registerCommand("emulate|android", EmulateAndroidCommand);
class EmulateIosCommand extends ensure_project_command_1.EnsureProjectCommand {
    constructor($project, $errors, $buildService, $iOSEmulatorServices, $options) {
        super($project, $errors);
        this.$project = $project;
        this.$errors = $errors;
        this.$buildService = $buildService;
        this.$iOSEmulatorServices = $iOSEmulatorServices;
        this.$options = $options;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$project.ensureAllPlatformAssets();
            yield this.$iOSEmulatorServices.checkDependencies();
            this.$iOSEmulatorServices.checkAvailability();
            let app = "";
            if (!this.$options.availableDevices) {
                let tempDir = this.$project.getTempDir("emulatorfiles");
                app = yield this.$buildService.buildForiOSSimulator(path.join(tempDir, "package.ipa"));
            }
            yield this.$iOSEmulatorServices.runApplicationOnEmulator(app, { appId: this.$project.projectData.AppIdentifier });
        });
    }
}
exports.EmulateIosCommand = EmulateIosCommand;
$injector.registerCommand("emulate|ios", EmulateIosCommand);
class EmulateWp8Command extends ensure_project_command_1.EnsureProjectCommand {
    constructor($buildService, $wp8EmulatorServices, $devicePlatformsConstants, $config, $project, $errors) {
        super($project, $errors);
        this.$buildService = $buildService;
        this.$wp8EmulatorServices = $wp8EmulatorServices;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$config = $config;
        this.allowedParameters = [];
        this.isDisabled = this.$config.ON_PREM;
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$project.ensureAllPlatformAssets();
            yield this.$wp8EmulatorServices.checkDependencies();
            this.$wp8EmulatorServices.checkAvailability();
            let tempDir = this.$project.getTempDir("emulatorfiles");
            let packageFilePath = path.join(tempDir, "package.xap");
            yield this.$buildService.build({
                platform: this.$devicePlatformsConstants.WP8,
                projectConfiguration: constants_1.Configurations.Debug,
                buildConfiguration: constants_1.Configurations.Debug,
                showQrCodes: false,
                downloadFiles: true,
                downloadedFilePath: packageFilePath
            });
            yield this.$wp8EmulatorServices.runApplicationOnEmulator(packageFilePath);
        });
    }
}
exports.EmulateWp8Command = EmulateWp8Command;
$injector.registerCommand("emulate|wp8", EmulateWp8Command);
