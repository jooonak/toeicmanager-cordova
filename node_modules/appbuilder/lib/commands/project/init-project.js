"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class InitProjectCommand {
    constructor(frameworkIdentifier, $project, $logger) {
        this.frameworkIdentifier = frameworkIdentifier;
        this.$project = $project;
        this.$logger = $logger;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initializeProjectFromExistingFiles(this.frameworkIdentifier);
        });
    }
    initializeProjectFromExistingFiles(frameworkIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.initializeProjectFromExistingFiles(frameworkIdentifier);
            this.$logger.out("Successfully initialized %s project.", frameworkIdentifier);
        });
    }
}
exports.InitProjectCommand = InitProjectCommand;
