"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const constants_1 = require("../../common/constants");
const ProjectCommandBaseLib = require("./project-command-base");
class CreateCommand extends ProjectCommandBaseLib.ProjectCommandBase {
    constructor($config, $fs, $logger, $nameCommandParameter, $options, $screenBuilderService, $simulatorService, $simulatorPlatformServices, $errors, $project) {
        super($errors, $project);
        this.$config = $config;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$nameCommandParameter = $nameCommandParameter;
        this.$options = $options;
        this.$screenBuilderService = $screenBuilderService;
        this.$simulatorService = $simulatorService;
        this.$simulatorPlatformServices = $simulatorPlatformServices;
        this.allowedParameters = [this.$nameCommandParameter];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$screenBuilderService.printDeprecationWarning();
            this.validateProjectData();
            let projectName = args[0];
            let newProjectDir = this.$project.getNewProjectDir();
            let projectPath = path.resolve(this.$options.path ? newProjectDir : path.join(newProjectDir, projectName));
            yield this.$project.createNewProject(projectName, constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova, this.$config.DEFAULT_CORDOVA_PROJECT_TEMPLATE);
            _.each(this.$screenBuilderService.screenBuilderSpecificFiles, fileName => this.$fs.deleteFile(path.join(projectPath, fileName)));
            let screenBuilderOptions = this.$screenBuilderService.composeScreenBuilderOptions(this.$options.answers, {
                projectPath: projectPath,
                answers: {
                    name: projectName
                }
            });
            try {
                yield this.$screenBuilderService.prepareAndGeneratePrompt(projectPath, this.$screenBuilderService.generatorFullName, screenBuilderOptions);
            }
            catch (err) {
                this.$logger.trace(err);
                this.$fs.deleteDirectory(projectPath);
                throw err;
            }
            if (this.$options.simulator && this.$simulatorPlatformServices.canRunApplication && (yield this.$simulatorPlatformServices.canRunApplication())) {
                yield this.$simulatorService.launchSimulator();
            }
        });
    }
}
exports.CreateCommand = CreateCommand;
$injector.registerCommand("create|*default", CreateCommand);
$injector.registerCommand("create|screenbuilder", CreateCommand);
