"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const ProjectCommandBaseLib = require("./project-command-base");
class CreateProjectCommand extends ProjectCommandBaseLib.ProjectCommandBase {
    constructor($errors, frameworkIdentifier, $nameCommandParameter, $options, $project) {
        super($errors, $project);
        this.frameworkIdentifier = frameworkIdentifier;
        this.$nameCommandParameter = $nameCommandParameter;
        this.$options = $options;
        this.allowedParameters = [this.$nameCommandParameter];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateProjectData();
            return this.$project.createNewProject(args[0], this.frameworkIdentifier, this.$options.template);
        });
    }
}
exports.CreateProjectCommand = CreateProjectCommand;
