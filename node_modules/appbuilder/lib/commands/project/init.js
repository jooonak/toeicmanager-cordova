"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const constants_1 = require("../../common/constants");
class FileDescriptor {
    constructor(path, type) {
        this.path = path;
        this.type = type;
    }
}
class InitProjectCommand {
    constructor($project, $errors, $fs, $logger, $mobileHelper, $projectConstants) {
        this.$project = $project;
        this.$errors = $errors;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$mobileHelper = $mobileHelper;
        this.$projectConstants = $projectConstants;
        this.allowedParameters = [];
        this.projectDir = this.$project.getNewProjectDir();
        this.tnsModulesDir = new FileDescriptor(path.join(this.projectDir, "app", "tns_modules"), "directory");
        this.indexHtml = new FileDescriptor(path.join(this.projectDir, "index.html"), "file");
        this.cordovaFiles = _.map(this.$mobileHelper.platformNames, platform => new FileDescriptor(`cordova.${platform}.js`.toLowerCase(), "file"));
        this.packageJson = new FileDescriptor(path.join(this.projectDir, this.$projectConstants.PACKAGE_JSON_NAME), "file");
        this.generateMandatoryAndForbiddenFiles();
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isProjectType(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova)) {
                this.$logger.info("Attempting to initialize Cordova project.");
                this.$project.initializeProjectFromExistingFiles(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova);
            }
            else if (this.isProjectType(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript)) {
                this.$logger.info("Attempting to initialize NativeScript project.");
                yield this.$project.initializeProjectFromExistingFiles(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript);
            }
            else {
                this.$errors.fail("Cannot determine project type. Specify project type and try again.");
            }
        });
    }
    isProjectType(projectType) {
        let result = true;
        let projectData = this.projectFilesDescriptors[projectType];
        _.each(projectData.mandatoryFiles, (file) => {
            if (!this.$fs.exists(file.path)) {
                this.$logger.trace("Missing %s %s. The project type is not %s.", file.path, file.type, projectType);
                result = false;
                return false;
            }
        });
        if (result) {
            _.each(projectData.forbiddenFiles, (file) => {
                if (this.$fs.exists(file.path)) {
                    this.$logger.trace("Found %s %s. The project type is not %s.", file.path, file.type, projectType);
                    result = false;
                    return false;
                }
            });
        }
        if (projectType === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova && !result) {
            result = this.$project.isIonicProject(this.projectDir);
        }
        return result;
    }
    generateMandatoryAndForbiddenFiles() {
        this.projectFilesDescriptors = Object.create(null);
        this.generateMandatoryAndForbiddenFilesCore(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova, this.cordovaFiles, [this.tnsModulesDir]);
        this.generateMandatoryAndForbiddenFilesCore(constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript, [this.packageJson], this.cordovaFiles.concat([this.indexHtml]));
    }
    generateMandatoryAndForbiddenFilesCore(frameworkIdentifer, mandatoryFiles, forbiddenFiles) {
        this.projectFilesDescriptors[frameworkIdentifer] = {
            "mandatoryFiles": mandatoryFiles,
            "forbiddenFiles": forbiddenFiles
        };
    }
}
exports.InitProjectCommand = InitProjectCommand;
$injector.registerCommand("init|*unknown", InitProjectCommand);
