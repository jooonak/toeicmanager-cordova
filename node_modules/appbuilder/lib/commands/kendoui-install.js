"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const temp = require("temp");
const path = require("path");
const util = require("util");
const kendoui_base_1 = require("./kendoui-base");
class KendoUIInstallCommand extends kendoui_base_1.KendoUIBaseCommand {
    constructor($fs, $httpClient, $logger, $opener, $prompter, $errors, $kendoUIService, $loginManager, $options, $project) {
        super($errors, $project, $kendoUIService, $loginManager, $options);
        this.$fs = $fs;
        this.$httpClient = $httpClient;
        this.$logger = $logger;
        this.$opener = $opener;
        this.$prompter = $prompter;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let packages = yield this.getKendoPackages();
            let selectedPackage = yield this.selectKendoVersion(packages);
            let confirm = this.$options.force || (yield this.$prompter.confirm("This operation will overwrite existing Kendo UI framework files and " +
                "any changes will be lost. ".red.bold +
                "Are you sure you want to continue?", () => true));
            if (!confirm) {
                return;
            }
            yield this.updateKendoFiles(selectedPackage.DownloadUrl, selectedPackage.Version);
        });
    }
    selectKendoVersion(packages) {
        return __awaiter(this, void 0, void 0, function* () {
            let selectedPackage;
            if (packages.length === 1) {
                selectedPackage = _.first(packages);
            }
            else {
                this.$logger.out("You can download and install the following Kendo UI packages.");
                this.$logger.out(this.getKendoPackagesAsTable(packages));
                let schema = {
                    type: "input",
                    name: "packageIdx",
                    message: "Enter the index of the package that you want to install.",
                    validate: (value) => {
                        let num = parseInt(value, 10);
                        return !isNaN(num) && num >= 1 && num <= packages.length ? true : `Valid values are between 1 and ${packages.length}.`;
                    }
                };
                let choice = yield this.$prompter.get([schema]);
                let packageIdx = parseInt(choice.packageIdx, 10) - 1;
                selectedPackage = packages[packageIdx];
            }
            if (selectedPackage.HasReleaseNotes && !this.$options.force) {
                let shouldShowReleaseNotes = yield this.$prompter.confirm("Do you want to review the release notes for this package?", () => true);
                if (shouldShowReleaseNotes) {
                    this.$opener.open(selectedPackage.ReleaseNotesUrl);
                }
            }
            this.$logger.trace("The selected package is:");
            this.$logger.trace(selectedPackage);
            return selectedPackage;
        });
    }
    updateKendoFiles(downloadUri, version) {
        return __awaiter(this, void 0, void 0, function* () {
            temp.track();
            let filepath = temp.path({ suffix: ".zip", prefix: "abkendoupdate-" });
            let file = this.$fs.createWriteStream(filepath);
            let fileEnd = this.$fs.futureFromEvent(file, "finish");
            yield this.$httpClient.httpRequest({ url: downloadUri, pipeTo: file });
            yield fileEnd;
            let outDir = path.join(this.$project.getProjectDir(), "kendo");
            let backupFolder = `${outDir}.ab-backup`;
            try {
                if (this.$fs.exists(outDir)) {
                    this.$fs.rename(outDir, backupFolder);
                }
                yield this.$fs.unzip(filepath, outDir);
            }
            catch (error) {
                if (error.code === "EPERM") {
                    this.$errors.failWithoutHelp(`Permission denied, make sure ${outDir} is not locked.`);
                }
                this.$fs.rename(backupFolder, outDir);
                throw error;
            }
            finally {
                this.$fs.deleteDirectory(backupFolder);
            }
            this.$logger.printMarkdown(util.format("Successfully updated Kendo UI to version `%s`.", version));
        });
    }
}
$injector.registerCommand("update-kendoui", KendoUIInstallCommand);
$injector.registerCommand("kendoui|install", KendoUIInstallCommand);
