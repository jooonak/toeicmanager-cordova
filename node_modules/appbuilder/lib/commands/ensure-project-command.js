"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const assert = require("assert");
class EnsureProjectCommand {
    constructor($project, $errors) {
        this.$project = $project;
        this.$errors = $errors;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            assert.fail("", "", "You should never get here. Please contact Telerik support and send the output of your command, executed with `--log trace`.", null);
        });
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.length) {
                this.$errors.fail("This command doesn't accept parameters.");
                return false;
            }
            yield this.$project.ensureProject();
            return true;
        });
    }
}
exports.EnsureProjectCommand = EnsureProjectCommand;
