"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const prop_print_1 = require("./prop-print");
const constants_1 = require("../../common/constants");
class PrintAndroidVersionCodeCommand extends prop_print_1.PrintProjectCommand {
    constructor($staticConfig, $injector, $options, $logger) {
        super($staticConfig, $injector, $options);
        this.$options = $options;
        this.$logger = $logger;
        this.allowedParameters = [];
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("execute").call(this, ["AndroidVersionCode"]);
            if (this.$project.projectData.Framework === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova && !this.$options.validValue) {
                this.$logger.printMarkdown("Your final AndroidVersionCode will be `%s2` because Apache Cordova automatically appends a specific number to the version code based on the target Android SDK and architecture. For more information, see https://issues.apache.org/jira/browse/CB-8976.", this.$project.projectData.AndroidVersionCode);
            }
        });
    }
}
exports.PrintAndroidVersionCodeCommand = PrintAndroidVersionCodeCommand;
$injector.registerCommand("prop|print|androidversioncode", PrintAndroidVersionCodeCommand);
