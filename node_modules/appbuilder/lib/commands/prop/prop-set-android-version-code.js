"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const prop_set_1 = require("./prop-set");
const constants_1 = require("../../common/constants");
const decorators_1 = require("../../common/decorators");
class SetAndroidVersionCodeCommand extends prop_set_1.SetProjectPropertyCommand {
    constructor($staticConfig, $injector, $logger) {
        super($staticConfig, $injector);
        this.$logger = $logger;
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$project.validateProjectProperty("AndroidVersionCode", args, "set");
        });
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("execute").call(this, ["AndroidVersionCode", args[0]]);
            if (this.$project.projectData.Framework === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.Cordova) {
                let message = "Your final AndroidVersionCode will be `%s2` because Apache Cordova automatically appends a specific number to the version code based on the target Android SDK and architecture. For more information, see https://issues.apache.org/jira/browse/CB-8976.";
                this.$logger.printMarkdown(message, args[0]);
            }
        });
    }
}
__decorate([
    decorators_1.invokeInit()
], SetAndroidVersionCodeCommand.prototype, "canExecute", null);
__decorate([
    decorators_1.invokeInit()
], SetAndroidVersionCodeCommand.prototype, "execute", null);
exports.SetAndroidVersionCodeCommand = SetAndroidVersionCodeCommand;
$injector.registerCommand("prop|set|androidversioncode", SetAndroidVersionCodeCommand);
