"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const decorators_1 = require("../../common/decorators");
class ProjectPropertyCommandBase {
    constructor($staticConfig, $injector) {
        this.$staticConfig = $staticConfig;
        this.$injector = $injector;
        this.$staticConfig.triggerJsonSchemaValidation = false;
        this.$project = this.$injector.resolve("project");
        if (this.$project.projectData) {
            this.projectSchema = this.$project.getProjectSchema();
        }
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureProject();
        });
    }
    get completionData() {
        let parseResult = /prop[ ]+([^ ]+) ([^ ]*)/.exec(process.argv.join(" "));
        if (parseResult) {
            let propName = parseResult[2];
            if (this.projectSchema[propName]) {
                let range = this.projectSchema[propName].range;
                if (range) {
                    if (!_.isArray(range)) {
                        range = _.map(range, (value, key) => {
                            return value.input || key;
                        });
                    }
                    return range;
                }
            }
            else {
                let properties = _.keys(this.projectSchema);
                return properties.concat(properties.map(k => k.toLowerCase()));
            }
        }
        return null;
    }
}
__decorate([
    decorators_1.cache()
], ProjectPropertyCommandBase.prototype, "init", null);
exports.ProjectPropertyCommandBase = ProjectPropertyCommandBase;
