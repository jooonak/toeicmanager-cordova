"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const projectPropertyCommandBaseLib = require("./prop-command-base");
const decorators_1 = require("../../common/decorators");
class RemoveProjectPropertyCommand extends projectPropertyCommandBaseLib.ProjectPropertyCommandBase {
    constructor($staticConfig, $injector) {
        super($staticConfig, $injector);
        this.allowedParameters = [];
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureProject();
        });
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.$project.validateProjectProperty(args[0], _.tail(args), "del")) {
                if (args[1]) {
                    return true;
                }
            }
            return false;
        });
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.updateProjectPropertyAndSave("del", args[0], _.tail(args));
        });
    }
}
__decorate([
    decorators_1.cache()
], RemoveProjectPropertyCommand.prototype, "init", null);
__decorate([
    decorators_1.invokeInit()
], RemoveProjectPropertyCommand.prototype, "canExecute", null);
__decorate([
    decorators_1.invokeInit()
], RemoveProjectPropertyCommand.prototype, "execute", null);
exports.RemoveProjectPropertyCommand = RemoveProjectPropertyCommand;
$injector.registerCommand("prop|rm", RemoveProjectPropertyCommand);
$injector.registerCommand("prop|remove", RemoveProjectPropertyCommand);
