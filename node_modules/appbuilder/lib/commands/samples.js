"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
class PrintSamplesCommand {
    constructor($samplesService, frameworkIdentifier, $config) {
        this.$samplesService = $samplesService;
        this.frameworkIdentifier = frameworkIdentifier;
        this.$config = $config;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$samplesService.printSamplesInformation(this.frameworkIdentifier);
        });
    }
    get isDisabled() {
        return this.$config.ON_PREM;
    }
}
exports.PrintSamplesCommand = PrintSamplesCommand;
$injector.registerCommand("sample|*list", $injector.resolve(PrintSamplesCommand, { frameworkIdentifier: "" }));
class CloneSampleCommand {
    constructor($samplesService, $fs, $errors, $config, $options) {
        this.$samplesService = $samplesService;
        this.$fs = $fs;
        this.$errors = $errors;
        this.$config = $config;
        this.$options = $options;
        this.allowedParameters = [new CloneCommandParameter(this.$fs, this.$errors, this.$options)];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$samplesService.cloneSample(args[0]);
        });
    }
    get isDisabled() {
        return this.$config.ON_PREM;
    }
}
exports.CloneSampleCommand = CloneSampleCommand;
$injector.registerCommand("sample|clone", CloneSampleCommand);
class CloneCommandParameter {
    constructor($fs, $errors, $options) {
        this.$fs = $fs;
        this.$errors = $errors;
        this.$options = $options;
        this.mandatory = true;
    }
    validate(validationValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (validationValue) {
                let sampleName = validationValue;
                let cloneTo = this.$options.path || sampleName;
                if (this.$fs.exists(cloneTo) && this.$fs.readDirectory(cloneTo).length > 0) {
                    this.$errors.fail("Cannot clone sample in the specified path. The directory %s is not empty. Specify an empty target directory and try again.", path.resolve(cloneTo));
                }
                return true;
            }
            return false;
        });
    }
}
