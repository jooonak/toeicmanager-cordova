"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const helpers = require("../helpers");
class EditConfigurationCommandParameter {
    constructor($errors, $project) {
        this.$errors = $errors;
        this.$project = $project;
        this.mandatory = true;
    }
    validate(validationValue) {
        return __awaiter(this, void 0, void 0, function* () {
            let template = _.find(this.$project.projectConfigFiles, { template: validationValue });
            if (!template) {
                if (validationValue) {
                    this.$errors.fail("There is no matching configuration file for: %s", validationValue);
                }
                else {
                    this.$errors.fail("You must choose which configuration file to edit!");
                }
            }
            return true;
        });
    }
}
exports.EditConfigurationCommandParameter = EditConfigurationCommandParameter;
class EditConfigurationCommand {
    constructor($logger, $fs, $errors, $hostInfo, $opener, $options, $project, $templatesService) {
        this.$logger = $logger;
        this.$fs = $fs;
        this.$errors = $errors;
        this.$hostInfo = $hostInfo;
        this.$opener = $opener;
        this.$options = $options;
        this.$project = $project;
        this.$templatesService = $templatesService;
        this.allowedParameters = [new EditConfigurationCommandParameter(this.$errors, this.$project)];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let file = args[0];
            let template = _.find(this.$project.projectConfigFiles, { template: file });
            if (!template) {
                this.$errors.fail("Please enter valid configuration file name.");
            }
            yield this.executeImplementation(template);
        });
    }
    executeImplementation(template) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureProject();
            let projectPath = this.$project.getProjectDir();
            let filepath = path.join(projectPath, template.filepath);
            let directory = path.dirname(filepath);
            if (!this.$fs.exists(filepath)) {
                this.$logger.info("Creating configuration file: " + filepath);
                let templateFilePath = path.join(this.$templatesService.itemTemplatesDir, template.templateFilepath);
                yield this.$fs.unzip(templateFilePath, directory);
                this.$fs.deleteFile(path.join(directory, "server.vstemplate"));
                if (this.$hostInfo.isWindows) {
                    let contents = this.$fs.readText(filepath);
                    contents = helpers.stringReplaceAll(contents, "\n", "\r\n");
                    this.$fs.writeFile(filepath, contents);
                }
            }
            if (!this.$options.skipUi) {
                this.$logger.info("Opening configuration file: " + filepath);
                this.$opener.open(filepath);
            }
        });
    }
}
exports.EditConfigurationCommand = EditConfigurationCommand;
$injector.registerCommand("edit-configuration", EditConfigurationCommand);
