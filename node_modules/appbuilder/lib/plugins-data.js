"use strict";
const os_1 = require("os");
const util = require("util");
var PluginType;
(function (PluginType) {
    PluginType[PluginType["CorePlugin"] = 0] = "CorePlugin";
    PluginType[PluginType["AdvancedPlugin"] = 1] = "AdvancedPlugin";
    PluginType[PluginType["MarketplacePlugin"] = 2] = "MarketplacePlugin";
    PluginType[PluginType["LocalPlugin"] = 3] = "LocalPlugin";
})(PluginType = exports.PluginType || (exports.PluginType = {}));
class CordovaPluginData {
    constructor(data, type, $project, $projectConstants) {
        this.data = data;
        this.type = type;
        this.$project = $project;
        this.$projectConstants = $projectConstants;
        this.configurations = [];
    }
    get pluginInformation() {
        let additionalPluginData = [this.buildRow("Platforms", this.data.Platforms.join(", "))];
        return this.composePluginInformation(additionalPluginData);
    }
    toProjectDataRecord(version) {
        return this.data.Identifier;
    }
    buildRow(key, value) {
        return util.format("    %s: %s", key, value);
    }
    composePluginInformation(additionalPluginData) {
        let result = (_.flatten([this.getBasicPluginInformation(), additionalPluginData, this.getPluginVariablesInfo()]));
        return result;
    }
    getBasicPluginInformation() {
        let nameRow = this.buildRow("Plugin", this.data.Name);
        let identifierRow = this.buildRow("Identifier", this.data.Identifier);
        let versionRow = this.buildRow("Version", this.data.Version);
        let urlRow = this.buildRow("Url", this.data.Url);
        let result = [nameRow, identifierRow, versionRow, urlRow];
        if (this.configurations && this.configurations.length > 0) {
            result.push(util.format("    Configuration: %s", this.configurations.join(", ")));
        }
        return result;
    }
    getPluginVariablesInfo() {
        let result = [];
        if (this.configurations && this.configurations.length) {
            _.each(this.configurations, (configuration) => {
                let info = this.getPluginVarsStringInformation(configuration);
                result = result.concat(info);
            });
        }
        else {
            let info = this.getPluginVarsStringInformation();
            result = result.concat(info);
        }
        return result;
    }
    getPluginVarsStringInformation(configuration) {
        let result = [];
        let configString = configuration ? ` for ${configuration} configuration` : "";
        let pluginVariablesData = this.$project.getPluginVariablesInfo(configuration);
        if (pluginVariablesData && pluginVariablesData[this.data.Identifier]) {
            let variables = pluginVariablesData[this.data.Identifier];
            let variableNames = _.keys(variables);
            if (variableNames.length > 0) {
                let output = [];
                output.push(`    Variables${configString}:`);
                _.each(variableNames, (variableName) => {
                    output.push(util.format("        %s: %s", variableName, variables[variableName]));
                });
                result.push(output.join(os_1.EOL));
            }
        }
        else {
            if (this.data.Variables) {
                if (_.isArray(this.data.Variables) && this.data.Variables.length) {
                    result.push(`    Variables${configString}: ${(_.map(this.data.Variables, (v) => v.name || v)).join(", ")}`);
                }
                else if (_.keys(this.data.Variables).length) {
                    result.push(`    Variables${configString}: ${_.keys(this.data.Variables).join(", ")}`);
                }
            }
        }
        return result;
    }
}
exports.CordovaPluginData = CordovaPluginData;
class MarketplacePluginData extends CordovaPluginData {
    constructor(pluginVersionsData, data, $project, $projectConstants) {
        super(data, PluginType.MarketplacePlugin, $project, $projectConstants);
        this.pluginVersionsData = pluginVersionsData;
        this.data = data;
        this.data.Identifier = this.pluginVersionsData.Identifier;
    }
    get pluginInformation() {
        let additionalPluginData = [
            this.buildRow("Available versions", _.map(this.pluginVersionsData.Versions, pl => pl.Version).join(", "))
        ];
        if (this.data.DownloadsCount) {
            additionalPluginData.unshift(this.buildRow("Downloads count", this.data.DownloadsCount.toString()));
        }
        let publisherName = this.getPublisherName(this.data.Publisher);
        if (publisherName) {
            additionalPluginData.push(this.buildRow("Publisher", publisherName));
        }
        return this.composePluginInformation(additionalPluginData);
    }
    toProjectDataRecord(version) {
        return util.format("%s@%s", this.data.Identifier, version || this.data.Version);
    }
    getPublisherName(publisher) {
        if (publisher && publisher.Name) {
            if (publisher.Name === MarketplacePluginData.TELERIK_PUBLISHER_NAME) {
                return "Telerik";
            }
            if (publisher.Name === MarketplacePluginData.TELERIK_PARTNER_PUBLISHER_NAME) {
                return "Telerik Partner";
            }
        }
        return "";
    }
}
MarketplacePluginData.TELERIK_PUBLISHER_NAME = "Telerik plugins";
MarketplacePluginData.TELERIK_PARTNER_PUBLISHER_NAME = "Telerik partner plugins";
exports.MarketplacePluginData = MarketplacePluginData;
