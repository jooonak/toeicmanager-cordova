"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const helpers = require("./helpers");
const temp = require("temp");
const shelljs = require("shelljs");
class ConfigurationFile {
    constructor(template, filepath, templateFilepath, helpText) {
        this.template = template;
        this.filepath = filepath;
        this.templateFilepath = templateFilepath;
        this.helpText = helpText;
    }
}
exports.ConfigurationFile = ConfigurationFile;
class TemplatesService {
    constructor($fs, $server, $resources, $httpClient) {
        this.$fs = $fs;
        this.$server = $server;
        this.$resources = $resources;
        this.$httpClient = $httpClient;
    }
    get projectTemplatesDir() {
        return this.$resources.resolvePath("ProjectTemplates");
    }
    get itemTemplatesDir() {
        return this.$resources.resolvePath("ItemTemplates");
    }
    getTemplatesString(regexp, replacementNames) {
        let templates = _(this.$fs.readDirectory(this.projectTemplatesDir))
            .map((file) => {
            let match = file.match(regexp), templateName = match && match[1], replacementName = templateName && replacementNames[templateName.toLowerCase()];
            return replacementName || templateName;
        })
            .filter((file) => file !== null)
            .value();
        return helpers.formatListOfNames(templates);
    }
    downloadProjectTemplates() {
        return __awaiter(this, void 0, void 0, function* () {
            let templates = yield this.$server.projects.getProjectTemplates();
            let templatesDir = this.projectTemplatesDir;
            this.$fs.deleteDirectory(templatesDir);
            this.$fs.createDirectory(templatesDir);
            yield Promise.all(_.map(templates, (template) => __awaiter(this, void 0, void 0, function* () { return yield this.downloadTemplate(template, templatesDir); })));
        });
    }
    downloadItemTemplates() {
        return __awaiter(this, void 0, void 0, function* () {
            let templates = yield this.$server.projects.getItemTemplates();
            let templatesDir = this.itemTemplatesDir;
            this.$fs.deleteDirectory(templatesDir);
            this.$fs.createDirectory(templatesDir);
            yield Promise.all(_.map(templates, (template) => __awaiter(this, void 0, void 0, function* () {
                if (template["Category"] === "Configuration") {
                    yield this.downloadTemplate(template, templatesDir);
                }
            })));
        });
    }
    unpackAppResources() {
        return __awaiter(this, void 0, void 0, function* () {
            let cordovaAssetsZipFileName = path.join(this.projectTemplatesDir, "Telerik.Mobile.Cordova.Blank.zip");
            yield this.unpackAppResourcesCore(this.$resources.resolvePath("Cordova"), cordovaAssetsZipFileName);
            let nsAssetsZipFileName = path.join(this.projectTemplatesDir, "Telerik.Mobile.NS.Blank.zip");
            yield this.unpackAppResourcesCore(this.$resources.resolvePath("NativeScript"), nsAssetsZipFileName);
        });
    }
    unpackAppResourcesCore(appResourcesDir, assetsZipFileName) {
        return __awaiter(this, void 0, void 0, function* () {
            temp.track();
            let extractionDir = temp.mkdirSync("appResourcesTemp");
            yield this.$fs.unzip(assetsZipFileName, extractionDir, { caseSensitive: false, overwriteExisitingFiles: true }, ["*App_Resources/**"]);
            let appResourcesDirInTemp = _(this.$fs.enumerateFilesInDirectorySync(extractionDir, null, { enumerateDirectories: true }))
                .filter((file) => path.basename(file) === "App_Resources")
                .first();
            if (appResourcesDirInTemp) {
                shelljs.cp("-rf", `${appResourcesDirInTemp}`, appResourcesDir);
            }
        });
    }
    downloadTemplate(template, templatesDir) {
        return __awaiter(this, void 0, void 0, function* () {
            let downloadUri = template.DownloadUri;
            let name = path.basename(downloadUri);
            let filepath = path.join(templatesDir, name);
            let file = this.$fs.createWriteStream(filepath);
            let fileEnd = this.$fs.futureFromEvent(file, "finish");
            yield this.$httpClient.httpRequest({ url: downloadUri, pipeTo: file });
            yield fileEnd;
        });
    }
}
exports.TemplatesService = TemplatesService;
$injector.register("templatesService", TemplatesService);
