"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const helpers = require("./common/helpers");
class ProcessInfo {
    constructor($childProcess, $hostInfo) {
        this.$childProcess = $childProcess;
        this.$hostInfo = $hostInfo;
    }
    isRunning(name) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            if (this.$hostInfo.isWindows) {
                if (!_.endsWith(name.toLowerCase(), ".exe")) {
                    name = name + ".exe";
                }
                result = (yield this.$childProcess.spawnFromEvent("tasklist.exe", ["/fi", 'imagename eq ' + name], "close")).stdout.indexOf(name) !== -1;
            }
            else if (this.$hostInfo.isDarwin) {
                result = (yield this.$childProcess.spawnFromEvent("ps", ["xc"], "close")).stdout.indexOf(name) !== -1;
            }
            else if (this.$hostInfo.isLinux) {
                result = (!helpers.isNullOrWhitespace((yield this.$childProcess.spawnFromEvent("ps", ["--no-headers", "-C", name], "close")).stdout));
            }
            return result;
        });
    }
}
exports.ProcessInfo = ProcessInfo;
$injector.register("processInfo", ProcessInfo);
