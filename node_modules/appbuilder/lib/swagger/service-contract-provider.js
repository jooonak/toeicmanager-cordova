"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class ServiceContractProvider {
    constructor($httpClient, $config) {
        this.$httpClient = $httpClient;
        this.$config = $config;
    }
    getApi(path) {
        return __awaiter(this, void 0, void 0, function* () {
            let request = {
                proto: this.$config.AB_SERVER_PROTO,
                host: this.$config.AB_SERVER,
                path: "/appbuilder/api/swagger",
                method: "GET"
            };
            if (path) {
                request.path += path;
            }
            let result = yield this.$httpClient.httpRequest(request);
            if (result.error) {
                throw result.error;
            }
            else {
                return JSON.parse(result.body);
            }
        });
    }
}
exports.ServiceContractProvider = ServiceContractProvider;
$injector.register("serviceContractProvider", ServiceContractProvider);
