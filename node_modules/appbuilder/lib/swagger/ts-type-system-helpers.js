"use strict";
class TSTypeSystemHelpers {
    constructor() {
        this.models = Object.create(null);
    }
    getWritableStreamTypeName() {
        return TSTypeSystemHelpers.ANY_TYPE_NAME;
    }
    getReadableStreamTypeName() {
        return TSTypeSystemHelpers.ANY_TYPE_NAME;
    }
    translate(typeName) {
        if (this.isNumber(typeName)) {
            return TSTypeSystemHelpers.NUMBER_TYPE_NAME;
        }
        if (this.isGeneric(typeName)) {
            return TSTypeSystemHelpers.ANY_TYPE_NAME;
        }
        if (this.isMap(typeName)) {
            return this.translateMap(typeName);
        }
        let match = /List\[(.+)\]/.exec(typeName);
        if (match) {
            return this.translate(match[1]) + "[]";
        }
        return typeName;
    }
    isGeneric(typeName) {
        return typeName.indexOf("<") > 0;
    }
    isBuiltIn(typeName) {
        return !!_.find(TSTypeSystemHelpers.BUILT_IN_TYPES, (builtInType) => _.startsWith(typeName, builtInType));
    }
    isModel(modelName) {
        return !!this.models[modelName] ||
            (modelName.length > 2 && !!this.models[modelName.substr(0, modelName.length - 2)]);
    }
    isStream(typeName) {
        let tsTypeName = this.translate(typeName);
        return _.endsWith(tsTypeName, "Stream") || _.endsWith(tsTypeName, "file");
    }
    addModel(modelName) {
        this.models[modelName] = true;
    }
    isNumber(typeName) {
        return typeName === "int" || typeName === "long" || typeName === "double" || typeName === "float";
    }
    isMap(typeName) {
        return _.startsWith(typeName, "Map");
    }
    translateMap(typeName) {
        let keyStartIndex = typeName.indexOf(TSTypeSystemHelpers.ARRAY_START_CHAR) + 1;
        let keyValueSeparatorIndex = typeName.indexOf(TSTypeSystemHelpers.COMMA_CHAR);
        let key = typeName.substr(keyStartIndex, keyValueSeparatorIndex - keyStartIndex);
        if (key !== TSTypeSystemHelpers.STRING_TYPE_NAME) {
            return TSTypeSystemHelpers.ANY_TYPE_NAME;
        }
        else {
            let value = typeName.substr(keyValueSeparatorIndex + 1, typeName.indexOf(TSTypeSystemHelpers.ARRAY_END_CHAR) - keyValueSeparatorIndex - 1);
            return `IDictionary<${this.translate(value)}>`;
        }
    }
}
TSTypeSystemHelpers.ARRAY_START_CHAR = "[";
TSTypeSystemHelpers.ARRAY_END_CHAR = "]";
TSTypeSystemHelpers.COMMA_CHAR = ",";
TSTypeSystemHelpers.NUMBER_TYPE_NAME = "number";
TSTypeSystemHelpers.ANY_TYPE_NAME = "any";
TSTypeSystemHelpers.STRING_TYPE_NAME = "string";
TSTypeSystemHelpers.BUILT_IN_TYPES = ["IDictionary", "boolean", "number", "string", "Date", "void", "ReadableStream", "WritableStream", "any"];
exports.TSTypeSystemHelpers = TSTypeSystemHelpers;
