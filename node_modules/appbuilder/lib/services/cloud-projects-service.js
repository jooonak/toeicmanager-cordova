"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const constants_1 = require("../constants");
class CloudProjectsService {
    constructor($remoteProjectService, $errors, $prompter) {
        this.$remoteProjectService = $remoteProjectService;
        this.$errors = $errors;
        this.$prompter = $prompter;
    }
    getSolutionProjectInfo(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const apps = yield this.$remoteProjectService.getAvailableAppsAndSolutions();
            let framework = "";
            let id = "";
            const noSolutionNamePassed = !opts.solutionName;
            if (noSolutionNamePassed) {
                const solutionNames = apps.map(sln => sln.colorizedDisplayName) || [];
                opts.solutionName = yield this.$prompter.promptForChoice("Select solution to export", solutionNames);
            }
            const { solutionData, solutionName } = yield this.$remoteProjectService.getSolutionData(opts.solutionName);
            if (!solutionData.Items || !solutionData.Items.length) {
                this.$errors.failWithoutHelp(`Solution ${solutionData.Name} does not contain any projects.`);
            }
            if ((noSolutionNamePassed && !opts.projectName) || (opts.forceChooseProject && !opts.projectName)) {
                const projects = (yield this.$remoteProjectService.getProjectsForSolution(opts.solutionName)).map(proj => proj.Name);
                if (opts.enableExportWholeSolution) {
                    projects.push(constants_1.ExportOptions.WholeSolution);
                }
                const selection = yield this.$prompter.promptForChoice("Select project to export", projects);
                if (selection !== constants_1.ExportOptions.WholeSolution) {
                    opts.projectName = selection;
                }
            }
            if (opts.projectName) {
                opts.projectName = yield this.$remoteProjectService.getProjectName(opts.solutionName, opts.projectName);
                const solution = solutionData.Items[0];
                framework = solution.Framework.toLowerCase() === "nativescript" ? "tns" : solution.Framework;
                const app = apps.find(sln => sln.colorizedDisplayName === solutionName);
                id = app && app.id;
            }
            return {
                id,
                framework,
                projectName: opts.projectName,
                solutionName: opts.solutionName
            };
        });
    }
}
exports.CloudProjectsService = CloudProjectsService;
$injector.register("cloudProjectsService", CloudProjectsService);
