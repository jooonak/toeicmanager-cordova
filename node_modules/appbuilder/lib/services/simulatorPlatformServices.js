"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const platform_services_run_validator_1 = require("./platform-services-run-validator");
class WinSimulatorPlatformServices extends platform_services_run_validator_1.PlatformServicesRunValidator {
    constructor($childProcess, $hostInfo, $errors, $hostCapabilities, $project) {
        super($errors, $hostCapabilities, $project);
        this.$childProcess = $childProcess;
        this.$hostInfo = $hostInfo;
    }
    get packageName() {
        return WinSimulatorPlatformServices.PACKAGE_NAME_WIN;
    }
    get executableName() {
        return WinSimulatorPlatformServices.EXECUTABLE_NAME_WIN;
    }
    runApplication(applicationPath, applicationParams) {
        let simulatorBinary = path.join(applicationPath, WinSimulatorPlatformServices.EXECUTABLE_NAME_WIN);
        this.$childProcess.spawn(simulatorBinary, applicationParams, { stdio: "ignore", detached: true }).unref();
    }
    canRunApplication() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return (yield _super("canRunApplication").call(this)) && (yield this.$hostInfo.isDotNet40Installed("Unable to start the simulator. Verify that you have installed .NET 4.0 or later and try again."));
        });
    }
}
WinSimulatorPlatformServices.PACKAGE_NAME_WIN = "Telerik.BlackDragon.Client.Mobile.Tools.Package";
WinSimulatorPlatformServices.EXECUTABLE_NAME_WIN = "Icenium.Simulator.exe";
class MacSimulatorPlatformServices extends platform_services_run_validator_1.PlatformServicesRunValidator {
    constructor($childProcess, $errors, $hostCapabilities, $project) {
        super($errors, $hostCapabilities, $project);
        this.$childProcess = $childProcess;
    }
    get packageName() {
        return MacSimulatorPlatformServices.PACKAGE_NAME_MAC;
    }
    get executableName() {
        return MacSimulatorPlatformServices.EXECUTABLE_NAME_MAC;
    }
    runApplication(applicationPath, applicationParams) {
        let simulatorBinary = path.join(applicationPath, MacSimulatorPlatformServices.EXECUTABLE_NAME_MAC_APP);
        let commandLine = [simulatorBinary, '--args'].concat(applicationParams);
        this.$childProcess.spawn('open', commandLine, { stdio: ["ignore", "ignore", "ignore"], detached: true }).unref();
    }
    canRunApplication() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return _super("canRunApplication").call(this);
        });
    }
}
MacSimulatorPlatformServices.PACKAGE_NAME_MAC = "Telerik.BlackDragon.Client.Mobile.Tools.Mac.Package";
MacSimulatorPlatformServices.EXECUTABLE_NAME_MAC = "AppBuilder Simulator";
MacSimulatorPlatformServices.EXECUTABLE_NAME_MAC_APP = MacSimulatorPlatformServices.EXECUTABLE_NAME_MAC + ".app";
let hostInfo = $injector.resolve("hostInfo");
if (hostInfo.isWindows) {
    $injector.register("simulatorPlatformServices", WinSimulatorPlatformServices);
}
else if (hostInfo.isDarwin) {
    $injector.register("simulatorPlatformServices", MacSimulatorPlatformServices);
}
else {
    $injector.register("simulatorPlatformServices", {});
}
