"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const os_1 = require("os");
const xmlMapping = require("xml-mapping");
const util = require("util");
const constants_1 = require("../common/constants");
class ProjectPropertiesService {
    constructor($frameworkProjectResolver, $fs, $errors, $injector, $jsonSchemaValidator, $projectConstants, $logger) {
        this.$frameworkProjectResolver = $frameworkProjectResolver;
        this.$fs = $fs;
        this.$errors = $errors;
        this.$injector = $injector;
        this.$jsonSchemaValidator = $jsonSchemaValidator;
        this.$projectConstants = $projectConstants;
        this.$logger = $logger;
    }
    getProjectProperties(projectFile, isJsonProjectFile, frameworkProject) {
        let properties = isJsonProjectFile ? this.$fs.readJson(projectFile) :
            this.getProjectPropertiesFromXmlProjectFile(projectFile, frameworkProject);
        if (properties) {
            this.completeProjectProperties(properties, frameworkProject);
        }
        return properties;
    }
    completeProjectProperties(properties, frameworkProject) {
        let updated = false;
        if (!_.has(properties, "projectVersion")) {
            this.$logger.warn("Missing 'projectVersion' property in .abproject. Default value '1' will be used.");
            properties.projectVersion = ProjectPropertiesService.PROJECT_VERSION_DEFAULT_VALUE;
            updated = true;
        }
        if (frameworkProject.completeProjectProperties(properties)) {
            updated = true;
        }
        return updated;
    }
    removeProjectProperty(dataToBeUpdated, property, projectData) {
        let normalizedProperty = this.normalizePropertyName(property, projectData);
        if (dataToBeUpdated) {
            delete dataToBeUpdated[normalizedProperty];
            if (projectData) {
                this.validateProjectData(projectData, dataToBeUpdated);
            }
            else {
                this.validateProjectData(dataToBeUpdated);
            }
        }
        return dataToBeUpdated;
    }
    updateCorePlugins(projectData, configurationSpecificData, mode, newValue, configurationsSpecifiedByUser) {
        return __awaiter(this, void 0, void 0, function* () {
            this.moveCorePluginsToConfigurationSpecificData(projectData, configurationSpecificData);
            if (configurationsSpecifiedByUser.length === 0) {
                configurationsSpecifiedByUser = _.keys(configurationSpecificData);
            }
            yield Promise.all(_.map(configurationsSpecifiedByUser, (configuration) => __awaiter(this, void 0, void 0, function* () {
                yield this.updateProjectProperty(projectData, configurationSpecificData[configuration], mode, this.$projectConstants.CORE_PLUGINS_PROPERTY_NAME, newValue);
            })));
            this.tryMovingCorePluginsToProjectData(projectData, configurationSpecificData);
        });
    }
    updateProjectProperty(projectData, configurationSpecificData, mode, property, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            let normalizedProperty = this.normalizePropertyName(property, projectData);
            let isString = this.$jsonSchemaValidator.getPropertyType(projectData.Framework, normalizedProperty) === "string";
            if (isString) {
                if (newValue.length > 1) {
                    this.$errors.fail("Property '%s' is not a collection of flags. Specify only a single property value.", property);
                }
            }
            let propertyValue = configurationSpecificData ? configurationSpecificData[normalizedProperty] : projectData[normalizedProperty];
            if (mode === "set") {
                propertyValue = isString ? newValue[0] : newValue;
            }
            else if (mode === "del") {
                if (!(propertyValue instanceof Array)) {
                    this.$errors.fail("Unable to remove value to non-flags property");
                }
                propertyValue = _.difference(propertyValue, newValue);
            }
            else if (mode === "add") {
                if (!(propertyValue instanceof Array)) {
                    this.$errors.fail("Unable to add value to non-flags property");
                }
                propertyValue = _.union(propertyValue, newValue);
            }
            else {
                this.$errors.fail("Unknown property update mode '%s'", mode);
            }
            yield this.notifyPropertyChanged(projectData.Framework, normalizedProperty, propertyValue);
            if (configurationSpecificData) {
                configurationSpecificData[normalizedProperty] = propertyValue;
            }
            else {
                projectData[normalizedProperty] = propertyValue;
            }
            this.validateProjectData(projectData, configurationSpecificData);
        });
    }
    normalizePropertyName(propertyName, projectData) {
        let validProperties = this.getValidProperties(projectData);
        let normalizedPropertyName = validProperties[propertyName.toLowerCase()];
        if (!normalizedPropertyName) {
            let message = util.format("Unrecognized project property '%s'. Use 'appbuilder prop print' command to lists all available property names.", propertyName);
            this.$errors.fail({ formatStr: message, suppressCommandHelp: true });
        }
        return normalizedPropertyName;
    }
    getPropertiesForAllSupportedProjects() {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let schemas = Object.create(null);
            let targetFrameworkIdentifiers = _.values(constants_1.TARGET_FRAMEWORK_IDENTIFIERS);
            _.each(targetFrameworkIdentifiers, (targetFrameworkIdentifier) => {
                let projectSchema = this.$frameworkProjectResolver.resolve(targetFrameworkIdentifier).getProjectFileSchema();
                schemas[targetFrameworkIdentifier] = projectSchema;
            });
            let schemaValues = _.values(schemas);
            let firstArray = _.first(schemaValues);
            let commonPropertyNames = _.filter(_.keys(firstArray), (propertyName) => {
                return _.every(schemaValues, (schema) => schema[propertyName] && schema[propertyName] === firstArray[propertyName]);
            });
            yield Promise.all(_.map(_.keys(schemas), (targetFrameworkIdentifier) => __awaiter(this, void 0, void 0, function* () {
                let specificFrameworkPropertyNames = _.difference(_.keys(schemas[targetFrameworkIdentifier]), commonPropertyNames);
                let specificFrameworkProperties = Object.create(null);
                _.each(specificFrameworkPropertyNames, (propertyName) => {
                    specificFrameworkProperties[propertyName] = schemas[targetFrameworkIdentifier][propertyName];
                });
                let title = util.format("Project properties for %s projects:", targetFrameworkIdentifier);
                result.push(yield this.getProjectSchemaPartHelp(specificFrameworkProperties, title));
            })));
            let commonProperties = Object.create(null);
            _.each(commonPropertyNames, (propertyName) => commonProperties[propertyName] = firstArray[propertyName]);
            result.push(yield this.getProjectSchemaPartHelp(commonProperties, "Common properties for all projects"));
            return result.join(os_1.EOL + os_1.EOL);
        });
    }
    getValidProperties(projectData) {
        return this.$jsonSchemaValidator.getValidProperties(projectData.Framework, projectData.FrameworkVersion);
    }
    getPropRange(propData) {
        return __awaiter(this, void 0, void 0, function* () {
            if (propData.dynamicRange) {
                return yield this.$injector.dynamicCall(propData.dynamicRange);
            }
            if (propData.enum) {
                return propData.enum;
            }
            if (propData.items) {
                if (propData.items.enum) {
                    return propData.items.enum;
                }
            }
            return propData.range;
        });
    }
    getValidValuesForProperty(propData) {
        return __awaiter(this, void 0, void 0, function* () {
            let range = yield this.getPropRange(propData);
            if (range) {
                return _.sortBy(_.values(range), (val) => {
                    return val.toUpperCase();
                });
            }
            return null;
        });
    }
    getProjectSchemaPartHelp(schema, title) {
        return __awaiter(this, void 0, void 0, function* () {
            let help = [title];
            yield Promise.all(_.map(_.keys(schema), (propertyName) => __awaiter(this, void 0, void 0, function* () {
                let value = schema[propertyName];
                help.push(util.format("  %s - %s", propertyName, value.description));
                let range = yield this.getPropRange(value);
                if (range) {
                    help.push("    Valid values:");
                    _.each(range, (rangeDesc, rangeKey) => {
                        let desc = "      " + (_.isArray(range) ? rangeDesc : rangeDesc.input || rangeKey);
                        if (rangeDesc.description) {
                            desc += " - " + rangeDesc.description;
                        }
                        help.push(desc);
                    });
                }
                if (value.validationMessage) {
                    help.push("    " + value.validationMessage.replace(os_1.EOL, os_1.EOL + "    "));
                }
                else if (value.regex) {
                    help.push("    Valid values match /" + value.regex.toString() + "/");
                }
            })));
            return help.join(os_1.EOL);
        });
    }
    getProjectPropertiesFromXmlProjectFile(projectFile, frameworkProject) {
        let properties = {};
        let result = xmlMapping.tojson(this.$fs.readText(projectFile));
        let propertyGroup = result.Project.PropertyGroup[0];
        let projectSchema = frameworkProject.getProjectFileSchema();
        _.sortBy(Object.keys(projectSchema), key => key === "FrameworkVersion" ? -1 : 1).forEach((propertyName) => {
            if (propertyGroup.hasOwnProperty(propertyName)) {
                properties[propertyName] = propertyGroup[propertyName][0];
            }
        });
        if (propertyGroup.ProjectName) {
            properties.ProjectName = propertyGroup.ProjectName[0];
        }
        else {
            properties = null;
        }
        return properties;
    }
    notifyPropertyChanged(framework, propertyName, propertyValue) {
        return __awaiter(this, void 0, void 0, function* () {
            let projectSchema = this.$jsonSchemaValidator.tryResolveValidationSchema(framework);
            let propData = projectSchema[propertyName];
            if (propData && propData.onChanging) {
                yield this.$injector.dynamicCall(propData.onChanging, [propertyValue]);
            }
        });
    }
    moveCorePluginsToConfigurationSpecificData(projectData, configurationSpecificData) {
        if (projectData.CorePlugins && projectData.CorePlugins.length > 0) {
            _.each(configurationSpecificData, (configurationData, configuration) => {
                this.$logger.trace(`Move CorePlugins from project data to '${configuration}' configuration.`);
                if (configurationData.CorePlugins && configurationData.CorePlugins.length > 0 && _.difference(configurationData.CorePlugins, projectData.CorePlugins).length !== 0) {
                    this.$errors.failWithoutHelp(`CorePlugins are defined in both '${this.$projectConstants.PROJECT_FILE}' and '.${configuration}${this.$projectConstants.PROJECT_FILE}'. Remove them from one of the files and try again.`);
                }
                configurationData.CorePlugins = projectData.CorePlugins;
            });
        }
        delete projectData.CorePlugins;
    }
    validateAllProjectData(projectData, configurationSpecificData) {
        let projectConfigurations = _.keys(configurationSpecificData);
        _.each(projectConfigurations, configuration => {
            this.validateProjectData(projectData, configurationSpecificData[configuration]);
        });
        this.validateProjectData(projectData);
    }
    validateProjectData(projectData, configurationSpecificData) {
        let dataToValidate = Object.create(null);
        _.extend(dataToValidate, projectData);
        if (configurationSpecificData) {
            _.extend(dataToValidate, configurationSpecificData);
        }
        this.$jsonSchemaValidator.validate(dataToValidate);
    }
    tryMovingCorePluginsToProjectData(projectData, configurationSpecificData) {
        if (this.shouldMoveCorePluginsToProjectData(configurationSpecificData)) {
            this.$logger.trace("Moving CorePlugins from configuration specific data to project data.");
            projectData.CorePlugins = _(configurationSpecificData)
                .values()
                .first()
                .CorePlugins;
            _.each(configurationSpecificData, (configurationData, configuration) => {
                this.$logger.trace(`Removing property CorePlugins from '${configuration}' configuration.`);
                delete configurationData.CorePlugins;
            });
            this.validateAllProjectData(projectData, configurationSpecificData);
        }
    }
    shouldMoveCorePluginsToProjectData(configurationSpecificData) {
        let corePluginsInConfigs = _.map(configurationSpecificData, configData => configData.CorePlugins);
        let corePluginsLenghtsInConfigs = _(corePluginsInConfigs)
            .map(c => c.length)
            .uniq()
            .value();
        let differencesBetweenPluginsInConfigs = _.difference.apply(null, corePluginsInConfigs);
        if (corePluginsLenghtsInConfigs.length === 1 && differencesBetweenPluginsInConfigs.length === 0) {
            this.$logger.trace("No difference between CorePlugins in each configuration detected. CorePlugins should be moved to project data.");
            return true;
        }
        this.$logger.trace("There's difference between CorePlugins in configuration files. CorePlugins cannot be moved to project data.");
        return false;
    }
}
ProjectPropertiesService.PROJECT_VERSION_DEFAULT_VALUE = 1;
exports.ProjectPropertiesService = ProjectPropertiesService;
$injector.register("projectPropertiesService", ProjectPropertiesService);
