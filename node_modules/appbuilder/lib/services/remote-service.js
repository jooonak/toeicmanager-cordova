"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const os = require("os");
const minimatch = require("minimatch");
const ip = require("ip");
class RemoteService {
    constructor($logger, $fs, $express, $iOSEmulatorServices, $domainNameSystem, $sysInfo, $staticConfig) {
        this.$logger = $logger;
        this.$fs = $fs;
        this.$express = $express;
        this.$iOSEmulatorServices = $iOSEmulatorServices;
        this.$domainNameSystem = $domainNameSystem;
        this.$sysInfo = $sysInfo;
        this.$staticConfig = $staticConfig;
        this.appBuilderDir = path.join(os.tmpdir(), 'AppBuilder');
        this.packageLocation = path.join(this.appBuilderDir, 'package.zip');
    }
    startApiServer(portNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$fs.ensureDirectoryExists(this.appBuilderDir);
            this.$express.post("/launch", (req, res) => this.onLaunchRequest(req, res));
            let domain = (yield this.$domainNameSystem.getDomains())[0];
            this.$express.listen(portNumber, () => {
                let ipAddress = ip.address();
                this.$logger.info("Listening on port " + portNumber);
                if (domain) {
                    this.$logger.info("In the AppBuilder Windows client or the extension for Visual Studio, provide the connection information for this server in one of the following formats:\n" +
                        " - Address: http://" + ipAddress + " Port: " + portNumber + "\n" +
                        " - Address: http://" + domain + " Port: " + portNumber);
                }
                else {
                    this.$logger.info("In the AppBuilder Windows client or the extension for Visual Studio, provide the connection information for this server in the following format:\n" +
                        " - Address: http://" + ipAddress + " Port: " + portNumber);
                }
            });
            this.$express.run();
        });
    }
    onLaunchRequest(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$logger.info("launch simulator request received ... ");
            this.$fs.deleteDirectory(this.appBuilderDir);
            this.$fs.createDirectory(this.appBuilderDir);
            let deviceFamily = req.query.deviceFamily.toLowerCase();
            let archive = this.$fs.createWriteStream(this.packageLocation);
            archive.on('error', (err) => {
                this.$logger.error('Could not save the uploaded file. ' + err);
                res.status(500).send('Could not save the uploaded file. ' + err).end();
            });
            req.pipe(archive);
            yield this.$fs.futureFromEvent(archive, 'finish');
            yield this.$fs.unzip(this.packageLocation, this.appBuilderDir);
            let appLocation = path.join(this.appBuilderDir, this.$fs.readDirectory(this.appBuilderDir).filter(minimatch.filter("*.app"))[0]);
            this.$iOSEmulatorServices.checkAvailability(false);
            let xcodeVersion = (yield this.$sysInfo.getSysInfo(this.$staticConfig.pathToPackageJson)).xcodeVer, xcodeVersionMatch = xcodeVersion.match(/Xcode (.*)/), splittedVersion = xcodeVersionMatch && xcodeVersionMatch[1] && xcodeVersionMatch[1].split("."), xcodeMajorVersion = splittedVersion && splittedVersion[0], mappedDeviceName;
            if (xcodeMajorVersion) {
                mappedDeviceName = RemoteService.AppBuilderClientToSimulatorDeviceNameMapping[xcodeMajorVersion] && RemoteService.AppBuilderClientToSimulatorDeviceNameMapping[xcodeMajorVersion][deviceFamily];
            }
            mappedDeviceName = mappedDeviceName || deviceFamily;
            yield this.$iOSEmulatorServices.runApplicationOnEmulator(appLocation, { deviceType: mappedDeviceName, appId: req.query.appId });
            res.status(200).end();
        });
    }
}
RemoteService.AppBuilderClientToSimulatorDeviceNameMapping = {
    "6": {
        "iphoneandipod": "iPhone-4s",
        "ipad": "iPad-2"
    },
    "7": {
        "iphoneandipod": "iPhone 6",
        "ipad": "iPad 2"
    },
    "8": {
        "iphoneandipod": "iPhone 6",
        "ipad": "iPad 2"
    }
};
exports.RemoteService = RemoteService;
$injector.register("remoteService", RemoteService);
