"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const constants = require("../common/constants");
const rimraf = require("rimraf");
class ProjectMigrationService {
    constructor($fs, $npmService, $prompter, $typeScriptService, $project, $logger) {
        this.$fs = $fs;
        this.$npmService = $npmService;
        this.$prompter = $prompter;
        this.$typeScriptService = $typeScriptService;
        this.$project = $project;
        this.$logger = $logger;
        this.shouldAskForTypeScriptMigration = true;
    }
    migrateTypeScriptProject() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.shouldAskForTypeScriptMigration) {
                if (this.$typeScriptService.isTypeScriptProject(this.$project.projectDir) && this.$project.projectData &&
                    this.$project.projectData.Framework.toLowerCase() === constants.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript.toLowerCase()) {
                    let projectDir = this.$project.projectDir, pathToTypingsTnsCoreModules = path.join(projectDir, "typings", constants.TNS_CORE_MODULES);
                    if (this.$fs.exists(pathToTypingsTnsCoreModules)) {
                        this.$logger.printMarkdown("`AppBuilder 3.5` has introduced improved TypeScript support using npm modules. The `tns-core-modules` typings are now redundant and will be removed from your app.");
                        if (yield this.$prompter.confirm("Do you want to continue?", () => true)) {
                            rimraf.sync(pathToTypingsTnsCoreModules);
                            this.$fs.deleteEmptyParents(pathToTypingsTnsCoreModules);
                            yield this.$npmService.install(projectDir);
                        }
                    }
                }
                this.shouldAskForTypeScriptMigration = false;
            }
        });
    }
}
exports.ProjectMigrationService = ProjectMigrationService;
$injector.register("projectMigrationService", ProjectMigrationService);
