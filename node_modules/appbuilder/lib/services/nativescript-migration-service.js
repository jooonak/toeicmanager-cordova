"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
class NativeScriptMigrationService {
    constructor($config, $errors, $fs, $logger, $projectConstants, $resourceDownloader, $nativeScriptResources, $injector, $staticConfig, $npmService, $projectMigrationService) {
        this.$config = $config;
        this.$errors = $errors;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$projectConstants = $projectConstants;
        this.$resourceDownloader = $resourceDownloader;
        this.$nativeScriptResources = $nativeScriptResources;
        this.$injector = $injector;
        this.$staticConfig = $staticConfig;
        this.$npmService = $npmService;
        this.$projectMigrationService = $projectMigrationService;
        this.tnsModulesDirectoryPath = path.join(this.$nativeScriptResources.nativeScriptResourcesDir, NativeScriptMigrationService.TNS_MODULES);
        this.remoteNativeScriptResourcesPath = `http://${this.$config.AB_SERVER}/appbuilder/Resources/NativeScript`;
    }
    get nativeScriptMigrationConfiguration() {
        if (!this._nativeScriptMigrationConfiguration) {
            let projectDir = this.$project.getProjectDir(), tnsModulesProjectPath = path.join(projectDir, this.$projectConstants.NATIVESCRIPT_APP_DIR_NAME, NativeScriptMigrationService.TNS_MODULES), tnsTypingsPath = path.join(projectDir, NativeScriptMigrationService.TYPINGS, NativeScriptMigrationService.TNS_CORE_MODULES);
            this._nativeScriptMigrationConfiguration = {
                tnsModulesProjectPath: tnsModulesProjectPath,
                tnsTypingsPath: tnsTypingsPath,
                packageJsonContents: this.getProjectPackageJsonContent(),
                tnsModulesBackupName: this.getBackupName(tnsModulesProjectPath),
                typingsBackupName: this.getBackupName(tnsTypingsPath),
                oldPackageJsonContents: this.getProjectPackageJsonContent(),
                pathToPackageJson: this.getPathToProjectPackageJson(),
                projectDir: projectDir,
                appResourcesRequiredPath: path.join(projectDir, this.$projectConstants.NATIVESCRIPT_APP_DIR_NAME, this.$staticConfig.APP_RESOURCES_DIR_NAME),
                shouldRollBackAppResources: false
            };
        }
        return this._nativeScriptMigrationConfiguration;
    }
    ;
    get $project() {
        return this.$injector.resolve("project");
    }
    get nativeScriptMigrationData() {
        this._nativeScriptMigrationData = this._nativeScriptMigrationData || this.$fs.readJson(this.$nativeScriptResources.nativeScriptMigrationFile);
        return this._nativeScriptMigrationData;
    }
    downloadMigrationData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.$fs.deleteDirectory(this.$nativeScriptResources.nativeScriptResourcesDir);
            this.$fs.createDirectory(this.$nativeScriptResources.nativeScriptResourcesDir);
            yield this.downloadMigrationConfigFile();
            yield this.downloadPackageJsonResourceFile();
        });
    }
    getSupportedVersions() {
        let migrationData = this.nativeScriptMigrationData;
        return _.map(migrationData.supportedVersions, supportedVersion => supportedVersion.version);
    }
    getSupportedFrameworks() {
        let migrationData = this.nativeScriptMigrationData;
        return migrationData.supportedVersions;
    }
    getDisplayNameForVersion(version) {
        let framework = _.find(this.getSupportedFrameworks(), (fw) => fw.version === version);
        this.warnIfVersionDeprecated(version);
        if (framework) {
            return framework.displayName;
        }
        else {
            return version;
        }
    }
    onFrameworkVersionChanging(newVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            let currentFrameworkVersion = this.$project.projectData.FrameworkVersion;
            this.$logger.trace(`Migrating from version ${currentFrameworkVersion} to ${newVersion}.`);
            if (currentFrameworkVersion === newVersion) {
                return;
            }
            this.ensurePackageJsonExists(newVersion);
            yield this.migrateByModifyingPackageJson(currentFrameworkVersion, newVersion);
        });
    }
    downloadMigrationConfigFile(targetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let remoteFilePath = `${this.remoteNativeScriptResourcesPath}/${NativeScriptMigrationService.REMOTE_NATIVESCRIPT_MIGRATION_DATA_FILENAME}`;
            return this.$resourceDownloader.downloadResourceFromServer(remoteFilePath, targetPath || this.$nativeScriptResources.nativeScriptMigrationFile);
        });
    }
    migrateByModifyingPackageJson(currentVersion, newVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.nativeScriptMigrationConfiguration.packageJsonContents.dependencies[NativeScriptMigrationService.TNS_CORE_MODULES] = this.getModuleVersion(newVersion);
                yield this.$projectMigrationService.migrateTypeScriptProject();
                yield this.$npmService.install(this.$project.getProjectDir());
                this.$fs.writeJson(this.nativeScriptMigrationConfiguration.pathToPackageJson, this.nativeScriptMigrationConfiguration.packageJsonContents);
            }
            catch (err) {
                this.traceError(err);
                this.$fs.writeJson(this.nativeScriptMigrationConfiguration.pathToPackageJson, this.nativeScriptMigrationConfiguration.oldPackageJsonContents);
                let message = "Error during migration. Restored original state of the project.";
                if (err.errorCode === 129) {
                    message = err.message;
                }
                this.$errors.failWithoutHelp(message);
            }
            this.$logger.info(`Project migrated successfully from ${currentVersion} to ${newVersion}.`);
        });
    }
    getDeprecatedVersions() {
        let migrationData = this.nativeScriptMigrationData;
        return _.map(migrationData.deprecatedVersions, deprecatedVersion => deprecatedVersion.version);
    }
    warnIfVersionDeprecated(version) {
        if (_.includes(this.getDeprecatedVersions(), version)) {
            this.$logger.warn(`Your project targets NativeScript ${version}. This version is deprecated and will not be available in a future release. You can still develop and build your project but it is recommended that you commit all changes to version control and migrate to a newer version of NativeScript.`);
        }
    }
    ensurePackageJsonExists(newVersion) {
        let versions = this.$fs.readJson(this.$nativeScriptResources.nativeScriptMigrationFile).supportedVersions.map(version => version.version);
        if (_.includes(versions, newVersion)
            && !this.$fs.exists(path.join(this.nativeScriptMigrationConfiguration.projectDir, this.$projectConstants.PACKAGE_JSON_NAME))) {
            this.$fs.copyFile(this.$nativeScriptResources.nativeScriptDefaultPackageJsonFile, path.join(this.nativeScriptMigrationConfiguration.projectDir, this.$projectConstants.PACKAGE_JSON_NAME));
        }
    }
    downloadPackageJsonResourceFile() {
        return __awaiter(this, void 0, void 0, function* () {
            let remoteFilePath = `${this.remoteNativeScriptResourcesPath}/${this.$projectConstants.PACKAGE_JSON_NAME}`;
            return this.$resourceDownloader.downloadResourceFromServer(remoteFilePath, this.$nativeScriptResources.nativeScriptDefaultPackageJsonFile);
        });
    }
    getPathToProjectPackageJson() {
        return path.join(this.$project.getProjectDir(), this.$projectConstants.PACKAGE_JSON_NAME);
    }
    getProjectPackageJsonContent() {
        let pathToPackageJson = this.getPathToProjectPackageJson();
        if (!this.$fs.exists(pathToPackageJson)) {
            this.$fs.copyFile(this.$nativeScriptResources.nativeScriptDefaultPackageJsonFile, pathToPackageJson);
        }
        return this.$fs.readJson(pathToPackageJson);
    }
    getBackupName(str) {
        return `${str}.backup`;
    }
    traceError(err) {
        this.$logger.trace("Error during migration. Trying to restore previous state.");
        this.$logger.trace(err);
    }
    getModuleVersion(version) {
        let versionObject = _.find(this.nativeScriptMigrationData.supportedVersions, sv => sv.version === version);
        if (!versionObject || !versionObject.modulesVersion) {
            this.$errors.fail({
                formatStr: `There seems to be a problem with ${this.$staticConfig.CLIENT_NAME}. Try reinstalling to fix the issue.`,
                suppressCommandHelp: true,
                errorCode: 129
            });
        }
        return versionObject.modulesVersion;
    }
}
NativeScriptMigrationService.REMOTE_NATIVESCRIPT_MIGRATION_DATA_FILENAME = "NativeScript.json";
NativeScriptMigrationService.TYPINGS = "typings";
NativeScriptMigrationService.TNS_CORE_MODULES = "tns-core-modules";
NativeScriptMigrationService.TNS_MODULES = "tns_modules";
exports.NativeScriptMigrationService = NativeScriptMigrationService;
$injector.register("nativeScriptMigrationService", NativeScriptMigrationService);
