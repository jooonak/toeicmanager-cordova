"use strict";
const path = require("path");
class DependencyConfigService {
    constructor($fs, $errors) {
        this.$fs = $fs;
        this.$errors = $errors;
    }
    get dependencyConfigFilePath() {
        return path.join(__dirname, "../../config", DependencyConfigService.DEPENDENCY_CONFIG_NAME);
    }
    getGeneratorConfig(generatorName) {
        let generators = this.getAllGenerators();
        let generatorConfig = _.find(generators, (generator) => generator.name === generatorName);
        if (!generatorConfig) {
            this.$errors.fail("Unable to find config data for %s. Check if config/generator-config.json exists and try again.", generatorName);
        }
        return generatorConfig;
    }
    getAppScaffoldingConfig() {
        let dependencyConfig = this.getDependencyConfigContent();
        return dependencyConfig.appScaffolding;
    }
    getAllGenerators() {
        let dependencyConfigContent = this.getDependencyConfigContent();
        return dependencyConfigContent.generators;
    }
    getDependencyConfigContent() {
        if (!this.dependencyConfigCache) {
            try {
                this.dependencyConfigCache = this.$fs.readJson(this.dependencyConfigFilePath);
            }
            catch (e) {
                this.$errors.fail("Unable to process config/dependency-config.json file. Check if it exists and try again.");
            }
        }
        return this.dependencyConfigCache;
    }
}
DependencyConfigService.DEPENDENCY_CONFIG_NAME = "dependency-config.json";
exports.DependencyConfigService = DependencyConfigService;
$injector.register("dependencyConfigService", DependencyConfigService);
