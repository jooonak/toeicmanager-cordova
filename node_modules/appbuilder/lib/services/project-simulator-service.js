"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
class ProjectSimulatorService {
    constructor($frameworkSimulatorServiceResolver, $project) {
        this.$frameworkSimulatorServiceResolver = $frameworkSimulatorServiceResolver;
        this.$project = $project;
    }
    get frameworkProjectSimulatorService() {
        return this.$frameworkSimulatorServiceResolver.resolve(this.$project.projectData.Framework);
    }
    getSimulatorParams(simulatorPackageName) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.frameworkProjectSimulatorService.getSimulatorParams(simulatorPackageName);
        });
    }
}
exports.ProjectSimulatorService = ProjectSimulatorService;
$injector.register("projectSimulatorService", ProjectSimulatorService);
class CordovaSimulatorService {
    constructor($config, $fs, $logger, $project, $server, $serverExtensionsService) {
        this.$config = $config;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$project = $project;
        this.$server = $server;
        this.$serverExtensionsService = $serverExtensionsService;
    }
    getSimulatorParams(simulatorPackageName) {
        return __awaiter(this, void 0, void 0, function* () {
            let pluginsPath = yield this.prepareCordovaPlugins(simulatorPackageName);
            let projectData = this.$project.projectData;
            let corePlugins = this.$project.getProperty("CorePlugins", "debug");
            return [
                "--statusbarstyle", projectData.iOSStatusBarStyle,
                "--frameworkversion", projectData.FrameworkVersion,
                "--orientations", projectData.DeviceOrientations.join(";"),
                "--corepluginspath", pluginsPath,
                "--supportedplatforms", this.$project.getProjectTargets().join(";"),
                "--plugins", (corePlugins || []).join(";")
            ];
        });
    }
    prepareCordovaPlugins(simulatorPackageName) {
        return __awaiter(this, void 0, void 0, function* () {
            let packageVersion = this.$serverExtensionsService.getExtensionVersion(simulatorPackageName);
            let pluginsPath = path.join(this.$serverExtensionsService.cacheDir, this.getPluginsDirName(packageVersion));
            if (!this.$fs.exists(pluginsPath)) {
                let zipFile;
                try {
                    this.$logger.info("Downloading core Cordova plugins...");
                    this.$fs.createDirectory(pluginsPath);
                    let zipPath = path.join(pluginsPath, "plugins.zip");
                    this.$logger.debug("Downloading Cordova plugins package into '%s'", zipPath);
                    zipFile = this.$fs.createWriteStream(zipPath);
                    yield this.$server.cordova.getPluginsPackage(zipFile);
                    this.$logger.debug("Unpacking Cordova plugins from %s", zipPath);
                    yield this.$fs.unzip(zipPath, pluginsPath);
                    this.$logger.info("Finished downloading plugins.");
                }
                catch (err) {
                    yield this.closeStream(zipFile);
                    this.$fs.deleteDirectory(pluginsPath);
                    throw err;
                }
            }
            return pluginsPath;
        });
    }
    closeStream(stream) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                stream.close((err, data) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
            });
        });
    }
    getPluginsDirName(serverVersion) {
        let result;
        if (this.$config.DEBUG) {
            result = CordovaSimulatorService.PLUGINS_PACKAGE_IDENTIFIER;
        }
        else {
            result = CordovaSimulatorService.PLUGINS_PACKAGE_IDENTIFIER + "-" + serverVersion;
        }
        this.$logger.debug("PLUGINS dir is: " + result);
        return result;
    }
}
CordovaSimulatorService.PLUGINS_PACKAGE_IDENTIFIER = "Plugins";
exports.CordovaSimulatorService = CordovaSimulatorService;
$injector.register("cordovaSimulatorService", CordovaSimulatorService);
class NativeScriptSimulatorService {
    getSimulatorParams(simulatorPackageName) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
}
exports.NativeScriptSimulatorService = NativeScriptSimulatorService;
$injector.register("nativeScriptSimulatorService", NativeScriptSimulatorService);
