"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class AnalyticsSettingsService {
    constructor($loginManager, $userDataStore, $staticConfig, $userSettingsService) {
        this.$loginManager = $loginManager;
        this.$userDataStore = $userDataStore;
        this.$staticConfig = $staticConfig;
        this.$userSettingsService = $userSettingsService;
    }
    canDoRequest() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$loginManager.isLoggedIn();
        });
    }
    getUserId() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$userDataStore.getUser()).uid;
        });
    }
    getClientName() {
        return "Telerik".white.bold + " " + this.$staticConfig.CLIENT_NAME.cyan.bold;
    }
    getPrivacyPolicyLink() {
        return "http://www.telerik.com/company/privacy-policy";
    }
    getUserSessionsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$userSettingsService.getSettingValue("SESSIONS_STARTED")) || 0;
        });
    }
    setUserSessionsCount(count) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$userSettingsService.saveSetting("SESSIONS_STARTED", count);
        });
    }
}
exports.AnalyticsSettingsService = AnalyticsSettingsService;
$injector.register("analyticsSettingsService", AnalyticsSettingsService);
