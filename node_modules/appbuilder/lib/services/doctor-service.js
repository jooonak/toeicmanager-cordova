"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const os_1 = require("os");
const helpers = require("../helpers");
class DoctorService {
    constructor($hostInfo, $sysInfo, $logger, $staticConfig) {
        this.$hostInfo = $hostInfo;
        this.$sysInfo = $sysInfo;
        this.$logger = $logger;
        this.$staticConfig = $staticConfig;
    }
    printWarnings() {
        return __awaiter(this, void 0, void 0, function* () {
            let result = false;
            let sysInfo = yield this.$sysInfo.getSysInfo(this.$staticConfig.pathToPackageJson);
            if (!sysInfo.adbVer) {
                this.$logger.warn("WARNING: adb from the Android SDK is not installed or is not configured properly. ");
                this.$logger.out("For Android-related operations, the AppBuilder CLI will use a built-in version of adb." + os_1.EOL
                    + "To avoid possible issues with the native Android emulator, Genymotion or connected" + os_1.EOL
                    + "Android devices, verify that you have installed the latest Android SDK and" + os_1.EOL
                    + "its dependencies as described in http://developer.android.com/sdk/index.html#Requirements" + os_1.EOL);
                this.printPackageManagerTip();
                result = true;
            }
            if (!sysInfo.emulatorInstalled) {
                this.$logger.warn("WARNING: The Android SDK is not installed or is not configured properly.");
                this.$logger.out("You will not be able to run your apps in the native emulator. To be able to run apps" + os_1.EOL
                    + "in the native Android emulator, verify that you have installed the latest Android SDK " + os_1.EOL
                    + "and its dependencies as described in http://developer.android.com/sdk/index.html#Requirements" + os_1.EOL);
                this.printPackageManagerTip();
                result = true;
            }
            if (!sysInfo.itunesInstalled) {
                this.$logger.warn("WARNING: iTunes is not installed.");
                this.$logger.out("You will not be able to work with iOS devices via cable connection." + os_1.EOL
                    + "To be able to work with connected iOS devices," + os_1.EOL
                    + "download and install iTunes from http://www.apple.com" + os_1.EOL);
                result = true;
            }
            if (!sysInfo.javaVer) {
                this.$logger.warn("WARNING: The Java Development Kit (JDK) is not installed or is not configured properly.");
                this.$logger.out("You will not be able to work with the Android SDK and you might not be able" + os_1.EOL
                    + "to perform some Android-related operations. To ensure that you can develop and" + os_1.EOL
                    + "test your apps for Android, verify that you have installed the JDK as" + os_1.EOL
                    + "described in http://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html (for JDK 8)" + os_1.EOL
                    + "or http://docs.oracle.com/javase/7/docs/webnotes/install/ (for JDK 7)." + os_1.EOL);
                result = true;
            }
            if (this.$hostInfo.isDarwin && (!sysInfo.monoVer || helpers.versionCompare(sysInfo.monoVer, "3.12.0") < 0)) {
                this.$logger.warn("WARNING: Mono 3.12 or later is not installed or not configured properly.");
                this.$logger.out("You will not be able to work with Android devices in the device simulator or debug on connected Android devices." + os_1.EOL
                    + "To be able to work with Android in the device simulator and debug on connected Android devices," + os_1.EOL
                    + "download and install Mono 3.12 or later from http://www.mono-project.com/download/" + os_1.EOL);
                result = true;
            }
            if (!sysInfo.gitVer) {
                this.$logger.warn("WARNING: Git is not installed or not configured properly.");
                this.$logger.out("You will not be able to create and work with Screen Builder projects." + os_1.EOL
                    + "To be able to work with Screen Builder projects, download and install Git as described" + os_1.EOL
                    + "in https://git-scm.com/downloads and add the git executable to your PATH." + os_1.EOL);
                result = true;
            }
            return result;
        });
    }
    printPackageManagerTip() {
        if (this.$hostInfo.isWindows) {
            this.$logger.out("TIP: To avoid setting up the necessary environment variables, you can use the chocolatey package manager to install the Android SDK and its dependencies." + os_1.EOL);
        }
        else if (this.$hostInfo.isDarwin) {
            this.$logger.out("TIP: To avoid setting up the necessary environment variables, you can use the Homebrew package manager to install the Android SDK and its dependencies." + os_1.EOL);
        }
    }
}
$injector.register("doctorService", DoctorService);
