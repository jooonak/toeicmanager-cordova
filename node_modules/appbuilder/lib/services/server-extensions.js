"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const serverExtensionsBaseLib = require("./extensions-service-base");
const path = require("path");
class ServerExtensionsService extends serverExtensionsBaseLib.ExtensionsServiceBase {
    constructor($logger, $httpClient, $fs, $config, $serverConfiguration, $options) {
        super(path.join($options.profileDir, "Cache"), $fs, $httpClient, $logger, $options);
        this.$config = $config;
        this.$serverConfiguration = $serverConfiguration;
    }
    prepareExtension(packageName, beforeDownloadExtensionAction) {
        return __awaiter(this, void 0, void 0, function* () {
            let cachedVersion = "0.0.0.0";
            let extensionData = {
                packageName: packageName,
                version: yield this.$serverConfiguration.assemblyVersion(),
                downloadUri: yield this.getExtensionDownloadUri(packageName)
            };
            yield this.prepareExtensionBase(extensionData, cachedVersion, { beforeDownloadAction: beforeDownloadExtensionAction });
        });
    }
    getExtensionDownloadUri(packageName) {
        return __awaiter(this, void 0, void 0, function* () {
            let serverUri = this.$config.AB_SERVER_PROTO + "://" + this.$config.AB_SERVER;
            let downloadUri;
            if (this.$config.USE_CDN_FOR_EXTENSION_DOWNLOAD) {
                let servicesExtensionsUri = serverUri + "/appbuilder/services/extensions";
                this.$logger.trace("Getting extensions from %s", servicesExtensionsUri);
                let extensions = JSON.parse((yield this.$httpClient.httpRequest(servicesExtensionsUri)).body);
                downloadUri = _.find(extensions["$values"], { Identifier: packageName }).DownloadUri;
            }
            else {
                downloadUri = serverUri + "/appbuilder/ClientBin/" + packageName + '.xap';
            }
            return downloadUri;
        });
    }
}
exports.ServerExtensionsService = ServerExtensionsService;
$injector.register("serverExtensionsService", ServerExtensionsService);
