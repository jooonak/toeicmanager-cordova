"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const semver = require("semver");
class WebViewService {
    constructor($pluginsService, $options) {
        this.$pluginsService = $pluginsService;
        this.$options = $options;
    }
    get supportedWebViews() {
        return {
            'ios': [
                { name: "Default", minSupportedVersion: "3.0.0", default: true },
                { name: "WKWebView", minSupportedVersion: "3.7.0", pluginIdentifier: "com.telerik.plugins.wkwebview", frameworkVersionCondition: `<${WebViewService.CORDOVA_VERSION_FIVE}` },
                { name: "WKWebView", minSupportedVersion: WebViewService.CORDOVA_VERSION_FIVE, pluginIdentifier: "cordova-plugin-wkwebview-engine", frameworkVersionCondition: `>=${WebViewService.CORDOVA_VERSION_FIVE}` }
            ],
            'android': [
                { name: "Default", minSupportedVersion: "3.0.0", default: true },
                { name: "Crosswalk", minSupportedVersion: "4.0.0", pluginIdentifier: "cordova-plugin-crosswalk-webview" }
            ]
        };
    }
    getWebView(platform, webViewName, frameworkVersion) {
        let webViews = this.getWebViews(platform);
        let webViewNameLowerCase = webViewName.toLowerCase();
        let webView = _.find(webViews, _webView => {
            let hasTheSameName = _webView.name.toLowerCase() === webViewNameLowerCase;
            let hasTheRequiredFrameworkVersion = true;
            if (_webView.frameworkVersionCondition) {
                hasTheRequiredFrameworkVersion = semver.satisfies(frameworkVersion, _webView.frameworkVersionCondition);
            }
            return hasTheSameName && hasTheRequiredFrameworkVersion;
        });
        return webView;
    }
    getWebViews(platform) {
        return this.supportedWebViews[platform.toLowerCase()];
    }
    getWebViewNames(platform) {
        let webViews = this.getWebViews(platform);
        return _.map(webViews, webView => webView.name.toLowerCase());
    }
    getCurrentWebViewName(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            let webViews = this.getWebViews(platform);
            let webViewsToFilter = yield Promise.all(_.map(webViews, (_webView) => __awaiter(this, void 0, void 0, function* () {
                return !_webView.default && (yield this.$pluginsService.isPluginInstalled(_webView.pluginIdentifier)) ? _webView : null;
            })));
            let webView = _(webViewsToFilter)
                .filter(w => !!w)
                .first();
            if (webView) {
                return webView.name;
            }
            return _.find(webViews, _webView => _webView.default).name;
        });
    }
    enableWebView(platform, webViewName, frameworkVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            let webView = this.getWebView(platform, webViewName, frameworkVersion);
            if (webView.default) {
                return this.enableDefaultWebView(platform);
            }
            return this.enableWebViewCore(webView);
        });
    }
    enableWebViewCore(webView) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.$pluginsService.isPluginInstalled(webView.pluginIdentifier))) {
                this.$options.default = true;
                yield this.$pluginsService.addPlugin(webView.pluginIdentifier);
            }
        });
    }
    enableDefaultWebView(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            let webViews = this.getWebViews(platform);
            let webViewsToFilter = yield Promise.all(_.map(webViews, (webView) => __awaiter(this, void 0, void 0, function* () {
                return !webView.default && (yield this.$pluginsService.isPluginInstalled(webView.pluginIdentifier)) ? webView : null;
            })));
            let filteredWebViews = _.filter(webViewsToFilter);
            yield Promise.all(_.map(filteredWebViews, (webView) => __awaiter(this, void 0, void 0, function* () { return yield this.$pluginsService.removePlugin(webView.pluginIdentifier); })));
        });
    }
}
WebViewService.CORDOVA_VERSION_FIVE = "5.0.0";
exports.WebViewService = WebViewService;
$injector.register("webViewService", WebViewService);
