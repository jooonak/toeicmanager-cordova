"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const plugins_data_1 = require("./../../plugins-data");
class CordovaPluginsService {
    constructor($project, $server, $projectConstants, $cordovaResources) {
        this.$project = $project;
        this.$server = $server;
        this.$projectConstants = $projectConstants;
        this.$cordovaResources = $cordovaResources;
        this.livePatchPlugin = {
            "Name": "Telerik AppManager LiveSync",
            "Identifier": "com.telerik.LivePatch",
            "Version": "1.0.0",
            "Description": "This plugin adds Telerik AppManager LiveSync functionality",
            "Url": "",
            "Assets": [],
            "Platforms": ["Android", "iOS", "WP8"],
            "Variables": [],
            "AndroidRequiredPermissions": ["android.permission.INTERNET"]
        };
    }
    getAvailablePlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureCordovaProject();
            return (yield this.$server.cordova.getPlugins(this.$project.projectData.FrameworkVersion)).concat([this.livePatchPlugin]);
        });
    }
    createPluginData(plugin) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$project.ensureCordovaProject();
            return [new plugins_data_1.CordovaPluginData(plugin, this.getPluginTypeByIdentifier(plugin.Identifier), this.$project, this.$projectConstants)];
        });
    }
    getPluginTypeByIdentifier(pluginIdentifier) {
        let pluginType = plugins_data_1.PluginType.AdvancedPlugin;
        let corePluginRegex = this.$cordovaResources.getCordovaMigrationData().corePluginRegex;
        let isCorePlugin = new RegExp(corePluginRegex).test(pluginIdentifier);
        if (isCorePlugin) {
            pluginType = plugins_data_1.PluginType.CorePlugin;
        }
        return pluginType;
    }
}
exports.CordovaPluginsService = CordovaPluginsService;
$injector.register("cordovaPluginsService", CordovaPluginsService);
