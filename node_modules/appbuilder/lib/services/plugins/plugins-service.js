"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const decorators_1 = require("../../common/decorators");
class PluginsService {
    constructor($frameworkProjectResolver, $loginManager, $project) {
        this.$frameworkProjectResolver = $frameworkProjectResolver;
        this.$loginManager = $loginManager;
        this.$project = $project;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).init();
        });
    }
    getAvailablePlugins(pluginsCount) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).getAvailablePlugins(pluginsCount);
        });
    }
    getInstalledPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).getInstalledPlugins();
        });
    }
    printPlugins(plugins) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).printPlugins(plugins);
        });
    }
    addPlugin(pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).addPlugin(pluginName);
        });
    }
    removePlugin(pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).removePlugin(pluginName);
        });
    }
    configurePlugin(pluginName, version, configurations) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).configurePlugin(pluginName, version, configurations);
        });
    }
    isPluginInstalled(pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).isPluginInstalled(pluginName);
        });
    }
    getPluginBasicInformation(pluginName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).getPluginBasicInformation(pluginName);
        });
    }
    findPlugins(keywords) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).findPlugins(keywords);
        });
    }
    fetch(pluginIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).fetch(pluginIdentifier);
        });
    }
    filterPlugins(plugins) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getPluginsService()).filterPlugins(plugins);
        });
    }
    getPluginsService() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.frameworkProject) {
                yield this.$loginManager.ensureLoggedIn();
                yield this.$project.ensureProject();
                this.frameworkProject = this.$frameworkProjectResolver.resolve(this.$project.projectData.Framework);
            }
            return this.frameworkProject.pluginsService;
        });
    }
}
__decorate([
    decorators_1.cache()
], PluginsService.prototype, "init", null);
__decorate([
    decorators_1.invokeInit()
], PluginsService.prototype, "getPluginsService", null);
exports.PluginsService = PluginsService;
$injector.register("pluginsService", PluginsService);
