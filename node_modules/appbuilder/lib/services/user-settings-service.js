"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const xmlMapping = require("xml-mapping");
const path = require("path");
const helpers = require("../helpers");
const user_settings_service_1 = require("../common/services/user-settings-service");
const constants_1 = require("../constants");
class ClientUserSettingsFileService {
    constructor($fs, $options) {
        this.$fs = $fs;
        this.userSettingsFile = path.join($options.profileDir, constants_1.UserSettings.LocalFileName);
    }
    get userSettingsFilePath() {
        return this.userSettingsFile;
    }
    deleteUserSettingsFile() {
        return this.$fs.deleteFile(this.userSettingsFilePath);
    }
}
exports.ClientUserSettingsFileService = ClientUserSettingsFileService;
$injector.register("clientUserSettingsFileService", ClientUserSettingsFileService);
class ClientSpecificUserSettingsService extends user_settings_service_1.UserSettingsServiceBase {
    constructor($fs, $clientUserSettingsFileService) {
        super($clientUserSettingsFileService.userSettingsFilePath, $fs);
    }
}
exports.ClientSpecificUserSettingsService = ClientSpecificUserSettingsService;
$injector.register("clientSpecificUserSettingsService", ClientSpecificUserSettingsService);
class SharedUserSettingsFileService {
    constructor($fs, $config, $options) {
        this.$fs = $fs;
        this.$config = $config;
        this.$options = $options;
        this.userSettingsFile = path.join(this.$options.profileDir, this.$config.AB_SERVER + constants_1.UserSettings.FileExtension);
    }
    get userSettingsFilePath() {
        return this.userSettingsFile;
    }
    deleteUserSettingsFile() {
        return this.$fs.deleteFile(this.userSettingsFilePath);
    }
}
exports.SharedUserSettingsFileService = SharedUserSettingsFileService;
$injector.register("sharedUserSettingsFileService", SharedUserSettingsFileService);
class SharedUserSettingsService extends user_settings_service_1.UserSettingsServiceBase {
    constructor($server, $sharedUserSettingsFileService, $loginManager, $options, $fs, $clientUserSettingsFileService) {
        super($clientUserSettingsFileService.userSettingsFilePath, $fs);
        this.$server = $server;
        this.$sharedUserSettingsFileService = $sharedUserSettingsFileService;
        this.$loginManager = $loginManager;
        this.$options = $options;
    }
    loadUserSettingsFile() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.userSettingsData) {
                this.$fs.createDirectory(this.$options.profileDir);
                if (this.$fs.exists(this.$sharedUserSettingsFileService.userSettingsFilePath)) {
                    let fileInfo = this.$fs.getFsStats(this.$sharedUserSettingsFileService.userSettingsFilePath);
                    let timeDiff = Math.abs(new Date().getTime() - fileInfo.mtime.getTime());
                    let diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
                    if (diffDays > 1) {
                        yield this.downloadUserSettings();
                    }
                    else {
                        this.readUserSettingsFile();
                    }
                }
                else {
                    yield this.downloadUserSettings();
                }
            }
        });
    }
    downloadUserSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.$server.rawSettings.getUserSettings(constants_1.UserSettings.DefaultFileName, this.$fs.createWriteStream(this.$sharedUserSettingsFileService.userSettingsFilePath));
                this.userSettingsData = xmlMapping.tojson(this.$fs.readText(this.$sharedUserSettingsFileService.userSettingsFilePath));
            }
            catch (error) {
                if (error.response && error.response.statusCode === 404) {
                    this.userSettingsData = null;
                }
                else {
                    throw error;
                }
            }
        });
    }
    getSettingValue(settingName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$loginManager.ensureLoggedIn();
            yield this.loadUserSettingsFile();
            if (!this.userSettingsData) {
                return null;
            }
            let data = this.userSettingsData[SharedUserSettingsService.SETTINGS_ROOT_TAG];
            try {
                settingName.split(".").forEach(property => { data = data[property]; });
            }
            catch (e) {
                return null;
            }
            if (data && data.$t) {
                return data.$t;
            }
            return data;
        });
    }
    readUserSettingsFile() {
        this.userSettingsData = xmlMapping.tojson(this.$fs.readText(this.$sharedUserSettingsFileService.userSettingsFilePath));
    }
    saveSetting(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            let settingObject = {};
            settingObject[key] = value;
            return this.saveSettings(settingObject);
        });
    }
    saveSettings(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$loginManager.ensureLoggedIn();
            if (Object.keys(data).length !== 0) {
                yield this.downloadUserSettings();
            }
            else {
                this.readUserSettingsFile();
            }
            this.userSettingsData = this.userSettingsData || {};
            if (!this.userSettingsData.hasOwnProperty(SharedUserSettingsService.SETTINGS_ROOT_TAG)) {
                this.userSettingsData[SharedUserSettingsService.SETTINGS_ROOT_TAG] = {};
            }
            Object.keys(data).forEach(property => {
                let newPropertyName = property + ".$t";
                data[newPropertyName] = data[property];
                delete data[property];
            });
            let convertedData = helpers.convertDottedStringToObject(data);
            helpers.mergeRecursive(this.userSettingsData[SharedUserSettingsService.SETTINGS_ROOT_TAG], convertedData);
            let xml = xmlMapping.toxml(this.userSettingsData);
            yield this.$server.rawSettings.saveUserSettings(constants_1.UserSettings.DefaultFileName, xml);
            if (Object.keys(data).length !== 0) {
                this.$fs.writeFile(this.$sharedUserSettingsFileService.userSettingsFilePath, xml);
            }
        });
    }
}
SharedUserSettingsService.SETTINGS_ROOT_TAG = "JustDevelopSettings";
exports.SharedUserSettingsService = SharedUserSettingsService;
$injector.register("sharedUserSettingsService", SharedUserSettingsService);
class UserSettingsService extends user_settings_service_1.UserSettingsServiceBase {
    constructor($sharedUserSettingsService, $clientSpecificUserSettingsService, $fs, $clientUserSettingsFileService) {
        super($clientUserSettingsFileService.userSettingsFilePath, $fs);
        this.$sharedUserSettingsService = $sharedUserSettingsService;
        this.$clientSpecificUserSettingsService = $clientSpecificUserSettingsService;
    }
    getSettingValue(settingName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (settingName === UserSettingsService.ANALYTICS_INSTALLATION_ID_PROPERTY_NAME) {
                return this.$clientSpecificUserSettingsService.getSettingValue(settingName);
            }
            return this.$sharedUserSettingsService.getSettingValue(settingName);
        });
    }
    saveSetting(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (key === UserSettingsService.ANALYTICS_INSTALLATION_ID_PROPERTY_NAME) {
                return this.$clientSpecificUserSettingsService.saveSetting(key, value);
            }
            return this.$sharedUserSettingsService.saveSetting(key, value);
        });
    }
}
UserSettingsService.ANALYTICS_INSTALLATION_ID_PROPERTY_NAME = "AnalyticsInstallationID";
exports.UserSettingsService = UserSettingsService;
$injector.register("userSettingsService", UserSettingsService);
