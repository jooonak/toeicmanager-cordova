"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class PlatformServicesRunValidator {
    constructor($errors, $hostCapabilities, $project) {
        this.$errors = $errors;
        this.$hostCapabilities = $hostCapabilities;
        this.$project = $project;
    }
    canRunApplication() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.$hostCapabilities.capabilities[process.platform].debugToolsSupported) {
                this.$errors.fail(`In this version of the Telerik AppBuilder CLI, you cannot run the device simulator on ${process.platform}. The device simulator for ${process.platform} will become available in a future release of the Telerik AppBuilder CLI.`);
            }
            yield this.$project.ensureProject();
            if (!this.$project.capabilities.simulate) {
                this.$errors.fail(`You cannot run ${this.$project.projectData.Framework} based projects in the device simulator.`);
            }
            return true;
        });
    }
}
exports.PlatformServicesRunValidator = PlatformServicesRunValidator;
