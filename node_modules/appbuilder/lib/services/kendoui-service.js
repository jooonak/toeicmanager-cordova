"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class KendoUIService {
    constructor($server) {
        this.$server = $server;
        this._packages = null;
    }
    getKendoPackages(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._packages) {
                let packages = _.filter((yield this.$server.kendo.getPackages()), p => !p.NeedPurchase);
                if (options.verified) {
                    packages = _.filter(packages, pack => _.some(pack.VersionTags, tag => tag.toLowerCase() === KendoUIService.VERIFIED_TAG));
                }
                if (options.core) {
                    packages = _.filter(packages, pack => pack.Name === KendoUIService.KENDO_CORE);
                }
                if (options.professional) {
                    packages = _.filter(packages, pack => pack.Name === KendoUIService.KENDO_PROFESSIONAL);
                }
                if (options.withReleaseNotesOnly) {
                    packages = _.filter(packages, pack => pack.HasReleaseNotes);
                }
                if (options.latest) {
                    let latestPackage = _.first(packages);
                    packages = [_(packages)
                            .filter(pack => pack.Version === latestPackage.Version)
                            .first()];
                }
                this._packages = packages;
            }
            return this._packages;
        });
    }
}
KendoUIService.VERIFIED_TAG = "verified";
KendoUIService.KENDO_CORE = "Kendo UI Core";
KendoUIService.KENDO_PROFESSIONAL = "Kendo UI Professional";
exports.KendoUIService = KendoUIService;
$injector.register("kendoUIService", KendoUIService);
