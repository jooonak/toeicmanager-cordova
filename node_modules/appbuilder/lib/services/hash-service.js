"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const util = require("util");
let crypto = require("crypto");
class HashService {
    constructor($fs, $errors) {
        this.$fs = $fs;
        this.$errors = $errors;
    }
    getFileHash(filePath, inputEncoding, hashAlgorithm, hashEncoding) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateInputParameters(filePath, inputEncoding, hashAlgorithm, hashEncoding);
            let cryptoHash = crypto.createHash(hashAlgorithm);
            let promise = new Promise((resolve, reject) => {
                let fileStr = this.$fs.createReadStream(filePath);
                fileStr.on("data", (chunk) => {
                    cryptoHash.update(chunk, inputEncoding);
                });
                fileStr.on("end", () => {
                    resolve();
                });
                fileStr.on("error", (err) => {
                    reject(err);
                });
            });
            yield promise;
            return cryptoHash.digest(hashEncoding);
        });
    }
    validateInputParameters(filePath, inputEncoding, hashAlgorithm, hashEncoding) {
        if (!this.$fs.exists(filePath)) {
            this.$errors.fail(util.format("Specified file %s does not exist.", filePath));
        }
        if (!_.includes(HashService.validInputEncodings, inputEncoding)) {
            this.$errors.fail(util.format("Specified input file encoding %s is not valid. Valid values are %s", inputEncoding, HashService.validInputEncodings));
        }
        this.validateHashAlgorithm(hashAlgorithm);
        if (!_.includes(HashService.validHashEncodings, hashEncoding)) {
            this.$errors.fail(util.format("Specified hash encoding %s is not valid. Valid values are %s", hashEncoding, HashService.validHashEncodings));
        }
    }
    validateHashAlgorithm(hashAlgorithm) {
        let hashes = crypto.getHashes();
        if (!_.includes(hashes, hashAlgorithm)) {
            this.$errors.fail(util.format("Specified hash algorithm %s is not valid. Valid algorithms are %s", hashAlgorithm, hashes));
        }
    }
}
HashService.validHashEncodings = ["hex", "binary", "base64"];
HashService.validInputEncodings = ["utf8", "ascii", "binary"];
exports.HashService = HashService;
$injector.register("hashService", HashService);
