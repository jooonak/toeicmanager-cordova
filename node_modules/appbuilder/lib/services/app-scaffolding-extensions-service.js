"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const extensions_service_base_1 = require("./extensions-service-base");
const path = require("path");
const semver = require("semver");
class AppScaffoldingExtensionsService extends extensions_service_base_1.ExtensionsServiceBase {
    constructor($childProcess, $config, $dependencyConfigService, $progressIndicator, $injector, $fs, $httpClient, $logger, $options) {
        super($options.screenBuilderCacheDir, $fs, $httpClient, $logger, $options);
        this.$childProcess = $childProcess;
        this.$config = $config;
        this.$dependencyConfigService = $dependencyConfigService;
        this.$progressIndicator = $progressIndicator;
        this.$injector = $injector;
        this.$fs = $fs;
        this.$httpClient = $httpClient;
        this.$logger = $logger;
        this.$options = $options;
    }
    get $sysInfo() {
        return this.$injector.resolve("$sysInfo");
    }
    get appScaffoldingPath() {
        return this.getExtensionPath(AppScaffoldingExtensionsService.APP_SCAFFOLDING_NAME);
    }
    prepareAppScaffolding() {
        return __awaiter(this, void 0, void 0, function* () {
            let appScaffoldingConfig = this.$dependencyConfigService.getAppScaffoldingConfig();
            appScaffoldingConfig.pathToSave = this.$options.screenBuilderCacheDir;
            let afterPrepareAction = () => __awaiter(this, void 0, void 0, function* () {
                let scaffoldingNodeModulesPath = path.join(this.appScaffoldingPath, "node_modules");
                if (this.$fs.exists(scaffoldingNodeModulesPath)) {
                    yield Promise.all(_.map(this.$fs.readDirectory(scaffoldingNodeModulesPath), (dir) => __awaiter(this, void 0, void 0, function* () {
                        yield this.npmInstall(null, path.join(scaffoldingNodeModulesPath, dir));
                    })));
                }
                yield Promise.all(_.map(["vinyl-fs@2.2.1", "gulp-decompress@1.2.0"], (dependency) => __awaiter(this, void 0, void 0, function* () { return yield this.npmInstall(dependency); })));
                let generatorBaseDependencies = require(path.join(this.appScaffoldingPath, "node_modules", "screen-builder-base-generator", "package.json")).dependencies;
                yield Promise.all(_.map(generatorBaseDependencies, (value, key) => this.npmInstall(`${key}@${value}`)));
                yield this.npmInstall();
                let userNpmVersion = yield this.$sysInfo.getNpmVersion();
                if (!userNpmVersion || !semver.valid(userNpmVersion) || semver.major(userNpmVersion) !== 3) {
                    yield this.npmDedupe();
                }
            });
            yield this.prepareDependencyExtension(AppScaffoldingExtensionsService.APP_SCAFFOLDING_NAME, appScaffoldingConfig, afterPrepareAction);
        });
    }
    prepareDependencyExtension(dependencyExtensionName, dependencyConfig, afterPrepareAction) {
        return __awaiter(this, void 0, void 0, function* () {
            let extensionVersion = this.getExtensionVersion(dependencyExtensionName);
            let cachedVersion = extensionVersion || AppScaffoldingExtensionsService.DEFAULT_CACHED_VERSION;
            let downloadUrl = this.$config.ON_PREM ? `${this.$config.AB_SERVER}/downloads/sb/generators/${dependencyExtensionName}/${dependencyConfig.version}` : `${AppScaffoldingExtensionsService.SCREEN_BUILDER_BUCKET_NAME}/v${dependencyConfig.version}/${dependencyExtensionName}.zip`;
            this.$logger.trace("prepareDependencyExtension: Download url: %s, cached version: %s", downloadUrl, cachedVersion);
            if (this.shouldUpdatePackage(cachedVersion, dependencyConfig.version)) {
                this.$logger.out("Please, wait while Screen Builder and its dependencies are being configured.");
                this.$logger.out("Preparing %s", dependencyExtensionName);
                let dependencyExtensionData = {
                    packageName: dependencyExtensionName,
                    version: dependencyConfig.version,
                    downloadUri: downloadUrl,
                    pathToSave: dependencyConfig.pathToSave
                };
                yield this.$progressIndicator.showProgressIndicator(this.prepareExtensionBase(dependencyExtensionData, cachedVersion, { afterDownloadAction: () => __awaiter(this, void 0, void 0, function* () { return yield this.$progressIndicator.showProgressIndicator(afterPrepareAction(), 100); }) }), 5000);
            }
        });
    }
    npmInstall(packageToInstall, cwd) {
        return __awaiter(this, void 0, void 0, function* () {
            packageToInstall = packageToInstall || "";
            let command = `npm install ${packageToInstall} --production`;
            return this.$childProcess.exec(command, { cwd: cwd || this.appScaffoldingPath });
        });
    }
    npmDedupe() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$childProcess.exec("npm dedupe", { cwd: this.appScaffoldingPath });
        });
    }
}
AppScaffoldingExtensionsService.APP_SCAFFOLDING_NAME = "app-scaffolding";
AppScaffoldingExtensionsService.SCREEN_BUILDER_BUCKET_NAME = "http://s3.amazonaws.com/screenbuilder-cli";
AppScaffoldingExtensionsService.DEFAULT_CACHED_VERSION = "0.0.0";
exports.AppScaffoldingExtensionsService = AppScaffoldingExtensionsService;
$injector.register("appScaffoldingExtensionsService", AppScaffoldingExtensionsService);
