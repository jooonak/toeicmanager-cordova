"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const os_1 = require("os");
class SimulatorService {
    constructor($errors, $logger, $loginManager, $projectMigrationService, $processInfo, $project, $projectSimulatorService, $serverExtensionsService, $simulatorPlatformServices, $staticConfig, $analyticsService) {
        this.$errors = $errors;
        this.$logger = $logger;
        this.$loginManager = $loginManager;
        this.$projectMigrationService = $projectMigrationService;
        this.$processInfo = $processInfo;
        this.$project = $project;
        this.$projectSimulatorService = $projectSimulatorService;
        this.$serverExtensionsService = $serverExtensionsService;
        this.$simulatorPlatformServices = $simulatorPlatformServices;
        this.$staticConfig = $staticConfig;
        this.$analyticsService = $analyticsService;
    }
    launchSimulator() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$loginManager.ensureLoggedIn();
            let simulatorPackageName = this.$simulatorPlatformServices.packageName;
            this.simulatorPath = this.$serverExtensionsService.getExtensionPath(simulatorPackageName);
            yield this.$serverExtensionsService.prepareExtension(simulatorPackageName, this.ensureSimulatorIsNotRunning.bind(this));
            this.$project.ensureAllPlatformAssets();
            yield this.$projectMigrationService.migrateTypeScriptProject();
            return this.runSimulator(simulatorPackageName);
        });
    }
    ensureSimulatorIsNotRunning() {
        return __awaiter(this, void 0, void 0, function* () {
            this.$logger.info();
            let isRunning = yield this.$processInfo.isRunning(this.$simulatorPlatformServices.executableName);
            if (isRunning) {
                this.$errors.failWithoutHelp("AppBuilder Simulator is currently running and cannot be updated." + os_1.EOL +
                    "Close it and run $ appbuilder simulate again.");
            }
        });
    }
    runSimulator(simulatorPackageName) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$logger.info("Starting simulator...");
            let simulatorParams = [
                "--path", this.$project.getProjectDir(),
                "--assemblypaths", this.simulatorPath,
                "--analyticsaccountcode", this.$staticConfig.ANALYTICS_API_KEY
            ];
            if (yield this.$analyticsService.isEnabled(this.$staticConfig.TRACK_FEATURE_USAGE_SETTING_NAME)) {
                simulatorParams.push("--trackfeatureusage");
            }
            if (yield this.$analyticsService.isEnabled(this.$staticConfig.ERROR_REPORT_SETTING_NAME)) {
                simulatorParams.push("--trackexceptions");
            }
            simulatorParams = simulatorParams.concat(yield this.$projectSimulatorService.getSimulatorParams(simulatorPackageName));
            this.$simulatorPlatformServices.runApplication(this.simulatorPath, simulatorParams);
        });
    }
}
exports.SimulatorService = SimulatorService;
$injector.register("simulatorService", SimulatorService);
