"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const helpers = require("../../helpers");
let gaze = require("gaze");
class WinDebuggerService {
    constructor($sharedUserSettingsFileService, $sharedUserSettingsService, $errors, $dispatcher, $childProcess, $hostInfo) {
        this.$sharedUserSettingsFileService = $sharedUserSettingsFileService;
        this.$sharedUserSettingsService = $sharedUserSettingsService;
        this.$errors = $errors;
        this.$dispatcher = $dispatcher;
        this.$childProcess = $childProcess;
        this.$hostInfo = $hostInfo;
    }
    get packageName() {
        return WinDebuggerService.PACKAGE_NAME_WIN;
    }
    get executableName() {
        return WinDebuggerService.EXECUTABLE_NAME_WIN;
    }
    runApplication(applicationPath, applicationParams) {
        this.startWatchingUserSettingsFile();
        let debuggerBinary = path.join(applicationPath, WinDebuggerService.EXECUTABLE_NAME_WIN);
        let childProcess = this.$childProcess.spawn(debuggerBinary, applicationParams);
        this.waitDebuggerExit(childProcess);
    }
    canRunApplication() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$hostInfo.isDotNet40Installed("Unable to start the debug tool. Verify that you have installed .NET 4.0 or later and try again.");
        });
    }
    startWatchingUserSettingsFile() {
        let _this = this;
        gaze(this.$sharedUserSettingsFileService.userSettingsFilePath, function (err, watchr) {
            if (err) {
                _this.$errors.fail(err.toString());
            }
            this.on("changed", (filePath) => {
                _this.$dispatcher.dispatch(() => _this.$sharedUserSettingsService.saveSettings({}));
            });
        });
    }
    waitDebuggerExit(childProcess) {
        childProcess.stderr.pipe(process.stderr);
        childProcess.stdin.on("end", () => process.exit());
        helpers.exitOnStdinEnd();
        this.$dispatcher.run();
    }
}
WinDebuggerService.PACKAGE_NAME_WIN = "Telerik.BlackDragon.Client.Mobile.Tools.Package";
WinDebuggerService.EXECUTABLE_NAME_WIN = "Debugger.Windows.exe";
exports.WinDebuggerService = WinDebuggerService;
$injector.register("winDebuggerService", WinDebuggerService);
