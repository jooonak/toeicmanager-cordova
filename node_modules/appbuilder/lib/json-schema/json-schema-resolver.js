"use strict";
class JsonSchemaResolver {
    constructor(schemas, $errors) {
        this.schemas = schemas;
        this.$errors = $errors;
        this.schemasCache = Object.create(null);
    }
    getSchema(schemaId) {
        if (!this.schemasCache[schemaId]) {
            this.schemasCache[schemaId] = this.findSchema(schemaId);
            if (!this.schemasCache[schemaId]) {
                this.$errors.fail("Unable to find schema with id %s.", schemaId);
            }
            let extendsProperty = this.schemasCache[schemaId].extends;
            if (extendsProperty) {
                this.schemasCache[schemaId].extends = {};
                this.schemasCache[schemaId].extends.properties = Object.create(null);
                this.buildValidationSchema(extendsProperty, schemaId);
            }
        }
        return this.schemasCache[schemaId];
    }
    buildValidationSchema(extendsProperty, schemaId) {
        _.each(extendsProperty, (ext) => {
            let refSchema = this.findSchema(ext.$ref);
            if (refSchema && refSchema.properties) {
                _.each(_.keys(refSchema.properties), (propertyName) => {
                    if (!this.schemasCache[schemaId].extends.properties[propertyName]) {
                        this.schemasCache[schemaId].extends.properties[propertyName] = refSchema.properties[propertyName];
                    }
                });
            }
            if (refSchema.extends) {
                this.buildValidationSchema(refSchema.extends, schemaId);
            }
        });
    }
    findSchema(schemaId) {
        return _.find(this.schemas, (s) => s.id === schemaId);
    }
}
exports.JsonSchemaResolver = JsonSchemaResolver;
$injector.register("jsonSchemaResolver", JsonSchemaResolver);
