"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
class ResourceDownloader {
    constructor($config, $cordovaResources, $fs, $httpClient, $logger, $mobileHelper, $projectConstants, $resources, $server, $injector, $staticConfig) {
        this.$config = $config;
        this.$cordovaResources = $cordovaResources;
        this.$fs = $fs;
        this.$httpClient = $httpClient;
        this.$logger = $logger;
        this.$mobileHelper = $mobileHelper;
        this.$projectConstants = $projectConstants;
        this.$resources = $resources;
        this.$server = $server;
        this.$injector = $injector;
        this.$staticConfig = $staticConfig;
        this.imageDefinitionsResourcesPath = `http://${this.$config.AB_SERVER}/appbuilder/Resources/${this.$projectConstants.IMAGE_DEFINITIONS_FILE_NAME}`;
    }
    get $cordovaMigrationService() {
        return this.$injector.resolve("cordovaMigrationService");
    }
    downloadCordovaJsFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            let cordovaVersions = this.$cordovaMigrationService.getSupportedVersions();
            let platforms = this.$mobileHelper.platformNames;
            for (let version of cordovaVersions) {
                for (let platform of platforms) {
                    let targetFilePath = this.$cordovaResources.buildCordovaJsFilePath(version, platform);
                    this.$fs.createDirectory(path.dirname(targetFilePath));
                    let targetFile = this.$fs.createWriteStream(targetFilePath);
                    yield this.$server.cordova.getJs(version, platform, targetFile);
                }
            }
        });
    }
    downloadResourceFromServer(remotePath, targetPath) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$fs.writeFile(targetPath, "");
            let file = this.$fs.createWriteStream(targetPath);
            let fileEnd = this.$fs.futureFromEvent(file, "finish");
            this.$logger.trace(`Downloading resource from server. Remote path is: '${remotePath}'. Target path is: '${targetPath}'.`);
            yield this.$httpClient.httpRequest({ url: remotePath, pipeTo: file });
            yield fileEnd;
        });
    }
    downloadImageDefinitions() {
        return __awaiter(this, void 0, void 0, function* () {
            let targetPath = path.join(this.$staticConfig.APP_RESOURCES_DIR_NAME, this.$projectConstants.IMAGE_DEFINITIONS_FILE_NAME);
            return this.downloadResourceFromServer(this.imageDefinitionsResourcesPath, this.$resources.resolvePath(targetPath));
        });
    }
}
$injector.register("resourceDownloader", ResourceDownloader);
