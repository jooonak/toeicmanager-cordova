"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const shelljs = require("shelljs");
const xmlMapping = require("xml-mapping");
const os_1 = require("os");
class IonicProjectTransformator {
    constructor($fs, $projectConstants, $devicePlatformsConstants, $analyticsService, $logger, $injector) {
        this.$fs = $fs;
        this.$projectConstants = $projectConstants;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$analyticsService = $analyticsService;
        this.$logger = $logger;
        this.$injector = $injector;
        this.supportedScreensFolderNames = this.createSupportedScreensFoldernames();
    }
    get $project() {
        if (!this._project) {
            this._project = this.$injector.resolve("project");
        }
        return this._project;
    }
    get $pluginsService() {
        if (!this._pluginsService) {
            this._pluginsService = this.$injector.resolve("pluginsService");
        }
        return this._pluginsService;
    }
    get appbuilderProjectFiles() {
        if (!this._appbuilderProjectFiles) {
            this._appbuilderProjectFiles = [
                this.$projectConstants.PROJECT_FILE,
                this.$projectConstants.PROJECT_IGNORE_FILE,
                this.$projectConstants.RELEASE_PROJECT_FILE_NAME,
                this.$projectConstants.DEBUG_PROJECT_FILE_NAME
            ];
            _.each([this.$devicePlatformsConstants.Android.toLowerCase(),
                this.$devicePlatformsConstants.iOS.toLowerCase(),
                this.$devicePlatformsConstants.WP8.toLowerCase()], (platformName) => {
                this._appbuilderProjectFiles.push(`cordova.${platformName}.js`);
            });
        }
        return this._appbuilderProjectFiles;
    }
    get ionicResourcesDirectory() {
        if (!this._ionicResourcesDirectory) {
            this._ionicResourcesDirectory = path.join(this.$project.getProjectDir(), "resources");
        }
        return this._ionicResourcesDirectory;
    }
    get ionicConfigXml() {
        if (!this._ionicConfigXml) {
            const configXmlPath = path.join(this.$project.getProjectDir(), IonicProjectTransformator.CONFIG_XML_FILE_NAME);
            this._ionicConfigXml = xmlMapping.tojson(this.$fs.readText(configXmlPath));
        }
        return this._ionicConfigXml;
    }
    transformToAppBuilderProject(createBackup) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$analyticsService.track("Migrate from Ionic", "true");
            if (createBackup) {
                this.backupCurrentProject();
                this.addIonicBackupFolderToAbIgnoreFile();
            }
            this.createReroutingIndexHtml();
            this.cloneResources();
            yield this.deleteEnabledPlugins();
            this.deleteAssortedFilesAndDirectories();
        });
    }
    cloneResources() {
        if (!this.$fs.exists(this.ionicResourcesDirectory)) {
            return;
        }
        let appBuilderResourcesDirectory = path.join(this.$project.getProjectDir(), "App_Resources");
        if (!this.$fs.exists(appBuilderResourcesDirectory)) {
            this.$fs.createDirectory(appBuilderResourcesDirectory);
        }
        this.cloneConfigXml(appBuilderResourcesDirectory);
        this.cloneResourcesCore(this.ionicResourcesDirectory, appBuilderResourcesDirectory, this.$devicePlatformsConstants.Android.toLowerCase(), this.copyAndroidResources);
        this.cloneResourcesCore(this.ionicResourcesDirectory, appBuilderResourcesDirectory, this.$devicePlatformsConstants.iOS.toLowerCase(), this.copyResources);
        this.cloneResourcesCore(this.ionicResourcesDirectory, appBuilderResourcesDirectory, this.$devicePlatformsConstants.WP8.toLowerCase(), this.copyWindowsPhoneResources);
    }
    cloneConfigXml(appBuilderResourcesDirectory) {
        if (_.isArray(this.ionicConfigXml.widget.platform)) {
            _.each(this.ionicConfigXml.widget.platform, (platform) => {
                this.cloneConfigXmlCore(appBuilderResourcesDirectory, platform);
            });
        }
        else {
            this.cloneConfigXmlCore(appBuilderResourcesDirectory, this.ionicConfigXml.widget.platform);
        }
    }
    cloneConfigXmlCore(appBuilderResourcesDirectory, platform) {
        if (!platform) {
            return;
        }
        let appBuilderPlatformResourcesDirectory = path.join(appBuilderResourcesDirectory, this.$projectConstants.APPBUILDER_PROJECT_PLATFORMS_NAMES[platform.name]);
        let platformConfigXml = {};
        platformConfigXml.widget = this.ionicConfigXml.widget;
        platformConfigXml.widget.platform = {};
        platformConfigXml.widget.platform.name = platform.name;
        let platformConfigXmlDestinationDirectory = platform.name === this.$devicePlatformsConstants.Android.toLowerCase() ? path.join(appBuilderPlatformResourcesDirectory, IonicProjectTransformator.ANDROID_XML_FOLDER_NAME) : appBuilderPlatformResourcesDirectory;
        platformConfigXml.widget.platform.icon = this.changeXmlResourcesSources("icon", platform, appBuilderResourcesDirectory, platformConfigXmlDestinationDirectory, appBuilderPlatformResourcesDirectory);
        platformConfigXml.widget.platform.splash = this.changeXmlResourcesSources("splash", platform, appBuilderResourcesDirectory, platformConfigXmlDestinationDirectory, appBuilderPlatformResourcesDirectory);
        this.$fs.writeFile(path.join(platformConfigXmlDestinationDirectory, IonicProjectTransformator.CONFIG_XML_FILE_NAME), xmlMapping.toxml(platformConfigXml));
    }
    changeXmlResourcesSources(resourceType, platform, appBuilderResourcesDirectory, platformConfigXmlDestinationDirectory, appBuilderPlatformResourcesDirectory) {
        let result = [];
        let platformResource = platform[resourceType];
        if (_.isArray(platformResource)) {
            _.each(platformResource, (resourceTypeItem) => {
                if (resourceTypeItem) {
                    let appBuilderResource = this.createNewResourceItem(resourceType, appBuilderResourcesDirectory, platformConfigXmlDestinationDirectory, appBuilderPlatformResourcesDirectory, resourceTypeItem, platform.name);
                    result.push(appBuilderResource);
                }
            });
        }
        else {
            if (platformResource) {
                let appBuilderResource = this.createNewResourceItem(resourceType, appBuilderResourcesDirectory, platformConfigXmlDestinationDirectory, appBuilderPlatformResourcesDirectory, platformResource, platform.name);
                result.push(appBuilderResource);
            }
        }
        return result;
    }
    createNewResourceItem(resourceType, appBuilderResourcesDirectory, platformConfigXmlDestinationDirectory, appBuilderPlatformResourcesDirectory, resource, platformName) {
        let iconSourceFolder = resource.src;
        let resourceName = _.last(iconSourceFolder.indexOf("\\") >= 0 ? iconSourceFolder.split("\\") : iconSourceFolder.split("/"));
        if (platformName === this.$devicePlatformsConstants.WP8.toLowerCase() && resourceType === "splash") {
            resourceName = resourceName.replace(IonicProjectTransformator.WINDOWS_PHONE_IONIC_SPLASH_SCREEN_FORMAT, IonicProjectTransformator.WINDOWS_PHONE_SUPPORTED_SPLASH_SCREEN_FORMAT);
        }
        if (platformName === this.$devicePlatformsConstants.Android.toLowerCase()) {
            platformConfigXmlDestinationDirectory = path.join(appBuilderResourcesDirectory, this.$projectConstants.APPBUILDER_PROJECT_PLATFORMS_NAMES[platformName], IonicProjectTransformator.ANDROID_XML_FOLDER_NAME);
            let androidResourceInformation = resourceName.split(`-${resource.density}-`);
            let androidActualResourceName = _.last(androidResourceInformation);
            let androidResourceType = _.first(androidResourceInformation);
            resource.src = path.relative(path.join(platformConfigXmlDestinationDirectory), path.join(appBuilderPlatformResourcesDirectory, `${androidResourceType}-${resource.density}`, androidActualResourceName));
        }
        else {
            resource.src = resourceName;
        }
        return resource;
    }
    cloneResourcesCore(projectDir, appBuilderResourcesDirectory, platformKeyName, cloneFunction) {
        let ionicPlatformName = this.$projectConstants.IONIC_PROJECT_PLATFORMS_NAMES[platformKeyName];
        let appBuilderPlatformName = this.$projectConstants.APPBUILDER_PROJECT_PLATFORMS_NAMES[platformKeyName];
        let ionicPlatformResourcesDirectory = path.join(this.ionicResourcesDirectory, ionicPlatformName);
        if (!this.checkIfPlatformIsAddedToProject(this.ionicResourcesDirectory, ionicPlatformName) ||
            !this.$fs.getFsStats(ionicPlatformResourcesDirectory).isDirectory()) {
            return;
        }
        let ionicPlatformResources = this.$fs.readDirectory(ionicPlatformResourcesDirectory);
        let appbuilderPlatformResourcesDirectory = path.join(appBuilderResourcesDirectory, appBuilderPlatformName);
        if (!this.$fs.exists(appbuilderPlatformResourcesDirectory)) {
            this.$fs.createDirectory(appbuilderPlatformResourcesDirectory);
        }
        _.each(ionicPlatformResources, (resourceName) => {
            let resourceDirectory = path.join(ionicPlatformResourcesDirectory, resourceName);
            if (!this.$fs.getFsStats(resourceDirectory).isDirectory()) {
                return;
            }
            let resources = this.$fs.readDirectory(resourceDirectory);
            _.each(resources, (ionicResourceName) => {
                cloneFunction.apply(this, [resourceDirectory, appbuilderPlatformResourcesDirectory, ionicResourceName, resourceName]);
            });
        });
    }
    copyWindowsPhoneResources(resourceDirectory, appBuilderWindowsPhoneResourcesDirectory) {
        if (!this.$fs.getFsStats(resourceDirectory).isDirectory()) {
            return;
        }
        let allResources = this.$fs.readDirectory(resourceDirectory);
        let ionicWindowsPhoneConfig;
        if (_.isArray(this.ionicConfigXml.widget.platform)) {
            ionicWindowsPhoneConfig = _.filter(this.ionicConfigXml.widget.platform, (platform) => platform.name === this.$devicePlatformsConstants.WP8.toLowerCase())[0];
        }
        else {
            ionicWindowsPhoneConfig = this.ionicConfigXml.widget.platform.name === this.$devicePlatformsConstants.WP8.toLowerCase() ? this.ionicConfigXml.widget.platform : null;
        }
        if (ionicWindowsPhoneConfig) {
            _.each(allResources, (item) => {
                let resourceItemSourceDirectory = path.join(resourceDirectory, item);
                let resourceDestinationDirectory = path.join(appBuilderWindowsPhoneResourcesDirectory, item);
                if (this.$fs.getFsStats(resourceItemSourceDirectory).isFile()) {
                    let itemNameWithoutExtension = item.substring(0, item.lastIndexOf("."));
                    if (_.isArray(ionicWindowsPhoneConfig.splash)) {
                        if (_.some(ionicWindowsPhoneConfig.splash, (splash) => splash.src.indexOf(itemNameWithoutExtension) >= 0)) {
                            resourceDestinationDirectory = resourceDestinationDirectory.replace(IonicProjectTransformator.WINDOWS_PHONE_IONIC_SPLASH_SCREEN_FORMAT, IonicProjectTransformator.WINDOWS_PHONE_SUPPORTED_SPLASH_SCREEN_FORMAT);
                        }
                    }
                    else {
                        if (ionicWindowsPhoneConfig.splash.src.indexOf(itemNameWithoutExtension) >= 0) {
                            resourceDestinationDirectory = resourceDestinationDirectory.replace(IonicProjectTransformator.WINDOWS_PHONE_IONIC_SPLASH_SCREEN_FORMAT, IonicProjectTransformator.WINDOWS_PHONE_SUPPORTED_SPLASH_SCREEN_FORMAT);
                        }
                    }
                    this.$fs.copyFile(path.join(resourceDirectory, item), resourceDestinationDirectory);
                }
                else {
                    shelljs.cp("-R", resourceItemSourceDirectory, resourceDestinationDirectory);
                }
            });
        }
        else {
            this.copyResources(resourceDirectory, appBuilderWindowsPhoneResourcesDirectory);
        }
    }
    copyResources(resourceDirectory, appBuilderPlatformResourcesDirectory) {
        let resourceDirectoryContentPath = `${resourceDirectory}/*`;
        shelljs.cp("-rf", resourceDirectoryContentPath, appBuilderPlatformResourcesDirectory);
    }
    copyAndroidResources(resourceDirectory, appBuilderAndroidResourcesDirectory, ionicResourceName) {
        _.each(this.supportedScreensFolderNames, (folderName) => {
            if (ionicResourceName.indexOf(folderName) >= 0) {
                let resourceName = ionicResourceName.split(`${folderName}-`)[1];
                let resourceDestinationDirectory = path.join(appBuilderAndroidResourcesDirectory, folderName, resourceName);
                this.$fs.copyFile(path.join(resourceDirectory, ionicResourceName), resourceDestinationDirectory);
                return false;
            }
        });
    }
    checkIfPlatformIsAddedToProject(resourcesDirectory, platformName) {
        return this.$fs.exists(path.join(resourcesDirectory, platformName));
    }
    backupCurrentProject() {
        let ionicProjectBackupDir = path.join(this.$project.getProjectDir(), IonicProjectTransformator.IONIC_PROJECT_BACKUP_FOLDER_NAME);
        this.$logger.warn(`Creating backup in ${ionicProjectBackupDir}. This could take more than one minute. Please be patient.`);
        let allProjectItems = _.map(shelljs.ls("-A", this.$project.getProjectDir()), f => f);
        if (this.$fs.exists(ionicProjectBackupDir)) {
            this.$fs.deleteDirectory(ionicProjectBackupDir);
        }
        this.$fs.createDirectory(ionicProjectBackupDir);
        _.each(allProjectItems, (item) => {
            if (item.indexOf(IonicProjectTransformator.IONIC_PROJECT_BACKUP_FOLDER_NAME) < 0) {
                let itemSourceDirectory = path.join(this.$project.getProjectDir(), item);
                let itemDestinationDirectory = path.join(ionicProjectBackupDir, item);
                if (this.$fs.getFsStats(itemSourceDirectory).isDirectory()) {
                    shelljs.cp("-R", `${itemSourceDirectory}/`, `${itemDestinationDirectory}`);
                }
                else if (!this.isAppBuilderProjectFile(itemSourceDirectory)) {
                    this.$fs.copyFile(itemSourceDirectory, itemDestinationDirectory);
                }
            }
        });
    }
    createReroutingIndexHtml() {
        const indexHtmlContent = '<html><head><meta http-equiv="refresh" content="0; url=www/index.html" /></head></html>';
        let indexHtml = path.join(this.$project.getProjectDir(), "index.html");
        this.$fs.writeFile(indexHtml, indexHtmlContent);
    }
    deleteEnabledPlugins() {
        return __awaiter(this, void 0, void 0, function* () {
            let corePlugins = (yield this.$pluginsService.getInstalledPlugins()).map(pl => pl.data.Name);
            let pluginsDir = path.join(this.$project.getProjectDir(), "plugins");
            if (this.$fs.exists(pluginsDir)) {
                (this.$fs.readDirectory(pluginsDir) || [])
                    .filter(pl => _.includes(corePlugins, pl))
                    .forEach(pl => this.$fs.deleteDirectory(path.join(pluginsDir, pl)));
            }
        });
    }
    deleteAssortedFilesAndDirectories() {
        let projectDir = this.$project.getProjectDir();
        let assortedFilesAndDirectories = ["platforms", "hooks", "resources", ".editorconfig", "ionic.project", "package.json"];
        let itemsToRemove = _.map(assortedFilesAndDirectories, (item) => path.join(projectDir, item));
        try {
            this.$fs.rm.apply(this.$fs, ["-rf"].concat(itemsToRemove));
        }
        catch (e) {
            this.$logger.trace(`Deleting unexisting file from Ionic project: ${e}`);
        }
    }
    createSupportedScreensFoldernames() {
        let result = [];
        result = result.concat(this.mergeFolderNames(IonicProjectTransformator.RESOURCE_TYPES, IonicProjectTransformator.SUPPORTED_SCREEN_SIZES));
        result = result.concat(this.mergeFolderNames(IonicProjectTransformator.XML_RESOURCE_TYPES, IonicProjectTransformator.SUPPORTED_LAYOUT_SIZES));
        return result;
    }
    mergeFolderNames(resourceTypes, screenSizes) {
        let folderNames = [];
        _.each(resourceTypes, (resourceType) => {
            _.each(IonicProjectTransformator.SCREEN_ORIENTATIONS, (screenOriantation) => {
                _.each(screenSizes, (screenSize) => {
                    let folderName = resourceType;
                    if (screenOriantation.length) {
                        folderName += `-${screenOriantation}`;
                    }
                    folderName += `-${screenSize}`;
                    folderNames.push(folderName);
                });
            });
        });
        return folderNames;
    }
    isAppBuilderProjectFile(file) {
        let isAppBuilderFile = false;
        _.each(this.appbuilderProjectFiles, (appBuilderFileName) => {
            if (file.indexOf(appBuilderFileName) >= 0) {
                isAppBuilderFile = true;
                return false;
            }
        });
        return isAppBuilderFile;
    }
    addIonicBackupFolderToAbIgnoreFile() {
        let abIgnoreFilePath = path.join(this.$project.projectDir, this.$projectConstants.PROJECT_IGNORE_FILE);
        let ignoreText = `${os_1.EOL}# Ionic backup folder${os_1.EOL}${IonicProjectTransformator.IONIC_PROJECT_BACKUP_FOLDER_NAME}${os_1.EOL}`;
        this.$fs.appendFile(abIgnoreFilePath, ignoreText);
    }
}
IonicProjectTransformator.IONIC_PROJECT_BACKUP_FOLDER_NAME = "Ionic_Backup";
IonicProjectTransformator.CONFIG_XML_FILE_NAME = "config.xml";
IonicProjectTransformator.ANDROID_XML_FOLDER_NAME = "xml";
IonicProjectTransformator.SUPPORTED_SCREEN_SIZES = ["ldpi", "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"];
IonicProjectTransformator.SUPPORTED_LAYOUT_SIZES = ["small", "normal", "large", "xlarge"];
IonicProjectTransformator.RESOURCE_TYPES = ["drawable", "mipmap"];
IonicProjectTransformator.XML_RESOURCE_TYPES = ["layout"];
IonicProjectTransformator.SCREEN_ORIENTATIONS = ["", "land", "port"];
IonicProjectTransformator.WINDOWS_PHONE_SUPPORTED_SPLASH_SCREEN_FORMAT = ".jpg";
IonicProjectTransformator.WINDOWS_PHONE_IONIC_SPLASH_SCREEN_FORMAT = ".png";
exports.IonicProjectTransformator = IonicProjectTransformator;
$injector.register("ionicProjectTransformator", IonicProjectTransformator);
