"use strict";
const querystring = require("querystring");
class AuthenticationService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    login(simpleWebToken) {
        return this.$serviceProxy.call('Login', 'POST', ['api', 'authentication'].join('/'), 'application/json', [{ name: 'simpleWebToken', value: JSON.stringify(simpleWebToken), contentType: 'application/json' }], null);
    }
    logout() {
        return this.$serviceProxy.call('Logout', 'LOGOUT', ['api', 'authentication'].join('/'), null, null, null);
    }
    getLoggedInUser() {
        return this.$serviceProxy.call('GetLoggedInUser', 'GET', ['api', 'authentication', 'currentUser'].join('/'), 'application/json', null, null);
    }
    getTenants() {
        return this.$serviceProxy.call('GetTenants', 'GET', ['api', 'authentication', 'tenants'].join('/'), 'application/json', null, null);
    }
    getAccountsFromTenant() {
        return this.$serviceProxy.call('GetAccountsFromTenant', 'GET', ['api', 'authentication', 'accountsFromTenant'].join('/'), 'application/json', null, null);
    }
    setActiveTenant(tenantId) {
        return this.$serviceProxy.call('SetActiveTenant', 'PATCH', ['api', 'authentication', 'tenants', encodeURI(tenantId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    agreeToEula() {
        return this.$serviceProxy.call('AgreeToEula', 'POST', ['api', 'authentication', 'eula'].join('/'), null, null, null);
    }
}
exports.AuthenticationService = AuthenticationService;
class CordovaService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getLiveSyncToken(solutionName, projectName) {
        return this.$serviceProxy.call('GetLiveSyncToken', 'GET', ['api', 'cordova', 'liveSyncToken', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getLiveSyncUrl(longUrl) {
        return this.$serviceProxy.call('GetLiveSyncUrl', 'GET', ['api', 'cordova', 'liveSyncUrl'].join('/') + '?' + querystring.stringify({ 'longUrl': longUrl }), 'application/json', null, null);
    }
    getPlugins(version) {
        return this.$serviceProxy.call('GetPlugins', 'GET', ['api', 'cordova', encodeURI(version.replace(/\\/g, '/')), 'plugins'].join('/'), 'application/json', null, null);
    }
    getJs(version, platform, $resultStream) {
        return this.$serviceProxy.call('GetJs', 'GET', ['api', 'cordova', encodeURI(version.replace(/\\/g, '/')), encodeURI(platform.replace(/\\/g, '/')), 'js'].join('/'), 'application/octet-stream', null, $resultStream);
    }
    getMigrationData() {
        return this.$serviceProxy.call('GetMigrationData', 'GET', ['api', 'cordova', 'migration-data'].join('/'), 'application/json', null, null);
    }
    getPluginsPackage($resultStream) {
        return this.$serviceProxy.call('GetPluginsPackage', 'GET', ['api', 'cordova', 'plugins', 'package'].join('/'), 'application/octet-stream', null, $resultStream);
    }
    getCordovaVersions() {
        return this.$serviceProxy.call('GetCordovaVersions', 'GET', ['api', 'cordova', 'versions'].join('/'), 'application/json', null, null);
    }
    getCordovaFrameworkVersions() {
        return this.$serviceProxy.call('GetCordovaFrameworkVersions', 'GET', ['api', 'cordova', 'frameworkVersions'].join('/'), 'application/json', null, null);
    }
    getMarketplacePluginData(pluginId, version) {
        return this.$serviceProxy.call('GetMarketplacePluginData', 'GET', ['api', 'cordova', 'marketplace', encodeURI(pluginId.replace(/\\/g, '/')), encodeURI(version.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getMarketplacePluginsData(framework) {
        return this.$serviceProxy.call('GetMarketplacePluginsData', 'GET', ['api', 'cordova', 'marketplace-directory', encodeURI(framework.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getMarketplacePluginVersionsData() {
        return this.$serviceProxy.call('GetMarketplacePluginVersionsData', 'GET', ['api', 'cordova', 'marketplace-plugins'].join('/'), 'application/json', null, null);
    }
    getCurrentPlatforms(solutionName, projectName) {
        return this.$serviceProxy.call('GetCurrentPlatforms', 'GET', ['api', 'cordova', 'platforms', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    addPlatform(platform, solutionName, projectName) {
        return this.$serviceProxy.call('AddPlatform', 'POST', ['api', 'cordova', 'platforms', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(platform.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    migrate(solutionName, projectName, targetVersion) {
        return this.$serviceProxy.call('Migrate', 'POST', ['api', 'cordova', 'migrate', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'targetVersion': targetVersion }), 'application/json', null, null);
    }
    getProjectCordovaPlugins(solutionName, projectName) {
        return this.$serviceProxy.call('GetProjectCordovaPlugins', 'GET', ['api', 'cordova', 'plugins', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getCordovaPluginVariables(solutionName, projectName) {
        return this.$serviceProxy.call('GetCordovaPluginVariables', 'GET', ['api', 'cordova', 'plugins', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), 'variables'].join('/'), 'application/json', null, null);
    }
    setCordovaPluginVariable(solutionName, projectName, pluginId, variableName, configuration, value) {
        return this.$serviceProxy.call('SetCordovaPluginVariable', 'POST', ['api', 'cordova', 'plugins', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), 'variables', encodeURI(pluginId.replace(/\\/g, '/')), encodeURI(variableName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), null, [{ name: 'value', value: JSON.stringify(value), contentType: 'application/json' }], null);
    }
}
exports.CordovaService = CordovaService;
class AppsCordovaService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getLiveSyncToken(appId, projectName) {
        return this.$serviceProxy.call('GetLiveSyncToken', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'liveSyncToken'].join('/'), 'application/json', null, null);
    }
    getCurrentPlatforms(appId, projectName) {
        return this.$serviceProxy.call('GetCurrentPlatforms', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'platforms'].join('/'), 'application/json', null, null);
    }
    addPlatform(appId, projectName, platform) {
        return this.$serviceProxy.call('AddPlatform', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'platforms', encodeURI(platform.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    migrate(appId, projectName, targetVersion) {
        return this.$serviceProxy.call('Migrate', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'migrate'].join('/') + '?' + querystring.stringify({ 'targetVersion': targetVersion }), 'application/json', null, null);
    }
    getProjectCordovaPlugins(appId, projectName) {
        return this.$serviceProxy.call('GetProjectCordovaPlugins', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'plugins'].join('/'), 'application/json', null, null);
    }
    getCordovaPluginVariables(appId, projectName) {
        return this.$serviceProxy.call('GetCordovaPluginVariables', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'plugins', 'variables'].join('/'), 'application/json', null, null);
    }
    setCordovaPluginVariable(appId, projectName, pluginId, variableName, configuration, value) {
        return this.$serviceProxy.call('SetCordovaPluginVariable', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cordova', encodeURI(projectName.replace(/\\/g, '/')), 'plugins', 'variables', encodeURI(pluginId.replace(/\\/g, '/')), encodeURI(variableName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), null, [{ name: 'value', value: JSON.stringify(value), contentType: 'application/json' }], null);
    }
}
exports.AppsCordovaService = AppsCordovaService;
class AccountsIdentityStoreService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getIdentities(accountId) {
        return this.$serviceProxy.call('GetIdentities', 'GET', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'identities'].join('/'), 'application/json', null, null);
    }
    generateSelfSignedIdentity(accountId, generationData) {
        return this.$serviceProxy.call('GenerateSelfSignedIdentity', 'GENERATE', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'identities'].join('/'), 'application/json', [{ name: 'generationData', value: JSON.stringify(generationData), contentType: 'application/json' }], null);
    }
    importIdentity(accountId, importType, password, stream) {
        return this.$serviceProxy.call('ImportIdentity', 'POST', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'identities'].join('/') + '?' + querystring.stringify({ 'importType': importType, 'password': password }), 'application/json', [{ name: 'stream', value: stream, contentType: 'application/octet-stream' }], null);
    }
    removeIdentity(accountId, identityAlias) {
        return this.$serviceProxy.call('RemoveIdentity', 'DELETE', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'identities'].join('/') + '?' + querystring.stringify({ 'identityAlias': identityAlias }), null, null, null);
    }
    getIdentity(accountId, identityAlias, password, $resultStream) {
        return this.$serviceProxy.call('GetIdentity', 'GET', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'identities', 'export'].join('/') + '?' + querystring.stringify({ 'identityAlias': identityAlias, 'password': password }), 'application/octet-stream', null, $resultStream);
    }
    getCertificateRequests(accountId) {
        return this.$serviceProxy.call('GetCertificateRequests', 'GET', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'certificationRequests'].join('/'), 'application/json', null, null);
    }
    generateCertificationRequest(accountId, subjectNameValues) {
        return this.$serviceProxy.call('GenerateCertificationRequest', 'POST', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'certificationRequests'].join('/'), 'application/json', [{ name: 'subjectNameValues', value: JSON.stringify(subjectNameValues), contentType: 'application/json' }], null);
    }
    removeCertificateRequest(accountId, uniqueName) {
        return this.$serviceProxy.call('RemoveCertificateRequest', 'DELETE', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'certificationRequests'].join('/') + '?' + querystring.stringify({ 'uniqueName': uniqueName }), null, null, null);
    }
    getCertificateRequest(accountId, uniqueName, $resultStream) {
        return this.$serviceProxy.call('GetCertificateRequest', 'GET', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'identityStore', 'certificationRequests', 'export'].join('/') + '?' + querystring.stringify({ 'uniqueName': uniqueName }), 'application/octet-stream', null, $resultStream);
    }
}
exports.AccountsIdentityStoreService = AccountsIdentityStoreService;
class IdentityStoreService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getIdentities() {
        return this.$serviceProxy.call('GetIdentities', 'GET', ['api', 'identityStore', 'identities'].join('/'), 'application/json', null, null);
    }
    generateSelfSignedIdentity(generationData) {
        return this.$serviceProxy.call('GenerateSelfSignedIdentity', 'GENERATE', ['api', 'identityStore', 'identities'].join('/'), 'application/json', [{ name: 'generationData', value: JSON.stringify(generationData), contentType: 'application/json' }], null);
    }
    importIdentity(importType, password, stream) {
        return this.$serviceProxy.call('ImportIdentity', 'POST', ['api', 'identityStore', 'identities'].join('/') + '?' + querystring.stringify({ 'importType': importType, 'password': password }), 'application/json', [{ name: 'stream', value: stream, contentType: 'application/octet-stream' }], null);
    }
    removeIdentity(identityAlias) {
        return this.$serviceProxy.call('RemoveIdentity', 'DELETE', ['api', 'identityStore', 'identities'].join('/') + '?' + querystring.stringify({ 'identityAlias': identityAlias }), null, null, null);
    }
    getIdentity(identityAlias, password, $resultStream) {
        return this.$serviceProxy.call('GetIdentity', 'GET', ['api', 'identityStore', 'identities', 'export'].join('/') + '?' + querystring.stringify({ 'identityAlias': identityAlias, 'password': password }), 'application/octet-stream', null, $resultStream);
    }
    getCertificateRequests() {
        return this.$serviceProxy.call('GetCertificateRequests', 'GET', ['api', 'identityStore', 'certificationRequests'].join('/'), 'application/json', null, null);
    }
    generateCertificationRequest(subjectNameValues) {
        return this.$serviceProxy.call('GenerateCertificationRequest', 'POST', ['api', 'identityStore', 'certificationRequests'].join('/'), 'application/json', [{ name: 'subjectNameValues', value: JSON.stringify(subjectNameValues), contentType: 'application/json' }], null);
    }
    removeCertificateRequest(uniqueName) {
        return this.$serviceProxy.call('RemoveCertificateRequest', 'DELETE', ['api', 'identityStore', 'certificationRequests'].join('/') + '?' + querystring.stringify({ 'uniqueName': uniqueName }), null, null, null);
    }
    getCertificateRequest(uniqueName, $resultStream) {
        return this.$serviceProxy.call('GetCertificateRequest', 'GET', ['api', 'identityStore', 'certificationRequests', 'export'].join('/') + '?' + querystring.stringify({ 'uniqueName': uniqueName }), 'application/octet-stream', null, $resultStream);
    }
}
exports.IdentityStoreService = IdentityStoreService;
class EverliveService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getAuthorizationHeader() {
        return this.$serviceProxy.call('GetAuthorizationHeader', 'GET', ['api', 'everlive', 'authorizationHeader'].join('/'), 'application/json', null, null);
    }
    getEverliveApplications(accountId) {
        return this.$serviceProxy.call('GetEverliveApplications', 'GET', ['api', 'everlive', 'applications', encodeURI(accountId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
}
exports.EverliveService = EverliveService;
class ExtensionsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getExtensions(frameworkVersion) {
        return this.$serviceProxy.call('GetExtensions', 'GET', ['api', 'extensions', encodeURI(frameworkVersion.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getFile(path, $resultStream) {
        return this.$serviceProxy.call('GetFile', 'GET', ['api', 'extensions', 'files', encodeURI(path.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
}
exports.ExtensionsService = ExtensionsService;
class AppsFilesService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getFile(appId, path, $resultStream) {
        return this.$serviceProxy.call('GetFile', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'files', encodeURI(path.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    save(appId, path, content) {
        return this.$serviceProxy.call('Save', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'files', encodeURI(path.replace(/\\/g, '/'))].join('/'), null, [{ name: 'content', value: content, contentType: 'application/octet-stream' }], null);
    }
    createDirectory(appId, path) {
        return this.$serviceProxy.call('CreateDirectory', 'MKDIR', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'files', encodeURI(path.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    remove(appId, path) {
        return this.$serviceProxy.call('Remove', 'DELETE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'files', encodeURI(path.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
}
exports.AppsFilesService = AppsFilesService;
class FilesystemService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getContent(solutionName, path, $resultStream) {
        return this.$serviceProxy.call('GetContent', 'GET', ['api', 'filesystem', 'raw', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(path.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    getFile(solutionSpaceName, solutionName, path, $resultStream) {
        return this.$serviceProxy.call('GetFile', 'GET', ['api', 'filesystem', 'file', encodeURI(solutionSpaceName.replace(/\\/g, '/')), encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(path.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    save(solutionName, path, content) {
        return this.$serviceProxy.call('Save', 'POST', ['api', 'filesystem', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(path.replace(/\\/g, '/'))].join('/'), null, [{ name: 'content', value: content, contentType: 'application/octet-stream' }], null);
    }
    createDirectory(solutionName, path) {
        return this.$serviceProxy.call('CreateDirectory', 'MKDIR', ['api', 'filesystem', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(path.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    remove(solutionName, path) {
        return this.$serviceProxy.call('Remove', 'DELETE', ['api', 'filesystem', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(path.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
}
exports.FilesystemService = FilesystemService;
class UploadService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    completeUpload(path, originalFileHash) {
        return this.$serviceProxy.call('CompleteUpload', 'POST', ['api', 'upload', 'complete', encodeURI(path.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'originalFileHash': originalFileHash }), null, null, null);
    }
    initUpload(path) {
        return this.$serviceProxy.call('InitUpload', 'POST', ['api', 'upload', encodeURI(path.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    uploadChunk(path, content) {
        return this.$serviceProxy.call('UploadChunk', 'PUT', ['api', 'upload', encodeURI(path.replace(/\\/g, '/'))].join('/'), null, [{ name: 'content', value: content, contentType: 'application/octet-stream' }], null);
    }
}
exports.UploadService = UploadService;
class AppsImagesService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    resizeImage(appId, path, size) {
        return this.$serviceProxy.call('ResizeImage', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'images', 'resize', encodeURI(path.replace(/\\/g, '/'))].join('/'), null, [{ name: 'size', value: JSON.stringify(size), contentType: 'application/json' }], null);
    }
    generate(appId, projectName, type, image) {
        return this.$serviceProxy.call('Generate', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'images', 'generate', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'type': type }), 'application/json', [{ name: 'image', value: image, contentType: 'application/octet-stream' }], null);
    }
}
exports.AppsImagesService = AppsImagesService;
class ImagesService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    resizeImage(solutionName, path, size) {
        return this.$serviceProxy.call('ResizeImage', 'POST', ['api', 'images', 'resize', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(path.replace(/\\/g, '/'))].join('/'), null, [{ name: 'size', value: JSON.stringify(size), contentType: 'application/json' }], null);
    }
    generate(solutionName, projectName, type, image) {
        return this.$serviceProxy.call('Generate', 'POST', ['api', 'images', 'generate', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'type': type }), 'application/json', [{ name: 'image', value: image, contentType: 'application/octet-stream' }], null);
    }
    generateArchive(type, image, $resultStream) {
        return this.$serviceProxy.call('GenerateArchive', 'POST', ['api', 'images', 'generate'].join('/') + '?' + querystring.stringify({ 'type': type }), 'application/octet-stream', [{ name: 'image', value: image, contentType: 'application/octet-stream' }], $resultStream);
    }
}
exports.ImagesService = ImagesService;
class AppsItmstransporterService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    uploadApplicationFromUri(appId, projectName, adamId, packageUri, username, password) {
        return this.$serviceProxy.call('UploadApplicationFromUri', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'itmstransporter', 'upload', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'adamId': adamId, 'packageUri': packageUri, 'username': username }), null, [{ name: 'password', value: JSON.stringify(password), contentType: 'application/json' }], null);
    }
    uploadApplication(appId, projectName, relativePackagePath, adamId, username, password) {
        return this.$serviceProxy.call('UploadApplication', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'itmstransporter', 'upload', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(relativePackagePath.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'adamId': adamId, 'username': username }), null, [{ name: 'password', value: JSON.stringify(password), contentType: 'application/json' }], null);
    }
}
exports.AppsItmstransporterService = AppsItmstransporterService;
class ItmstransporterService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getApplicationsReadyForUpload(username, password) {
        return this.$serviceProxy.call('GetApplicationsReadyForUpload', 'POST', ['api', 'itmstransporter', 'applications'].join('/') + '?' + querystring.stringify({ 'username': username }), 'application/json', [{ name: 'password', value: JSON.stringify(password), contentType: 'application/json' }], null);
    }
    uploadApplicationFromUri(solutionName, projectName, adamId, packageUri, username, password) {
        return this.$serviceProxy.call('UploadApplicationFromUri', 'POST', ['api', 'itmstransporter', 'upload', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'adamId': adamId, 'packageUri': packageUri, 'username': username }), null, [{ name: 'password', value: JSON.stringify(password), contentType: 'application/json' }], null);
    }
    uploadApplication(solutionName, projectName, relativePackagePath, adamId, username, password) {
        return this.$serviceProxy.call('UploadApplication', 'POST', ['api', 'itmstransporter', 'upload', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(relativePackagePath.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'adamId': adamId, 'username': username }), null, [{ name: 'password', value: JSON.stringify(password), contentType: 'application/json' }], null);
    }
}
exports.ItmstransporterService = ItmstransporterService;
class AppsKendoService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    changeKendoPackage(appId, projectName, packageId) {
        return this.$serviceProxy.call('ChangeKendoPackage', 'PATCH', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'kendo', encodeURI(projectName.replace(/\\/g, '/')), 'migrate'].join('/') + '?' + querystring.stringify({ 'packageId': packageId }), null, null, null);
    }
    getCurrentPackage(appId, projectName) {
        return this.$serviceProxy.call('GetCurrentPackage', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'kendo', encodeURI(projectName.replace(/\\/g, '/')), 'version'].join('/'), 'application/json', null, null);
    }
}
exports.AppsKendoService = AppsKendoService;
class KendoService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getPackages() {
        return this.$serviceProxy.call('GetPackages', 'GET', ['api', 'kendo', 'packages'].join('/'), 'application/json', null, null);
    }
    changeKendoPackage(solutionName, projectName, packageId) {
        return this.$serviceProxy.call('ChangeKendoPackage', 'PATCH', ['api', 'kendo', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), 'migrate'].join('/') + '?' + querystring.stringify({ 'packageId': packageId }), null, null, null);
    }
    getCurrentPackage(solutionName, projectName) {
        return this.$serviceProxy.call('GetCurrentPackage', 'GET', ['api', 'kendo', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), 'version'].join('/'), 'application/json', null, null);
    }
}
exports.KendoService = KendoService;
class AccountsMobileprovisionsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getProvisions(accountId) {
        return this.$serviceProxy.call('GetProvisions', 'GET', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'mobileprovisions'].join('/'), 'application/json', null, null);
    }
    importProvision(accountId, provision) {
        return this.$serviceProxy.call('ImportProvision', 'POST', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'mobileprovisions'].join('/'), 'application/json', [{ name: 'provision', value: provision, contentType: 'application/octet-stream' }], null);
    }
    getProvision(accountId, identifier, $resultStream) {
        return this.$serviceProxy.call('GetProvision', 'GET', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'mobileprovisions', encodeURI(identifier.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    removeProvision(accountId, identifier) {
        return this.$serviceProxy.call('RemoveProvision', 'DELETE', ['api', 'accounts', encodeURI(accountId.replace(/\\/g, '/')), 'mobileprovisions', encodeURI(identifier.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
}
exports.AccountsMobileprovisionsService = AccountsMobileprovisionsService;
class MobileprovisionsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getProvisions() {
        return this.$serviceProxy.call('GetProvisions', 'GET', ['api', 'mobileprovisions'].join('/'), 'application/json', null, null);
    }
    importProvision(provision) {
        return this.$serviceProxy.call('ImportProvision', 'POST', ['api', 'mobileprovisions'].join('/'), 'application/json', [{ name: 'provision', value: provision, contentType: 'application/octet-stream' }], null);
    }
    getProvision(identifier, $resultStream) {
        return this.$serviceProxy.call('GetProvision', 'GET', ['api', 'mobileprovisions', encodeURI(identifier.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    removeProvision(identifier) {
        return this.$serviceProxy.call('RemoveProvision', 'DELETE', ['api', 'mobileprovisions', encodeURI(identifier.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
}
exports.MobileprovisionsService = MobileprovisionsService;
class AppsNativescriptService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    migrate(appId, projectName, targetVersion) {
        return this.$serviceProxy.call('Migrate', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'nativescript', 'migrate', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'targetVersion': targetVersion }), 'application/json', null, null);
    }
    migrate1(appId, projectName, targetVersion) {
        return this.$serviceProxy.call('Migrate', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'nativescript', encodeURI(projectName.replace(/\\/g, '/')), 'migrate'].join('/') + '?' + querystring.stringify({ 'targetVersion': targetVersion }), 'application/json', null, null);
    }
}
exports.AppsNativescriptService = AppsNativescriptService;
class NativescriptService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    migrate(solutionName, projectName, targetVersion) {
        return this.$serviceProxy.call('Migrate', 'POST', ['api', 'nativescript', 'migrate', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'targetVersion': targetVersion }), 'application/json', null, null);
    }
    getMarketplacePluginVersionsData() {
        return this.$serviceProxy.call('GetMarketplacePluginVersionsData', 'GET', ['api', 'nativescript', 'marketplace-plugins'].join('/'), 'application/json', null, null);
    }
}
exports.NativescriptService = NativescriptService;
class AppsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    exportApplication(appId, skipMetadata, $resultStream) {
        return this.$serviceProxy.call('ExportApplication', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'export'].join('/') + '?' + querystring.stringify({ 'skipMetadata': skipMetadata }), 'application/octet-stream', null, $resultStream);
    }
    createApplication(applicationData) {
        return this.$serviceProxy.call('CreateApplication', 'POST', ['api', 'apps'].join('/'), 'application/json', [{ name: 'applicationData', value: JSON.stringify(applicationData), contentType: 'application/json' }], null);
    }
    enableApplication(appId, expansionData) {
        return this.$serviceProxy.call('EnableApplication', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/'))].join('/'), null, [{ name: 'expansionData', value: JSON.stringify(expansionData), contentType: 'application/json' }], null);
    }
    getApplication(appId) {
        return this.$serviceProxy.call('GetApplication', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    canLoadApplication(appId) {
        return this.$serviceProxy.call('CanLoadApplication', 'EXISTS', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    deleteApplication(appId) {
        return this.$serviceProxy.call('DeleteApplication', 'DELETE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    upgradeApplication(appId, mandatoryOnly) {
        return this.$serviceProxy.call('UpgradeApplication', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'upgrade'].join('/') + '?' + querystring.stringify({ 'mandatoryOnly': mandatoryOnly }), null, null, null);
    }
    getApplicationServices(appId, serviceNames) {
        return this.$serviceProxy.call('GetApplicationServices', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'services'].join('/') + '?' + querystring.stringify({ 'serviceNames': serviceNames }), 'application/json', null, null);
    }
    enableApplicationService(appId, serviceData) {
        return this.$serviceProxy.call('EnableApplicationService', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'services'].join('/'), 'application/json', [{ name: 'serviceData', value: JSON.stringify(serviceData), contentType: 'application/json' }], null);
    }
    getApplicationType(appId) {
        return this.$serviceProxy.call('GetApplicationType', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'type'].join('/'), 'application/json', null, null);
    }
    deleteApplicationCache(appId) {
        return this.$serviceProxy.call('DeleteApplicationCache', 'DELETE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'cache'].join('/'), null, null, null);
    }
}
exports.AppsService = AppsService;
class AppsBowerService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    installDependencies(appId, projectName) {
        return this.$serviceProxy.call('InstallDependencies', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'bower', 'dependencies', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    installPackage(appId, projectName, packageName, version) {
        return this.$serviceProxy.call('InstallPackage', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'bower', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(packageName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'version': version }), null, null, null);
    }
    getInstalledPackages(appId, projectName) {
        return this.$serviceProxy.call('GetInstalledPackages', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'bower', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
}
exports.AppsBowerService = AppsBowerService;
class BowerService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    installDependencies(solutionName, projectName) {
        return this.$serviceProxy.call('InstallDependencies', 'POST', ['api', 'bower', 'dependencies', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    installPackage(solutionName, projectName, packageName, version) {
        return this.$serviceProxy.call('InstallPackage', 'PUT', ['api', 'bower', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(packageName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'version': version }), null, null, null);
    }
    getInstalledPackages(solutionName, projectName) {
        return this.$serviceProxy.call('GetInstalledPackages', 'GET', ['api', 'bower', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getFilters() {
        return this.$serviceProxy.call('GetFilters', 'GET', ['api', 'bower', 'filters'].join('/'), 'application/json', null, null);
    }
}
exports.BowerService = BowerService;
class AppsBuildService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    buildProject(appId, projectName, buildRequest) {
        return this.$serviceProxy.call('BuildProject', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'build', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'buildRequest', value: JSON.stringify(buildRequest), contentType: 'application/json' }], null);
    }
    exportProject(appId, projectName, buildRequest) {
        const call = this.$serviceProxy.call.bind(this.$serviceProxy, 'ExportProject', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'build', 'export', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'buildRequest', value: JSON.stringify(buildRequest), contentType: 'application/json' }], null);
        return this.$serviceProxy.callWithoutSolutionSpaceHeader(call);
    }
}
exports.AppsBuildService = AppsBuildService;
class BuildService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    buildProject(solutionName, projectName, buildRequest) {
        return this.$serviceProxy.call('BuildProject', 'POST', ['api', 'build', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'buildRequest', value: JSON.stringify(buildRequest), contentType: 'application/json' }], null);
    }
}
exports.BuildService = BuildService;
class NpmService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    queryNpmSearch(count, query, start) {
        return this.$serviceProxy.call('QueryNpmSearch', 'GET', ['api', 'npm', 'search'].join('/') + '?' + querystring.stringify({ 'count': count, 'query': query, 'start': start }), 'application/json', null, null);
    }
    getNpmPackageInfo(packageName) {
        return this.$serviceProxy.call('GetNpmPackageInfo', 'GET', ['api', 'npm', 'info', encodeURI(packageName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getNpmPackageDownloads(packageName) {
        return this.$serviceProxy.call('GetNpmPackageDownloads', 'GET', ['api', 'npm', 'downloads', encodeURI(packageName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
}
exports.NpmService = NpmService;
class AppsProjectsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    exportProject(appId, projectName, skipMetadata, $resultStream) {
        return this.$serviceProxy.call('ExportProject', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'export', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'skipMetadata': skipMetadata }), 'application/octet-stream', null, $resultStream);
    }
    importPackage(appId, projectName, parentIdentifier, archivePackage) {
        return this.$serviceProxy.call('ImportPackage', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'import', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(parentIdentifier.replace(/\\/g, '/'))].join('/'), null, [{ name: 'archivePackage', value: archivePackage, contentType: 'application/octet-stream' }], null);
    }
    importProject(appId, projectName, cleanImport, package_) {
        return this.$serviceProxy.call('ImportProject', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'importProject', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'cleanImport': cleanImport }), null, [{ name: 'package_', value: package_, contentType: 'application/octet-stream' }], null);
    }
    importLocalProject(appId, projectName, bucketKey, cleanImport) {
        return this.$serviceProxy.call('ImportLocalProject', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'importProject', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(bucketKey.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'cleanImport': cleanImport }), null, null, null);
    }
    getProjectContents(appId, projectName) {
        return this.$serviceProxy.call('GetProjectContents', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'contents', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    saveProjectContents(appId, projectName, projectContents) {
        return this.$serviceProxy.call('SaveProjectContents', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'contents', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'projectContents', value: JSON.stringify(projectContents), contentType: 'application/json' }], null);
    }
    getProjectConfiguraitons(appId, projectName) {
        return this.$serviceProxy.call('GetProjectConfiguraitons', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'configurations', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getNodeModules(appId, projectName, operationId) {
        return this.$serviceProxy.call('GetNodeModules', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', encodeURI(projectName.replace(/\\/g, '/')), 'node_modules', encodeURI(operationId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    createProject(appId, projectName, expansionData) {
        return this.$serviceProxy.call('CreateProject', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'expansionData', value: JSON.stringify(expansionData), contentType: 'application/json' }], null);
    }
    deleteProject(appId, projectName) {
        return this.$serviceProxy.call('DeleteProject', 'DELETE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    setProjectProperty(appId, projectName, configuration, changeset) {
        return this.$serviceProxy.call('SetProjectProperty', 'PATCH', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), null, [{ name: 'changeset', value: JSON.stringify(changeset), contentType: 'application/json' }], null);
    }
    renameProject(appId, projectName, newProjectName) {
        return this.$serviceProxy.call('RenameProject', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', 'rename', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(newProjectName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    createNewProjectItem(appId, projectName, itemIdentifier, expansionData) {
        return this.$serviceProxy.call('CreateNewProjectItem', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projects', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(itemIdentifier.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'expansionData', value: JSON.stringify(expansionData), contentType: 'application/json' }], null);
    }
}
exports.AppsProjectsService = AppsProjectsService;
class AppsProjectPluginsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getPlugins(appId, projectName, configuration) {
        return this.$serviceProxy.call('GetPlugins', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projectPlugins', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), 'application/json', null, null);
    }
    addOrUpdatePlugin(appId, projectName, pluginId, configuration, pluginSpec) {
        return this.$serviceProxy.call('AddOrUpdatePlugin', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projectPlugins', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(pluginId.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), null, [{ name: 'pluginSpec', value: JSON.stringify(pluginSpec), contentType: 'application/json' }], null);
    }
    removePlugin(appId, projectName, pluginId, configuration) {
        return this.$serviceProxy.call('RemovePlugin', 'DELETE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'projectPlugins', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(pluginId.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), null, null, null);
    }
}
exports.AppsProjectPluginsService = AppsProjectPluginsService;
class ProjectsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getProjectTemplates() {
        return this.$serviceProxy.call('GetProjectTemplates', 'GET', ['api', 'projects', 'projectTemplates'].join('/'), 'application/json', null, null);
    }
    getItemTemplates() {
        return this.$serviceProxy.call('GetItemTemplates', 'GET', ['api', 'projects', 'itemTemplates'].join('/'), 'application/json', null, null);
    }
    exportSolution(solutionSpaceName, solutionName, skipMetadata, $resultStream) {
        return this.$serviceProxy.call('ExportSolution', 'GET', ['api', 'projects', 'export', encodeURI(solutionSpaceName.replace(/\\/g, '/')), encodeURI(solutionName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'skipMetadata': skipMetadata }), 'application/octet-stream', null, $resultStream);
    }
    exportProject(solutionSpaceName, solutionName, projectName, skipMetadata, $resultStream) {
        return this.$serviceProxy.call('ExportProject', 'GET', ['api', 'projects', 'export', encodeURI(solutionSpaceName.replace(/\\/g, '/')), encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'skipMetadata': skipMetadata }), 'application/octet-stream', null, $resultStream);
    }
    importPackage(solutionName, projectName, parentIdentifier, archivePackage) {
        return this.$serviceProxy.call('ImportPackage', 'POST', ['api', 'projects', 'import', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(parentIdentifier.replace(/\\/g, '/'))].join('/'), null, [{ name: 'archivePackage', value: archivePackage, contentType: 'application/octet-stream' }], null);
    }
    importProject(solutionName, projectName, cleanImport, package_) {
        return this.$serviceProxy.call('ImportProject', 'POST', ['api', 'projects', 'importProject', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'cleanImport': cleanImport }), null, [{ name: 'package_', value: package_, contentType: 'application/octet-stream' }], null);
    }
    importLocalProject(solutionName, projectName, bucketKey, cleanImport) {
        return this.$serviceProxy.call('ImportLocalProject', 'POST', ['api', 'projects', 'importProject', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(bucketKey.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'cleanImport': cleanImport }), null, null, null);
    }
    getProjectContents(solutionName, projectName) {
        return this.$serviceProxy.call('GetProjectContents', 'GET', ['api', 'projects', 'contents', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    saveProjectContents(solutionName, projectName, projectContents) {
        return this.$serviceProxy.call('SaveProjectContents', 'PUT', ['api', 'projects', 'contents', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'projectContents', value: JSON.stringify(projectContents), contentType: 'application/json' }], null);
    }
    getProjectConfiguraitons(solutionName, projectName) {
        return this.$serviceProxy.call('GetProjectConfiguraitons', 'GET', ['api', 'projects', 'configurations', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    upgradeSolution(solutionName, mandatoryOnly) {
        return this.$serviceProxy.call('UpgradeSolution', 'UPGRADE', ['api', 'projects', 'upgrade', encodeURI(solutionName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'mandatoryOnly': mandatoryOnly }), null, null, null);
    }
    getSolution(solutionName) {
        return this.$serviceProxy.call('GetSolution', 'GET', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    canLoadSolution(solutionName) {
        return this.$serviceProxy.call('CanLoadSolution', 'EXISTS', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    deleteSolution(solutionName) {
        return this.$serviceProxy.call('DeleteSolution', 'DELETE', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    createSolution(solutionName, expansionData) {
        return this.$serviceProxy.call('CreateSolution', 'POST', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'expansionData', value: JSON.stringify(expansionData), contentType: 'application/json' }], null);
    }
    getSolutionType(solutionName) {
        return this.$serviceProxy.call('GetSolutionType', 'GET', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/')), 'type'].join('/'), 'application/json', null, null);
    }
    renameSolution(solutionName, newSolutionName) {
        return this.$serviceProxy.call('RenameSolution', 'PUT', ['api', 'projects', 'rename', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(newSolutionName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    createProject(solutionName, projectName, expansionData) {
        return this.$serviceProxy.call('CreateProject', 'POST', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'expansionData', value: JSON.stringify(expansionData), contentType: 'application/json' }], null);
    }
    deleteProject(solutionName, projectName) {
        return this.$serviceProxy.call('DeleteProject', 'DELETE', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    setProjectProperty(solutionName, projectName, configuration, changeset) {
        return this.$serviceProxy.call('SetProjectProperty', 'PATCH', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'configuration': configuration }), null, [{ name: 'changeset', value: JSON.stringify(changeset), contentType: 'application/json' }], null);
    }
    renameProject(solutionName, projectName, newProjectName) {
        return this.$serviceProxy.call('RenameProject', 'PUT', ['api', 'projects', 'rename', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(newProjectName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    createNewProjectItem(solutionName, projectName, itemIdentifier, expansionData) {
        return this.$serviceProxy.call('CreateNewProjectItem', 'POST', ['api', 'projects', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(itemIdentifier.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'expansionData', value: JSON.stringify(expansionData), contentType: 'application/json' }], null);
    }
}
exports.ProjectsService = ProjectsService;
class AppsPublishService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    publishFtp(appId, projectName, ftpConnectionData) {
        return this.$serviceProxy.call('PublishFtp', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'publish', 'ftp', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'ftpConnectionData', value: JSON.stringify(ftpConnectionData), contentType: 'application/json' }], null);
    }
}
exports.AppsPublishService = AppsPublishService;
class PublishService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    publishFtp(solutionName, projectName, ftpConnectionData) {
        return this.$serviceProxy.call('PublishFtp', 'POST', ['api', 'publish', 'ftp', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'ftpConnectionData', value: JSON.stringify(ftpConnectionData), contentType: 'application/json' }], null);
    }
}
exports.PublishService = PublishService;
class AppsRawSettingsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getSolutionUserSettings(appId, $resultStream) {
        return this.$serviceProxy.call('GetSolutionUserSettings', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'rawSettings', 'solution'].join('/'), 'application/octet-stream', null, $resultStream);
    }
    saveSolutionUserSettings(appId, content) {
        return this.$serviceProxy.call('SaveSolutionUserSettings', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'rawSettings', 'solution'].join('/'), null, [{ name: 'content', value: content, contentType: 'application/octet-stream' }], null);
    }
}
exports.AppsRawSettingsService = AppsRawSettingsService;
class RawSettingsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getUserSettings(file, $resultStream) {
        return this.$serviceProxy.call('GetUserSettings', 'GET', ['api', 'rawSettings', 'currentUser', encodeURI(file.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    saveUserSettings(file, content) {
        return this.$serviceProxy.call('SaveUserSettings', 'POST', ['api', 'rawSettings', 'currentUser', encodeURI(file.replace(/\\/g, '/'))].join('/'), null, [{ name: 'content', value: content, contentType: 'application/octet-stream' }], null);
    }
    getSolutionUserSettings(solutionName, $resultStream) {
        return this.$serviceProxy.call('GetSolutionUserSettings', 'GET', ['api', 'rawSettings', 'solution', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), 'application/octet-stream', null, $resultStream);
    }
    saveSolutionUserSettings(solutionName, content) {
        return this.$serviceProxy.call('SaveSolutionUserSettings', 'POST', ['api', 'rawSettings', 'solution', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'content', value: content, contentType: 'application/octet-stream' }], null);
    }
}
exports.RawSettingsService = RawSettingsService;
class AppsSettingsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getSettings(appId) {
        return this.$serviceProxy.call('GetSettings', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'settings', 'solution'].join('/'), 'application/json', null, null);
    }
    setCodesignIdentity(appId, projectIdentity, platform, identityAlias) {
        return this.$serviceProxy.call('SetCodesignIdentity', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'settings', 'codesignIdentity', encodeURI(projectIdentity.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'platform': platform }), null, [{ name: 'identityAlias', value: JSON.stringify(identityAlias), contentType: 'application/json' }], null);
    }
    setMobileProvision(appId, projectIdentity, provisionIdentifier) {
        return this.$serviceProxy.call('SetMobileProvision', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'settings', 'mobileProvision', encodeURI(projectIdentity.replace(/\\/g, '/'))].join('/'), null, [{ name: 'provisionIdentifier', value: JSON.stringify(provisionIdentifier), contentType: 'application/json' }], null);
    }
    setActiveBuildConfiguration(appId, buildConfiguration) {
        return this.$serviceProxy.call('SetActiveBuildConfiguration', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'settings', 'buildConfiguration', encodeURI(buildConfiguration.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    updateSettingsProjectIdentifier(appId, projectIdentity, newProjectIdentity) {
        return this.$serviceProxy.call('UpdateSettingsProjectIdentifier', 'PATCH', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'settings', 'updateProjectIdentifier', encodeURI(projectIdentity.replace(/\\/g, '/'))].join('/'), null, [{ name: 'newProjectIdentity', value: JSON.stringify(newProjectIdentity), contentType: 'application/json' }], null);
    }
}
exports.AppsSettingsService = AppsSettingsService;
class SettingsService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getSettings(solutionName) {
        return this.$serviceProxy.call('GetSettings', 'GET', ['api', 'settings', 'solution', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    setCodesignIdentity(solutionName, projectIdentity, platform, identityAlias) {
        return this.$serviceProxy.call('SetCodesignIdentity', 'PUT', ['api', 'settings', 'codesignIdentity', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectIdentity.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'platform': platform }), null, [{ name: 'identityAlias', value: JSON.stringify(identityAlias), contentType: 'application/json' }], null);
    }
    setMobileProvision(solutionName, projectIdentity, provisionIdentifier) {
        return this.$serviceProxy.call('SetMobileProvision', 'PUT', ['api', 'settings', 'mobileProvision', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectIdentity.replace(/\\/g, '/'))].join('/'), null, [{ name: 'provisionIdentifier', value: JSON.stringify(provisionIdentifier), contentType: 'application/json' }], null);
    }
    setActiveBuildConfiguration(buildConfiguration, solutionName) {
        return this.$serviceProxy.call('SetActiveBuildConfiguration', 'PUT', ['api', 'settings', 'buildConfiguration', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(buildConfiguration.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    updateSettingsProjectIdentifier(solutionName, projectIdentity, newProjectIdentity) {
        return this.$serviceProxy.call('UpdateSettingsProjectIdentifier', 'PATCH', ['api', 'settings', 'updateProjectIdentifier', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectIdentity.replace(/\\/g, '/'))].join('/'), null, [{ name: 'newProjectIdentity', value: JSON.stringify(newProjectIdentity), contentType: 'application/json' }], null);
    }
}
exports.SettingsService = SettingsService;
class AppsTamService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    uploadApplicationFromUri(appId, projectName, packageUri, settings) {
        return this.$serviceProxy.call('UploadApplicationFromUri', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'tam', 'applications', encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'packageUri': packageUri }), 'application/json', [{ name: 'settings', value: JSON.stringify(settings), contentType: 'application/json' }], null);
    }
    uploadPatch(appId, projectName, patchData) {
        return this.$serviceProxy.call('UploadPatch', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'tam', 'patches', encodeURI(projectName.replace(/\\/g, '/'))].join('/'), null, [{ name: 'patchData', value: JSON.stringify(patchData), contentType: 'application/json' }], null);
    }
    uploadApplication(appId, projectName, relativePackagePath, settings) {
        return this.$serviceProxy.call('UploadApplication', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'tam', 'applications', encodeURI(projectName.replace(/\\/g, '/')), encodeURI(relativePackagePath.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'settings', value: JSON.stringify(settings), contentType: 'application/json' }], null);
    }
}
exports.AppsTamService = AppsTamService;
class TamService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    verifyStoreCreated() {
        return this.$serviceProxy.call('VerifyStoreCreated', 'GET', ['api', 'tam', 'store'].join('/'), null, null, null);
    }
    getGroups() {
        return this.$serviceProxy.call('GetGroups', 'GET', ['api', 'tam', 'groups'].join('/'), 'application/json', null, null);
    }
    uploadApplicationFromUri(solutionName, projectName, packageUri, settings) {
        return this.$serviceProxy.call('UploadApplicationFromUri', 'POST', ['api', 'tam', 'applications', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'packageUri': packageUri }), 'application/json', [{ name: 'settings', value: JSON.stringify(settings), contentType: 'application/json' }], null);
    }
    uploadPatch(solutionName, projectName, patchData) {
        return this.$serviceProxy.call('UploadPatch', 'POST', ['api', 'tam', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), 'patches'].join('/'), null, [{ name: 'patchData', value: JSON.stringify(patchData), contentType: 'application/json' }], null);
    }
    getAccountStatus() {
        return this.$serviceProxy.call('GetAccountStatus', 'GET', ['api', 'tam', 'account', 'status'].join('/'), 'application/json', null, null);
    }
    uploadApplication(solutionName, projectName, relativePackagePath, settings) {
        return this.$serviceProxy.call('UploadApplication', 'POST', ['api', 'tam', 'applications', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(projectName.replace(/\\/g, '/')), encodeURI(relativePackagePath.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'settings', value: JSON.stringify(settings), contentType: 'application/json' }], null);
    }
}
exports.TamService = TamService;
class AppsTapService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getRemote(appId) {
        return this.$serviceProxy.call('GetRemote', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'tap', 'versioncontrol', 'remote'].join('/'), 'application/json', null, null);
    }
    setRemote(appId, remoteUrl) {
        return this.$serviceProxy.call('SetRemote', 'PUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'tap', 'versioncontrol', 'remote'].join('/'), null, [{ name: 'remoteUrl', value: JSON.stringify(remoteUrl), contentType: 'application/json' }], null);
    }
    initCurrentUserSharedRepository(appId) {
        return this.$serviceProxy.call('InitCurrentUserSharedRepository', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'tap', 'userProjects', 'initSharedRepository'].join('/'), 'application/json', null, null);
    }
}
exports.AppsTapService = AppsTapService;
class TapService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    getFeatures(accountId, serviceType) {
        return this.$serviceProxy.call('GetFeatures', 'GET', ['api', 'tap', 'features', encodeURI(accountId.replace(/\\/g, '/')), encodeURI(serviceType.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getExistingClientSolutions() {
        return this.$serviceProxy.call('GetExistingClientSolutions', 'GET', ['api', 'tap', 'projects'].join('/'), 'application/json', null, null);
    }
    getRemote(solutionName) {
        return this.$serviceProxy.call('GetRemote', 'GET', ['api', 'tap', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'remote'].join('/'), 'application/json', null, null);
    }
    setRemote(solutionName, remoteUrl) {
        return this.$serviceProxy.call('SetRemote', 'PUT', ['api', 'tap', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'remote'].join('/'), null, [{ name: 'remoteUrl', value: JSON.stringify(remoteUrl), contentType: 'application/json' }], null);
    }
    getUsersForProject(solutionName) {
        return this.$serviceProxy.call('GetUsersForProject', 'GET', ['api', 'tap', 'userProjects', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    initCurrentUserSharedRepository(solutionName) {
        return this.$serviceProxy.call('InitCurrentUserSharedRepository', 'POST', ['api', 'tap', 'userProjects', encodeURI(solutionName.replace(/\\/g, '/')), 'initSharedRepository'].join('/'), 'application/json', null, null);
    }
    migrate(solutionName, appId) {
        return this.$serviceProxy.call('Migrate', 'POST', ['api', 'tap', 'migrate', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(appId.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    getWorkspaces(accountId) {
        return this.$serviceProxy.call('GetWorkspaces', 'GET', ['api', 'tap', 'workspaces', encodeURI(accountId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getServiceApplications(serviceType, accountId) {
        return this.$serviceProxy.call('GetServiceApplications', 'GET', ['api', 'tap', 'services', encodeURI(serviceType.replace(/\\/g, '/')), encodeURI(accountId.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getServiceApplicationProjectKey(serviceType, id) {
        return this.$serviceProxy.call('GetServiceApplicationProjectKey', 'GET', ['api', 'tap', 'services', encodeURI(serviceType.replace(/\\/g, '/')), encodeURI(id.replace(/\\/g, '/')), 'projectKey'].join('/'), 'application/json', null, null);
    }
    createServiceApplication(serviceType, workspaceId, applicationName, description) {
        return this.$serviceProxy.call('CreateServiceApplication', 'POST', ['api', 'tap', 'services', encodeURI(serviceType.replace(/\\/g, '/')), encodeURI(workspaceId.replace(/\\/g, '/')), encodeURI(applicationName.replace(/\\/g, '/'))].join('/'), 'application/json', [{ name: 'description', value: JSON.stringify(description), contentType: 'application/json' }], null);
    }
    getNotificationSummary(accountId) {
        return this.$serviceProxy.call('GetNotificationSummary', 'GET', ['api', 'tap', 'notifications', encodeURI(accountId.replace(/\\/g, '/')), 'info'].join('/'), 'application/json', null, null);
    }
    getUnreadNotifications(accountId) {
        return this.$serviceProxy.call('GetUnreadNotifications', 'GET', ['api', 'tap', 'notifications', encodeURI(accountId.replace(/\\/g, '/')), 'unread'].join('/'), 'application/json', null, null);
    }
    getReadNotifications(accountId, fromDate) {
        return this.$serviceProxy.call('GetReadNotifications', 'GET', ['api', 'tap', 'notifications', encodeURI(accountId.replace(/\\/g, '/')), 'read'].join('/') + '?' + querystring.stringify({ 'fromDate': fromDate }), 'application/json', null, null);
    }
}
exports.TapService = TapService;
class AppsVersioncontrolService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    init(appId) {
        return this.$serviceProxy.call('Init', 'INIT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol'].join('/'), null, null, null);
    }
    rollback(appId, versionName) {
        return this.$serviceProxy.call('Rollback', 'ROLLBACK', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, null, null);
    }
    reset(appId, resetMode, versionName) {
        return this.$serviceProxy.call('Reset', 'RESET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol'].join('/') + '?' + querystring.stringify({ 'resetMode': resetMode, 'versionName': versionName }), null, null, null);
    }
    merge(appId, versionName) {
        return this.$serviceProxy.call('Merge', 'MERGE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), 'application/json', null, null);
    }
    revert(appId, versionName, filePaths) {
        return this.$serviceProxy.call('Revert', 'REVERT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'files'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    resolve(appId, versionName, filePaths) {
        return this.$serviceProxy.call('Resolve', 'RESOLVE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'files'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    checkout(appId, versionName, filePaths) {
        return this.$serviceProxy.call('Checkout', 'CHECKOUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'files'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    add(appId, filePaths) {
        return this.$serviceProxy.call('Add', 'ADD', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'files'].join('/'), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    remove(appId, filePaths) {
        return this.$serviceProxy.call('Remove', 'REMOVE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'files'].join('/'), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getBranches(appId) {
        return this.$serviceProxy.call('GetBranches', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'branches'].join('/'), 'application/json', null, null);
    }
    getCurrentBranch(appId) {
        return this.$serviceProxy.call('GetCurrentBranch', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'branch'].join('/'), 'application/json', null, null);
    }
    checkoutBranch(appId, branchName, createBranch, versionName) {
        return this.$serviceProxy.call('CheckoutBranch', 'CHECKOUT', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'branches', encodeURI(branchName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'createBranch': createBranch, 'versionName': versionName }), 'application/json', null, null);
    }
    createBranch(appId, branchName, versionName) {
        return this.$serviceProxy.call('CreateBranch', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'branches', encodeURI(branchName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), 'application/json', null, null);
    }
    deleteBranch(appId, branchName, forceDelete) {
        return this.$serviceProxy.call('DeleteBranch', 'DELETE', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'branches', encodeURI(branchName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'forceDelete': forceDelete }), null, null, null);
    }
    getRemote(appId) {
        return this.$serviceProxy.call('GetRemote', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'remote'].join('/'), 'application/json', null, null);
    }
    setRemote(appId, remoteData) {
        return this.$serviceProxy.call('SetRemote', 'POST', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'remote'].join('/'), null, [{ name: 'remoteData', value: JSON.stringify(remoteData), contentType: 'application/json' }], null);
    }
    getInfo(appId) {
        return this.$serviceProxy.call('GetInfo', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'info'].join('/'), 'application/json', null, null);
    }
    track(appId) {
        return this.$serviceProxy.call('Track', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'status'].join('/'), 'application/json', null, null);
    }
    getStatus(appId, filePaths) {
        return this.$serviceProxy.call('GetStatus', 'XGET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'status', 'files'].join('/'), 'application/json', [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getDiff(appId, versionName, contextSize, otherVersionName, filePaths) {
        return this.$serviceProxy.call('GetDiff', 'XGET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', encodeURI(versionName.replace(/\\/g, '/')), 'diff', 'files'].join('/') + '?' + querystring.stringify({ 'contextSize': contextSize, 'otherVersionName': otherVersionName }), 'application/json', [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getConflicts(appId, contextSize, filePaths) {
        return this.$serviceProxy.call('GetConflicts', 'XGET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'conflicts', 'files'].join('/') + '?' + querystring.stringify({ 'contextSize': contextSize }), 'application/json', [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getCommits(appId, endDate, startDate) {
        return this.$serviceProxy.call('GetCommits', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'commits'].join('/') + '?' + querystring.stringify({ 'endDate': endDate, 'startDate': startDate }), 'application/json', null, null);
    }
    getCommit(appId, versionName) {
        return this.$serviceProxy.call('GetCommit', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', 'commit'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), 'application/json', null, null);
    }
    getChanges(appId, versionName) {
        return this.$serviceProxy.call('GetChanges', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', encodeURI(versionName.replace(/\\/g, '/')), 'changes'].join('/'), 'application/json', null, null);
    }
    getContents(appId, versionName, filePath) {
        return this.$serviceProxy.call('GetContents', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', encodeURI(versionName.replace(/\\/g, '/')), 'contents', encodeURI(filePath.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getHistory(appId, versionName, filePath) {
        return this.$serviceProxy.call('GetHistory', 'GET', ['api', 'apps', encodeURI(appId.replace(/\\/g, '/')), 'versioncontrol', encodeURI(versionName.replace(/\\/g, '/')), 'history', encodeURI(filePath.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
}
exports.AppsVersioncontrolService = AppsVersioncontrolService;
class VersioncontrolService {
    constructor($serviceProxy) {
        this.$serviceProxy = $serviceProxy;
    }
    init(solutionName) {
        return this.$serviceProxy.call('Init', 'INIT', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/'))].join('/'), null, null, null);
    }
    rollback(solutionName, versionName) {
        return this.$serviceProxy.call('Rollback', 'ROLLBACK', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, null, null);
    }
    reset(solutionName, resetMode, versionName) {
        return this.$serviceProxy.call('Reset', 'RESET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'resetMode': resetMode, 'versionName': versionName }), null, null, null);
    }
    merge(solutionName, versionName) {
        return this.$serviceProxy.call('Merge', 'MERGE', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), 'application/json', null, null);
    }
    revert(solutionName, versionName, filePaths) {
        return this.$serviceProxy.call('Revert', 'REVERT', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'files'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    resolve(solutionName, versionName, filePaths) {
        return this.$serviceProxy.call('Resolve', 'RESOLVE', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'files'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    checkout(solutionName, versionName, filePaths) {
        return this.$serviceProxy.call('Checkout', 'CHECKOUT', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'files'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    add(solutionName, filePaths) {
        return this.$serviceProxy.call('Add', 'ADD', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'files'].join('/'), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    remove(solutionName, filePaths) {
        return this.$serviceProxy.call('Remove', 'REMOVE', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'files'].join('/'), null, [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getBranches(solutionName) {
        return this.$serviceProxy.call('GetBranches', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'branches'].join('/'), 'application/json', null, null);
    }
    getCurrentBranch(solutionName) {
        return this.$serviceProxy.call('GetCurrentBranch', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'branch'].join('/'), 'application/json', null, null);
    }
    checkoutBranch(solutionName, branchName, createBranch, versionName) {
        return this.$serviceProxy.call('CheckoutBranch', 'CHECKOUT', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'branches', encodeURI(branchName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'createBranch': createBranch, 'versionName': versionName }), 'application/json', null, null);
    }
    createBranch(solutionName, branchName, versionName) {
        return this.$serviceProxy.call('CreateBranch', 'POST', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'branches', encodeURI(branchName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), 'application/json', null, null);
    }
    deleteBranch(solutionName, branchName, forceDelete) {
        return this.$serviceProxy.call('DeleteBranch', 'DELETE', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'branches', encodeURI(branchName.replace(/\\/g, '/'))].join('/') + '?' + querystring.stringify({ 'forceDelete': forceDelete }), null, null, null);
    }
    getRemote(solutionName) {
        return this.$serviceProxy.call('GetRemote', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'remote'].join('/'), 'application/json', null, null);
    }
    setRemote(solutionName, remoteData) {
        return this.$serviceProxy.call('SetRemote', 'POST', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'remote'].join('/'), null, [{ name: 'remoteData', value: JSON.stringify(remoteData), contentType: 'application/json' }], null);
    }
    getInfo(solutionName) {
        return this.$serviceProxy.call('GetInfo', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'info'].join('/'), 'application/json', null, null);
    }
    track(solutionName) {
        return this.$serviceProxy.call('Track', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'status'].join('/'), 'application/json', null, null);
    }
    getStatus(solutionName, filePaths) {
        return this.$serviceProxy.call('GetStatus', 'XGET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'status', 'files'].join('/'), 'application/json', [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getDiff(solutionName, versionName, contextSize, otherVersionName, filePaths) {
        return this.$serviceProxy.call('GetDiff', 'XGET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(versionName.replace(/\\/g, '/')), 'diff', 'files'].join('/') + '?' + querystring.stringify({ 'contextSize': contextSize, 'otherVersionName': otherVersionName }), 'application/json', [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getConflicts(solutionName, contextSize, filePaths) {
        return this.$serviceProxy.call('GetConflicts', 'XGET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'conflicts', 'files'].join('/') + '?' + querystring.stringify({ 'contextSize': contextSize }), 'application/json', [{ name: 'filePaths', value: JSON.stringify(filePaths), contentType: 'application/json' }], null);
    }
    getCommits(solutionName, endDate, startDate) {
        return this.$serviceProxy.call('GetCommits', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'commits'].join('/') + '?' + querystring.stringify({ 'endDate': endDate, 'startDate': startDate }), 'application/json', null, null);
    }
    getCommit(solutionName, versionName) {
        return this.$serviceProxy.call('GetCommit', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), 'commit'].join('/') + '?' + querystring.stringify({ 'versionName': versionName }), 'application/json', null, null);
    }
    getChanges(solutionName, versionName) {
        return this.$serviceProxy.call('GetChanges', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(versionName.replace(/\\/g, '/')), 'changes'].join('/'), 'application/json', null, null);
    }
    getContents(solutionName, versionName, filePath) {
        return this.$serviceProxy.call('GetContents', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(versionName.replace(/\\/g, '/')), 'contents', encodeURI(filePath.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
    getHistory(solutionName, versionName, filePath) {
        return this.$serviceProxy.call('GetHistory', 'GET', ['api', 'versioncontrol', encodeURI(solutionName.replace(/\\/g, '/')), encodeURI(versionName.replace(/\\/g, '/')), 'history', encodeURI(filePath.replace(/\\/g, '/'))].join('/'), 'application/json', null, null);
    }
}
exports.VersioncontrolService = VersioncontrolService;
class ServiceContainer {
    constructor($injector) {
        this.$injector = $injector;
        this.authentication = this.$injector.resolve(AuthenticationService);
        this.cordova = this.$injector.resolve(CordovaService);
        this.appsCordova = this.$injector.resolve(AppsCordovaService);
        this.accountsIdentityStore = this.$injector.resolve(AccountsIdentityStoreService);
        this.identityStore = this.$injector.resolve(IdentityStoreService);
        this.everlive = this.$injector.resolve(EverliveService);
        this.extensions = this.$injector.resolve(ExtensionsService);
        this.appsFiles = this.$injector.resolve(AppsFilesService);
        this.filesystem = this.$injector.resolve(FilesystemService);
        this.upload = this.$injector.resolve(UploadService);
        this.appsImages = this.$injector.resolve(AppsImagesService);
        this.images = this.$injector.resolve(ImagesService);
        this.appsItmstransporter = this.$injector.resolve(AppsItmstransporterService);
        this.itmstransporter = this.$injector.resolve(ItmstransporterService);
        this.appsKendo = this.$injector.resolve(AppsKendoService);
        this.kendo = this.$injector.resolve(KendoService);
        this.accountsMobileprovisions = this.$injector.resolve(AccountsMobileprovisionsService);
        this.mobileprovisions = this.$injector.resolve(MobileprovisionsService);
        this.appsNativescript = this.$injector.resolve(AppsNativescriptService);
        this.nativescript = this.$injector.resolve(NativescriptService);
        this.apps = this.$injector.resolve(AppsService);
        this.appsBower = this.$injector.resolve(AppsBowerService);
        this.bower = this.$injector.resolve(BowerService);
        this.appsBuild = this.$injector.resolve(AppsBuildService);
        this.build = this.$injector.resolve(BuildService);
        this.npm = this.$injector.resolve(NpmService);
        this.appsProjects = this.$injector.resolve(AppsProjectsService);
        this.appsProjectPlugins = this.$injector.resolve(AppsProjectPluginsService);
        this.projects = this.$injector.resolve(ProjectsService);
        this.appsPublish = this.$injector.resolve(AppsPublishService);
        this.publish = this.$injector.resolve(PublishService);
        this.appsRawSettings = this.$injector.resolve(AppsRawSettingsService);
        this.rawSettings = this.$injector.resolve(RawSettingsService);
        this.appsSettings = this.$injector.resolve(AppsSettingsService);
        this.settings = this.$injector.resolve(SettingsService);
        this.appsTam = this.$injector.resolve(AppsTamService);
        this.tam = this.$injector.resolve(TamService);
        this.appsTap = this.$injector.resolve(AppsTapService);
        this.tap = this.$injector.resolve(TapService);
        this.appsVersioncontrol = this.$injector.resolve(AppsVersioncontrolService);
        this.versioncontrol = this.$injector.resolve(VersioncontrolService);
    }
}
exports.ServiceContainer = ServiceContainer;
$injector.register('server', ServiceContainer);
