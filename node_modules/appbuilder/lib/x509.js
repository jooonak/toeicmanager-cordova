"use strict";
const moment = require("moment");
class X509Certificate {
    constructor($logger) {
        this.$logger = $logger;
    }
    load(certificatePem) {
        let jsrsasign = require("../vendor/jsrsasign");
        this.x509 = new jsrsasign.x509();
        this.x509.readCertPEM(certificatePem);
    }
    get issuerData() {
        return X509Certificate.parseKeyValues(this.x509.getIssuerString());
    }
    get issuedOn() {
        let notBefore = this.x509.getNotBefore();
        return this.toDate(notBefore);
    }
    get expiresOn() {
        let notAfter = this.x509.getNotAfter();
        return this.toDate(notAfter);
    }
    toDate(certificateDate) {
        let timezone = certificateDate.slice(-1);
        if (timezone !== "Z") {
            this.$logger.warn("Certificate time zone is not GMT.");
        }
        let format = "YYMMDDHHmmss";
        if (certificateDate.length === 15) {
            format = "YYYYMMDDHHmmss";
        }
        return moment(certificateDate, format).toDate();
    }
    static parseKeyValues(keyValueStr) {
        let result = {};
        let keyValues = keyValueStr.split("/");
        keyValues.forEach((kv) => {
            let keyAndValue = kv.split("=");
            if (keyAndValue.length >= 1) {
                result[keyAndValue[0]] = keyAndValue[1];
            }
        });
        return result;
    }
}
class X509CertificateLoader {
    constructor($injector) {
        this.$injector = $injector;
    }
    load(certificatePem) {
        let cert = this.$injector.resolve(X509Certificate);
        cert.load(certificatePem);
        return cert;
    }
}
exports.X509CertificateLoader = X509CertificateLoader;
$injector.register("x509", X509CertificateLoader);
