"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const constants_1 = require("../common/constants");
module.exports = () => __awaiter(this, void 0, void 0, function* () {
    let $project = $injector.resolve("project");
    if (!$project.projectData) {
        return;
    }
    let $projectConstants = $injector.resolve("projectConstants");
    let $typeScriptService = $injector.resolve("typeScriptService");
    let typeScriptFilesData = yield $typeScriptService.getTypeScriptFilesData($project.getProjectDir());
    if ($typeScriptService.isTypeScriptProject($project.projectDir)) {
        let $fs = $injector.resolve("fs");
        let pathToTsConfig = path.join($project.projectDir, $projectConstants.TSCONFIG_JSON_NAME);
        if ($project.projectData.Framework.toLowerCase() === constants_1.TARGET_FRAMEWORK_IDENTIFIERS.NativeScript.toLowerCase()) {
            let $projectMigrationService = $injector.resolve("projectMigrationService");
            yield $projectMigrationService.migrateTypeScriptProject();
            let $npmService = $injector.resolve("npmService");
            yield $npmService.install($project.projectDir);
        }
        let useLocalTypeScriptCompiler = true;
        if ($fs.exists(pathToTsConfig)) {
            let json = $fs.readJson(pathToTsConfig);
            let noEmitOnError = !!(json && json.compilerOptions && json.compilerOptions.noEmitOnError);
            yield $typeScriptService.transpile($project.getProjectDir(), null, null, { compilerOptions: { noEmitOnError }, useLocalTypeScriptCompiler });
        }
        else {
            let $resources = $injector.resolve("resources");
            let pathToDefaultDefinitionFiles = $resources.resolvePath(path.join("resources", "typescript-definitions-files"));
            let transpileOptions = { compilerOptions: { noEmitOnError: false }, pathToDefaultDefinitionFiles, useLocalTypeScriptCompiler };
            yield $typeScriptService.transpile($project.projectDir, typeScriptFilesData.typeScriptFiles, typeScriptFilesData.definitionFiles, transpileOptions);
        }
    }
});
